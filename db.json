{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/easyio-master/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/easyio-master/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1502401432000},{"_id":"themes/easyio-master/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1502401432000},{"_id":"themes/easyio-master/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1502401432000},{"_id":"themes/easyio-master/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1502401432000},{"_id":"themes/easyio-master/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1502401432000},{"_id":"themes/easyio-master/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1502401432000},{"_id":"themes/easyio-master/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1502401432000},{"_id":"themes/easyio-master/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1502401432000},{"_id":"themes/easyio-master/.travis.yml","hash":"1a69a0b3ae010b10080069332829205573c64371","modified":1502401432000},{"_id":"themes/easyio-master/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1502401432000},{"_id":"themes/easyio-master/README.md","hash":"0876b7c79aea2a15f35d467a1fb2b98a8a16d447","modified":1502401432000},{"_id":"themes/easyio-master/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1502401432000},{"_id":"themes/easyio-master/_config.yml","hash":"ad565c32fb4d722eaa4611e54cc0b2c844d59f21","modified":1506773964015},{"_id":"themes/easyio-master/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1502401432000},{"_id":"themes/easyio-master/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1502401432000},{"_id":"themes/easyio-master/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1502401432000},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1506756180142},{"_id":"source/_posts/内存分配方式.md","hash":"d806d3ee6e4224ee99828c8189ecceb2d4fb45f1","modified":1506503347716},{"_id":"source/_posts/小根堆.md","hash":"4720406131e678abf4fafd4bf6a98d9e8b022646","modified":1506570290469},{"_id":"themes/easyio-master/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1502401432000},{"_id":"themes/easyio-master/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1502401432000},{"_id":"themes/easyio-master/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1502401432000},{"_id":"themes/easyio-master/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1502401432000},{"_id":"themes/easyio-master/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1502401432000},{"_id":"themes/easyio-master/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1502401432000},{"_id":"themes/easyio-master/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1502401432000},{"_id":"themes/easyio-master/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1502401432000},{"_id":"themes/easyio-master/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1502401432000},{"_id":"themes/easyio-master/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1502401432000},{"_id":"themes/easyio-master/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1502401432000},{"_id":"themes/easyio-master/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1502401432000},{"_id":"themes/easyio-master/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1502401432000},{"_id":"themes/easyio-master/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1502401432000},{"_id":"themes/easyio-master/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1502401432000},{"_id":"themes/easyio-master/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1502401432000},{"_id":"themes/easyio-master/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1502401432000},{"_id":"themes/easyio-master/layout/_layout.swig","hash":"e3c40f48ffbe19e7a2a54e72c8bb273630c37633","modified":1502401432000},{"_id":"themes/easyio-master/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1502401432000},{"_id":"themes/easyio-master/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1502401432000},{"_id":"themes/easyio-master/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1502401432000},{"_id":"themes/easyio-master/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1502401432000},{"_id":"themes/easyio-master/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1502401432000},{"_id":"themes/easyio-master/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1502401432000},{"_id":"themes/easyio-master/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1502401432000},{"_id":"themes/easyio-master/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1502401432000},{"_id":"themes/easyio-master/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1502401432000},{"_id":"themes/easyio-master/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1502401432000},{"_id":"themes/easyio-master/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1502401432000},{"_id":"themes/easyio-master/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1502401432000},{"_id":"themes/easyio-master/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502401432000},{"_id":"themes/easyio-master/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1502401432000},{"_id":"themes/easyio-master/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1502401432000},{"_id":"themes/easyio-master/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1502401432000},{"_id":"themes/easyio-master/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1502401432000},{"_id":"themes/easyio-master/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1502401432000},{"_id":"themes/easyio-master/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1502401432000},{"_id":"themes/easyio-master/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1502401432000},{"_id":"themes/easyio-master/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1502401432000},{"_id":"themes/easyio-master/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1502401432000},{"_id":"themes/easyio-master/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1502401432000},{"_id":"themes/easyio-master/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1502401432000},{"_id":"themes/easyio-master/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1502401432000},{"_id":"themes/easyio-master/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1502401432000},{"_id":"themes/easyio-master/source/images/avatar.gif","hash":"21d4dc8ef9570569c7b4b47f95efdbfa48f71a4e","modified":1506774062534},{"_id":"themes/easyio-master/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1502401432000},{"_id":"themes/easyio-master/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1502401432000},{"_id":"themes/easyio-master/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1502401432000},{"_id":"themes/easyio-master/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1502401432000},{"_id":"themes/easyio-master/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1502401432000},{"_id":"themes/easyio-master/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1502401432000},{"_id":"themes/easyio-master/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1502401432000},{"_id":"themes/easyio-master/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502401432000},{"_id":"themes/easyio-master/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1502401432000},{"_id":"themes/easyio-master/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502401432000},{"_id":"themes/easyio-master/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1502401432000},{"_id":"themes/easyio-master/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502401432000},{"_id":"themes/easyio-master/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1502401432000},{"_id":"themes/easyio-master/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1502401432000},{"_id":"themes/easyio-master/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1502401432000},{"_id":"themes/easyio-master/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1502401432000},{"_id":"themes/easyio-master/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1502401432000},{"_id":"themes/easyio-master/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1502401432000},{"_id":"themes/easyio-master/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1502401432000},{"_id":"themes/easyio-master/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1502401432000},{"_id":"themes/easyio-master/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1502401432000},{"_id":"themes/easyio-master/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502401432000},{"_id":"themes/easyio-master/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1502401432000},{"_id":"themes/easyio-master/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1502401432000},{"_id":"themes/easyio-master/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1502401432000},{"_id":"themes/easyio-master/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1502401432000},{"_id":"themes/easyio-master/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1502401432000},{"_id":"themes/easyio-master/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1502401432000},{"_id":"themes/easyio-master/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1502401432000},{"_id":"themes/easyio-master/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1502401432000},{"_id":"themes/easyio-master/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1502401432000},{"_id":"public/2017/09/30/hello-world/index.html","hash":"e0f8f666318fd9addbaad35cc145e12768679e9a","modified":1506774142528},{"_id":"public/archives/index.html","hash":"cef801a15e48165f533f2c4f57efc74078aeafc4","modified":1506774142528},{"_id":"public/archives/2017/index.html","hash":"172688841ad1b00b260d459d4bacc022bae61b9d","modified":1506774142528},{"_id":"public/archives/2017/09/index.html","hash":"62d0547e47b93068689865eced5819dae8b3f103","modified":1506774142528},{"_id":"public/2017/09/30/小根堆/index.html","hash":"a19c7cdd28c703a838b6cd0adf6321d1d4d21732","modified":1506774142528},{"_id":"public/2017/09/30/内存分配方式/index.html","hash":"fc81dab6b314f23d16ed5940eae0007ab23abe96","modified":1506774142528},{"_id":"public/index.html","hash":"7cbff89e42a86a6d020deb3565b6c47f31f84e69","modified":1506774142528},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1506763488321},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1506763488321},{"_id":"public/images/avatar.gif","hash":"21d4dc8ef9570569c7b4b47f95efdbfa48f71a4e","modified":1506774142528},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1506763488322},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1506763488322},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1506763488322},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1506763488322},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1506763488322},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506763488322},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1506763488322},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1506763488322},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506763488322},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1506763488322},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1506763488322},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1506763488322},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1506763488322},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506763488322},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506763488322},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506763488322},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506763488322},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506763488322},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506763488322},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1506763488322},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1506763488322},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1506763488322},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1506763488322},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1506763488322},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506763488322},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1506763488839},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1506763488851},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1506763488860},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1506763488860},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1506763488860},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1506763488860},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1506763488860},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1506763488860},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1506763488860},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1506763488860},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1506763488860},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1506763488860},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1506763488860},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1506763488860},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1506763488860},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1506763488860},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1506763488860},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1506763488860},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1506763488860},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1506763488860},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1506763488860},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1506763488861},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1506763488861},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1506763488861},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1506763488861},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1506763488861},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1506763488861},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1506763488861},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1506763488861},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1506763488861},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1506763488861},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1506763488861},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1506763488861},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1506763488861},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1506763488861},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1506763488861},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1506763488861},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1506763488861},{"_id":"public/css/main.css","hash":"29413448379257cb696f44d5853a8038283ab51a","modified":1506763488861},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1506763488861},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1506763488862},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1506763488862},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1506763488862},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1506763488862},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1506763488862},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1506763488862},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1506763488862},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1506763488862},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1506763488862},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1506763488862},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1506763488862},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1506763488862},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1506763488862},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1506763488862},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1506763488862},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1506763488862},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1506763488862},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1506763488862},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1506763488862},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1506763488862},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1506763488869}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-09-30T07:23:00.142Z","updated":"2017-09-30T07:23:00.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8742rvy0000pkwrihjsegdq","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"_content":"内存管理是C++最令人切齿痛恨的问题，也是C++最有争议的问题，C++高手从中获得了更好的性能，更大的自由，C++菜鸟的收获则是一遍一遍的检查代码和对C++的痛恨，但内存管理在C++中无处不在，内存泄漏几乎在每个C++程序中都会发生，因此要想成为C++高手，内存管理一关是必须要过的，除非放弃C++，转到Java或者.NET，他们的内存管理基本是自动的，当然你也放弃了自由和对内存的支配权，还放弃了C++超绝的性能。\n　　伟大的Bill Gates 曾经失言：\n\n> 　*640K ought to be enough for everybody* — Bill Gates 1981\n\n　　程序员们经常编写内存管理程序，往往提心吊胆。如果不想触雷，唯一的解决办法就是发现所有潜伏的地雷并且排除它们，躲是躲不了的。\n\n## 内存分配方式\n\n### 简介\n\n　　在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。\n　　**栈**：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。\n　　**堆**：就是那些由 `new`分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个`new`就要对应一个 `delete`。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。\n　　**自由存储区**：就是那些由`malloc`等分配的内存块，他和堆是十分相似的，不过它是用`free`来结束自己的生命的。\n　　**全局/静态存储区**：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。\n　　**常量存储区**：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。\n\n### 明确区分堆与栈\n\n　　堆与栈的区分问题，似乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。\n　　首先，我们举一个例子：\n\n　　这条短短的一句话就包含了堆与栈，看到`new`，我们首先就应该想到，我们分配了一块堆内存，那么指针`p`呢？他分配的是一块栈内存，所以这句话的意思就是：在栈内存中存放了一个指向一块堆内存的指针`p`。在程序会先确定在堆中分配内存的大小，然后调用`operator new`分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：\n\n```\n00401028 push 14h\n0040102A call operator new (00401060)\n0040102F add esp,4\n00401032 mov dword ptr [ebp-8],eax\n00401035 mov eax,dword ptr [ebp-8]\n00401038 mov dword ptr [ebp-4],eax\n\n```\n\n　　这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是`delete p`么？澳，错了，应该是`delete []p`，这是为了告诉编译器：我删除的是一个数组，编译器就会根据相应的`Cookie`信息去进行释放内存的工作。\n\n### 堆和栈究竟有什么区别\n\n　　好了，我们回到我们的主题：堆和栈究竟有什么区别？\n　　主要的区别由以下几点：\n　　(1). 管理方式不同\n　　(2). 空间大小不同\n　　(3). 能否产生碎片不同\n　　(4). 生长方向不同\n　　(5). 分配方式不同\n　　(6). 分配效率不同\n　　管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生`memory leak`。\n　　空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：\n　　打开工程，依次操作菜单如下`：Project->Setting->Link`，在`Category` 中选中`Output`，然后在`Reserve`中设定堆栈的最大值和`commit`。\n　　注意：reserve最小值为4Byte；`commit`是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。\n　　碎片问题：对于堆来讲，频繁的`new/delete`势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。\n　　生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。\n　　分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由`alloca`函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。\n　　分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。\n　　从这里我们可以看到，堆和栈相比，由于大量`new/delete`的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。\n　　虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。\n　　无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候`debug`可是相当困难的：）\n\n## 控制C++的内存分配\n\n　　在嵌入式系统中使用C++的一个常见问题是内存分配，即对`new` 和 `delete` 操作符的失控。\n　　具有讽刺意味的是，问题的根源却是C++对内存的管理非常的容易而且安全。具体地说，当一个对象被消除时，它的析构函数能够安全的释放所分配的内存。\n　　这当然是个好事情，但是这种使用的简单性使得程序员们过度使用`new` 和 `delete`，而不注意在嵌入式C++环境中的因果关系。并且，在嵌入式系统中，由于内存的限制，频繁的动态分配不定大小的内存会引起很大的问题以及堆破碎的风险。\n　　作为忠告，保守的使用内存分配是嵌入式环境中的第一原则。\n　　但当你必须要使用`new`和`delete`时，你不得不控制C++中的内存分配。你需要用一个全局的`new` 和`delete`来代替系统的内存分配符，并且一个类一个类的重载`new`和`delete`。\n　　一个防止堆破碎的通用方法是从不同固定大小的内存持中分配不同类型的对象。对每个类重载`new` 和`delete`就提供了这样的控制。\n\n### 重载全局的new和delete操作符\n\n　　可以很容易地重载new 和 delete 操作符，如下所示:\n\n　　这段代码可以代替默认的操作符来满足内存分配的请求。出于解释C++的目的，我们也可以直接调用`malloc()`和`free()`。\n　　也可以对单个类的`new` 和 `delete`操作符重载。这是你能灵活的控制对象的内存分配。\n\n　　所有`TestClass` 对象的内存分配都采用这段代码。更进一步，任何从`TestClass` 继承的类也都采用这一方式，除非它自己也重载了`new` 和 `delete` 操作符。通过重载`new` 和 `delete` 操作符的方法，你可以自由地采用不同的分配策略，从不同的内存池中分配不同的类对象。\n\n### 为单个的类重载new[]和delete[]\n\n　　必须小心对象数组的分配。你可能希望调用到被你重载过的`new` 和 `delete` 操作符，但并不如此。内存的请求被定向到全局的`new[]`和`delete[]` 操作符，而这些内存来自于系统堆。\n　　C++将对象数组的内存分配作为一个单独的操作，而不同于单个对象的内存分配。为了改变这种方式，你同样需要重载`new[]` 和 `delete[]`操作符。\n\n　　但是**注意**：对于多数C++的实现，`new[]`操作符中的个数参数是数组的大小加上额外的存储对象数目的一些字节。在你的内存分配机制重要考虑的这一点。你应该尽量避免分配对象数组，从而使你的内存分配策略简单。\n\n## 常见的内存错误及其对策\n\n　　发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。有时用户怒气冲冲地把你找来，程序却没有发生任何问题，你一走，错误又发作了。 常见的内存错误及其对策如下：\n\n- 内存分配未成功，却使用了它。编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为`NULL`。如果指针`p`是函数的参数，那么在函数的入口处用`assert(p!=NULL)`进行检查。如果是用`malloc`或`new`来申请内存，应该用`if(p==NULL)` 或`if(p!=NULL)`进行防错处理。\n- 内存分配虽然成功，但是尚未初始化就引用它。犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。\n- 内存分配成功并且已经初始化，但操作越过了内存的边界。例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在`for`循环语句中，循环次数很容易搞错，导致数组操作越界。\n- 忘记了释放内存，造成内存泄露。含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。动态内存的申请与释放必须配对，程序中`malloc`与`free`的使用次数一定要相同，否则肯定有错误（`new/delete`同理）。\n- 释放了内存却继续使用它。\n\n　　有三种情况：\n　　(1). 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。\n　　(2). 函数的`return`语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。\n　　(3). 使用`free`或`delete`释放了内存后，没有将指针设置为`NULL`。**导致产生“野指针”**。\n　　**那么如何避免产生野指针呢**？这里列出了5条规则，平常写程序时多注意一下，养成良好的习惯。\n\n> 规则1：用`malloc`或`new`申请内存之后，应该立即检查指针值是否为`NULL`。防止使用指针值为`NULL`的内存。\n> 规则2：不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。\n> 规则3：避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。\n> 规则4：动态内存的申请与释放必须配对，防止内存泄漏。\n> 规则5：用`free`或`delete`释放了内存之后，立即将指针设置为`NULL`，防止产生“野指针”。\n\n## 针与数组的对比\n\n　　C++/C程序中，指针和数组在不少地方可以相互替换着用，让人产生一种错觉，以为两者是等价的。\n　　数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。\n　　指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。\n　　下面以字符串为例比较指针与数组的特性。\n\n### 修改内容\n\n　　下面示例中，字符数组a的容量是6个字符，其内容为 hello。a的内容可以改变，如`a[0]= ‘X’`。指针p指向常量字符串“world”（位于静态存储区，内容为world），常量字符串的内容是不可以被修改的。从语法上看，编译器并不觉得语句`p[0]= ‘X’`有什么不妥，但是该语句企图修改常量字符串的内容而导致运行错误。\n\n### 内容复制与比较\n\n　　不能对数组名进行直接复制与比较。若想把数组a的内容复制给数组b，不能用语句 `b = a` ，否则将产生编译错误。应该用标准库函数`strcpy`进行复制。同理，比较b和a的内容是否相同，不能用`if(b==a)` 来判断，应该用标准库函数`strcmp`进行比较。\n　　语句 `p = a` 并不能把a的内容复制指针p，而是把a的地址赋给了p。要想复制a的内容，可以先用库函数`malloc`为p申请一块容量为`strlen(a)+1`个字符的内存，再用`strcpy`进行字符串复制。同理，语句`if(p==a)` 比较的不是内容而是地址，应该用库函数`strcmp`来比较。\n\n### 计算内存容量\n\n　　用运算符`sizeof`可以计算出数组的容量（字节数）。如下示例中，`sizeof(a)`的值是12（注意别忘了’’）。指针p指向a，但是`sizeof(p)`的值却是4。这是因为`sizeof(p)`得到的是一个指针变量的字节数，相当于`sizeof(char*)`，而不是p所指的内存容量。C++/C语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。\n\n　　注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。如下示例中，不论数组a的容量是多少，`sizeof(a)`始终等于`sizeof(char *)`。\n\n## 指针参数是如何传递内存的\n\n　　如果函数的参数是一个指针，不要指望用该指针去申请动态内存。如下示例中，Test函数的语句`GetMemory(str, 200)`并没有使`str`获得期望的内存，`str`依旧是`NULL`，为什么？\n\n　　毛病出在函数`GetMemory`中。编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 `_p`，编译器使`_p=p`。如果函数体内的程序修改了`_p`的内容，就导致参数p的内容作相应的修改。这就是指针可以用作输出参数的原因。在本例中，`_p`申请了新的内存，只是把 `_p`所指的内存地址改变了，但是p丝毫未变。所以函数`GetMemory`并不能输出任何东西。事实上，每执行一次`GetMemory`就会泄露一块内存，因为没有用`free`释放内存。\n　　如果非得要用指针参数去申请内存，那么应该改用“指向指针的指针”，见示例：\n\n　　由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单，见示例：\n\n　　用函数返回值来传递动态内存这种方法虽然好用，但是常常有人把`return`语句用错了。这里强调不要用`return`语句返回指向“栈内存”的指针，因为该内存在函数结束时自动消亡，见示例：\n\n　　用调试器逐步跟踪`Test4`，发现执行`str = GetString`语句后`str`不再是`NULL`指针，但是`str`的内容不是`“hello world”`而是垃圾。\n　　如果把上述示例改写成如下示例，会怎么样？\n\n　　函数`Test5`运行虽然不会出错，但是函数`GetString2`的设计概念却是错误的。因为`GetString2`内的`“hello world”`是常量字符串，位于静态存储区，它在程序生命期内恒定不变。无论什么时候调用`GetString2`，它返回的始终是同一个“只读”的内存块。\n\n## 杜绝“野指针”\n\n　　“野指针”不是`NULL`指针，是指向“垃圾”内存的指针。人们一般不会错用`NULL`指针，因为用`if`语句很容易判断。但是“野指针”是很危险的，`if`语句对它不起作用。 “野指针”的成因主要有三种：\n\n　　(1). 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。例如：\n\n　　(2). 指针p被free或者delete之后，没有置为NULL，让人误以为p是个合法的指针。\n\n　　(3). 指针操作超越了变量的作用域范围。这种情况让人防不胜防，示例程序如下：\n\n　　函数`Test`在执行语句`p->Func()`时，对象a已经消失，而p是指向a的，所以p就成了“野指针”。但奇怪的是我运行这个程序时居然没有出错，这可能与编译器有关。\n\n## 有了malloc/free为什么还要new/delete\n\n　　`malloc`与`free`是C++/C语言的标准库函数，`new/delete`是C++的运算符。它们都可用于申请动态内存和释放内存。\n　　对于非内部数据类型的对象而言，光用`maloc/free`无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于`malloc/free`是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于`malloc/free`。\n　　因此C++语言需要一个能完成动态内存分配和初始化工作的运算符`new`，以及一个能完成清理与释放内存工作的运算符`delet`e。注意`new/delete`不是库函数。我们先看一看`malloc/free`和`new/delete`如何实现对象的动态内存管理，见示例：\n\n　　类`Obj`的函数`Initialize`模拟了构造函数的功能，函数`Destroy`模拟了析构函数的功能。函数`UseMallocFree`中，由于`malloc/free`不能执行构造函数与析构函数，必须调用成员函数`Initialize`和`Destroy`来完成初始化与清除工作。函数`UseNewDelete`则简单得多。\n　　所以我们不要企图用`malloc/free`来完成动态对象的内存管理，应该用`new/delete`。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言`malloc/free`和`new/delete`是等价的。\n　　既然`new/delete`的功能完全覆盖了`malloc/free`，为什么C++不把`malloc/free`淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用`malloc/free`管理动态内存。\n　　如果用`free`释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用`delete`释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以`new/delete`必须配对使用，`malloc/free`也一样。\n\n## 内存耗尽怎么办\n\n　　如果在申请动态内存时找不到足够大的内存块，`malloc`和`new`将返回`NULL`指针，宣告内存申请失败。通常有三种方式处理“内存耗尽”问题。\n　　(1). 判断指针是否为`NULL`，如果是则马上用`return`语句终止本函数。例如：\n\n　　(2). 判断指针是否为`NULL`，如果是则马上用`exit(1)`终止整个程序的运行。例如：\n\n　　(3). 为`new`和`malloc`设置异常处理函数。例如Visual C++可以用`_set_new_hander`函数为`new`设置用户自己定义的异常处理函数，也可以让`malloc`享用与`new`相同的异常处理函数。详细内容请参考C++使用手册。\n　　上述 (1)、(2) 方式使用最普遍。如果一个函数内有多处需要申请动态内存，那么方式 (1) 就显得力不从心（释放内存很麻烦），应该用方式 (2) 来处理。\n　　很多人不忍心用`exit(1)`，问：“不编写出错处理程序，让操作系统自己解决行不行？”\n　　不行。如果发生“内存耗尽”这样的事情，一般说来应用程序已经无药可救。如果不用`exit(1)` 把坏程序杀死，它可能会害死操作系统。道理如同：如果不把歹徒击毙，歹徒在老死之前会犯下更多的罪。\n　　有一个很重要的现象要告诉大家。对于32位以上的应用程序而言，无论怎样使用`malloc与new`，几乎不可能导致“内存耗尽”。对于32位以上的应用程序，“内存耗尽”错误处理程序毫无用处。这下可把Unix和Windows程序员们乐坏了：反正错误处理程序不起作用，我就不写了，省了很多麻烦。\n　　必须强调：不加错误处理将导致程序的质量很差，千万不可因小失大。\n\n## malloc/free的使用要点\n\n　　函数`malloc`的原型如下：\n\n　　用`malloc`申请一块长度为`length`的整数类型的内存，程序如下：\n\n　　我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。\n　　`* malloc`返回值的类型是`void*`，所以在调用`malloc`时要显式地进行类型转换，将`void *`转换成所需要的指针类型。\n　　`* malloc`函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。我们通常记不住`int`, `float`等数据类型的变量的确切字节数。例如`int`变量在16位系统下是2个字节，在32位下是4个字节；而`float`变量在16位系统下是4个字节，在32位下也是4个字节。最好用以下程序作一次测试：\n\n　　在`malloc`的“()”中使用`sizeof`运算符是良好的风格，但要当心有时我们会昏了头，写出 `p = malloc(sizeof(p))`这样的程序来。\n　　函数`free`的原型如下：\n\n　　为什么`free`函数不象`mallo`c函数那样复杂呢？这是因为指针`p`的类型以及它所指的内存的容量事先都是知道的，语句`free(p)`能正确地释放内存。如果`p`是`NULL`指针，那么`free`对`p`无论操作多少次都不会出问题。如果`p`不是`NULL`指针，那么`free`对`p`连续操作两次就会导致程序运行错误。\n\n## new/delete的使用要点\n\n　　运算符`new`使用起来要比函数`malloc`简单得多，例如：\n\n　　这是因为`new`内置了`sizeof`、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，`new`在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么`new`的语句也可以有多种形式。例如：\n\n　　如果用`new`创建对象数组，那么只能使用对象的无参数构造函数。例如：\n\n　　不能写成：\n\n　　在用`delete`释放对象数组时，留意不要丢了符号‘[]’。例如：\n\n　　后者有可能引起程序崩溃和内存泄漏。","source":"_posts/内存分配方式.md","raw":"内存管理是C++最令人切齿痛恨的问题，也是C++最有争议的问题，C++高手从中获得了更好的性能，更大的自由，C++菜鸟的收获则是一遍一遍的检查代码和对C++的痛恨，但内存管理在C++中无处不在，内存泄漏几乎在每个C++程序中都会发生，因此要想成为C++高手，内存管理一关是必须要过的，除非放弃C++，转到Java或者.NET，他们的内存管理基本是自动的，当然你也放弃了自由和对内存的支配权，还放弃了C++超绝的性能。\n　　伟大的Bill Gates 曾经失言：\n\n> 　*640K ought to be enough for everybody* — Bill Gates 1981\n\n　　程序员们经常编写内存管理程序，往往提心吊胆。如果不想触雷，唯一的解决办法就是发现所有潜伏的地雷并且排除它们，躲是躲不了的。\n\n## 内存分配方式\n\n### 简介\n\n　　在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。\n　　**栈**：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。\n　　**堆**：就是那些由 `new`分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个`new`就要对应一个 `delete`。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。\n　　**自由存储区**：就是那些由`malloc`等分配的内存块，他和堆是十分相似的，不过它是用`free`来结束自己的生命的。\n　　**全局/静态存储区**：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。\n　　**常量存储区**：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。\n\n### 明确区分堆与栈\n\n　　堆与栈的区分问题，似乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。\n　　首先，我们举一个例子：\n\n　　这条短短的一句话就包含了堆与栈，看到`new`，我们首先就应该想到，我们分配了一块堆内存，那么指针`p`呢？他分配的是一块栈内存，所以这句话的意思就是：在栈内存中存放了一个指向一块堆内存的指针`p`。在程序会先确定在堆中分配内存的大小，然后调用`operator new`分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：\n\n```\n00401028 push 14h\n0040102A call operator new (00401060)\n0040102F add esp,4\n00401032 mov dword ptr [ebp-8],eax\n00401035 mov eax,dword ptr [ebp-8]\n00401038 mov dword ptr [ebp-4],eax\n\n```\n\n　　这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是`delete p`么？澳，错了，应该是`delete []p`，这是为了告诉编译器：我删除的是一个数组，编译器就会根据相应的`Cookie`信息去进行释放内存的工作。\n\n### 堆和栈究竟有什么区别\n\n　　好了，我们回到我们的主题：堆和栈究竟有什么区别？\n　　主要的区别由以下几点：\n　　(1). 管理方式不同\n　　(2). 空间大小不同\n　　(3). 能否产生碎片不同\n　　(4). 生长方向不同\n　　(5). 分配方式不同\n　　(6). 分配效率不同\n　　管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生`memory leak`。\n　　空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：\n　　打开工程，依次操作菜单如下`：Project->Setting->Link`，在`Category` 中选中`Output`，然后在`Reserve`中设定堆栈的最大值和`commit`。\n　　注意：reserve最小值为4Byte；`commit`是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。\n　　碎片问题：对于堆来讲，频繁的`new/delete`势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。\n　　生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。\n　　分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由`alloca`函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。\n　　分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。\n　　从这里我们可以看到，堆和栈相比，由于大量`new/delete`的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。\n　　虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。\n　　无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候`debug`可是相当困难的：）\n\n## 控制C++的内存分配\n\n　　在嵌入式系统中使用C++的一个常见问题是内存分配，即对`new` 和 `delete` 操作符的失控。\n　　具有讽刺意味的是，问题的根源却是C++对内存的管理非常的容易而且安全。具体地说，当一个对象被消除时，它的析构函数能够安全的释放所分配的内存。\n　　这当然是个好事情，但是这种使用的简单性使得程序员们过度使用`new` 和 `delete`，而不注意在嵌入式C++环境中的因果关系。并且，在嵌入式系统中，由于内存的限制，频繁的动态分配不定大小的内存会引起很大的问题以及堆破碎的风险。\n　　作为忠告，保守的使用内存分配是嵌入式环境中的第一原则。\n　　但当你必须要使用`new`和`delete`时，你不得不控制C++中的内存分配。你需要用一个全局的`new` 和`delete`来代替系统的内存分配符，并且一个类一个类的重载`new`和`delete`。\n　　一个防止堆破碎的通用方法是从不同固定大小的内存持中分配不同类型的对象。对每个类重载`new` 和`delete`就提供了这样的控制。\n\n### 重载全局的new和delete操作符\n\n　　可以很容易地重载new 和 delete 操作符，如下所示:\n\n　　这段代码可以代替默认的操作符来满足内存分配的请求。出于解释C++的目的，我们也可以直接调用`malloc()`和`free()`。\n　　也可以对单个类的`new` 和 `delete`操作符重载。这是你能灵活的控制对象的内存分配。\n\n　　所有`TestClass` 对象的内存分配都采用这段代码。更进一步，任何从`TestClass` 继承的类也都采用这一方式，除非它自己也重载了`new` 和 `delete` 操作符。通过重载`new` 和 `delete` 操作符的方法，你可以自由地采用不同的分配策略，从不同的内存池中分配不同的类对象。\n\n### 为单个的类重载new[]和delete[]\n\n　　必须小心对象数组的分配。你可能希望调用到被你重载过的`new` 和 `delete` 操作符，但并不如此。内存的请求被定向到全局的`new[]`和`delete[]` 操作符，而这些内存来自于系统堆。\n　　C++将对象数组的内存分配作为一个单独的操作，而不同于单个对象的内存分配。为了改变这种方式，你同样需要重载`new[]` 和 `delete[]`操作符。\n\n　　但是**注意**：对于多数C++的实现，`new[]`操作符中的个数参数是数组的大小加上额外的存储对象数目的一些字节。在你的内存分配机制重要考虑的这一点。你应该尽量避免分配对象数组，从而使你的内存分配策略简单。\n\n## 常见的内存错误及其对策\n\n　　发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。有时用户怒气冲冲地把你找来，程序却没有发生任何问题，你一走，错误又发作了。 常见的内存错误及其对策如下：\n\n- 内存分配未成功，却使用了它。编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为`NULL`。如果指针`p`是函数的参数，那么在函数的入口处用`assert(p!=NULL)`进行检查。如果是用`malloc`或`new`来申请内存，应该用`if(p==NULL)` 或`if(p!=NULL)`进行防错处理。\n- 内存分配虽然成功，但是尚未初始化就引用它。犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。\n- 内存分配成功并且已经初始化，但操作越过了内存的边界。例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在`for`循环语句中，循环次数很容易搞错，导致数组操作越界。\n- 忘记了释放内存，造成内存泄露。含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。动态内存的申请与释放必须配对，程序中`malloc`与`free`的使用次数一定要相同，否则肯定有错误（`new/delete`同理）。\n- 释放了内存却继续使用它。\n\n　　有三种情况：\n　　(1). 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。\n　　(2). 函数的`return`语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。\n　　(3). 使用`free`或`delete`释放了内存后，没有将指针设置为`NULL`。**导致产生“野指针”**。\n　　**那么如何避免产生野指针呢**？这里列出了5条规则，平常写程序时多注意一下，养成良好的习惯。\n\n> 规则1：用`malloc`或`new`申请内存之后，应该立即检查指针值是否为`NULL`。防止使用指针值为`NULL`的内存。\n> 规则2：不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。\n> 规则3：避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。\n> 规则4：动态内存的申请与释放必须配对，防止内存泄漏。\n> 规则5：用`free`或`delete`释放了内存之后，立即将指针设置为`NULL`，防止产生“野指针”。\n\n## 针与数组的对比\n\n　　C++/C程序中，指针和数组在不少地方可以相互替换着用，让人产生一种错觉，以为两者是等价的。\n　　数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。\n　　指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。\n　　下面以字符串为例比较指针与数组的特性。\n\n### 修改内容\n\n　　下面示例中，字符数组a的容量是6个字符，其内容为 hello。a的内容可以改变，如`a[0]= ‘X’`。指针p指向常量字符串“world”（位于静态存储区，内容为world），常量字符串的内容是不可以被修改的。从语法上看，编译器并不觉得语句`p[0]= ‘X’`有什么不妥，但是该语句企图修改常量字符串的内容而导致运行错误。\n\n### 内容复制与比较\n\n　　不能对数组名进行直接复制与比较。若想把数组a的内容复制给数组b，不能用语句 `b = a` ，否则将产生编译错误。应该用标准库函数`strcpy`进行复制。同理，比较b和a的内容是否相同，不能用`if(b==a)` 来判断，应该用标准库函数`strcmp`进行比较。\n　　语句 `p = a` 并不能把a的内容复制指针p，而是把a的地址赋给了p。要想复制a的内容，可以先用库函数`malloc`为p申请一块容量为`strlen(a)+1`个字符的内存，再用`strcpy`进行字符串复制。同理，语句`if(p==a)` 比较的不是内容而是地址，应该用库函数`strcmp`来比较。\n\n### 计算内存容量\n\n　　用运算符`sizeof`可以计算出数组的容量（字节数）。如下示例中，`sizeof(a)`的值是12（注意别忘了’’）。指针p指向a，但是`sizeof(p)`的值却是4。这是因为`sizeof(p)`得到的是一个指针变量的字节数，相当于`sizeof(char*)`，而不是p所指的内存容量。C++/C语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。\n\n　　注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。如下示例中，不论数组a的容量是多少，`sizeof(a)`始终等于`sizeof(char *)`。\n\n## 指针参数是如何传递内存的\n\n　　如果函数的参数是一个指针，不要指望用该指针去申请动态内存。如下示例中，Test函数的语句`GetMemory(str, 200)`并没有使`str`获得期望的内存，`str`依旧是`NULL`，为什么？\n\n　　毛病出在函数`GetMemory`中。编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 `_p`，编译器使`_p=p`。如果函数体内的程序修改了`_p`的内容，就导致参数p的内容作相应的修改。这就是指针可以用作输出参数的原因。在本例中，`_p`申请了新的内存，只是把 `_p`所指的内存地址改变了，但是p丝毫未变。所以函数`GetMemory`并不能输出任何东西。事实上，每执行一次`GetMemory`就会泄露一块内存，因为没有用`free`释放内存。\n　　如果非得要用指针参数去申请内存，那么应该改用“指向指针的指针”，见示例：\n\n　　由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单，见示例：\n\n　　用函数返回值来传递动态内存这种方法虽然好用，但是常常有人把`return`语句用错了。这里强调不要用`return`语句返回指向“栈内存”的指针，因为该内存在函数结束时自动消亡，见示例：\n\n　　用调试器逐步跟踪`Test4`，发现执行`str = GetString`语句后`str`不再是`NULL`指针，但是`str`的内容不是`“hello world”`而是垃圾。\n　　如果把上述示例改写成如下示例，会怎么样？\n\n　　函数`Test5`运行虽然不会出错，但是函数`GetString2`的设计概念却是错误的。因为`GetString2`内的`“hello world”`是常量字符串，位于静态存储区，它在程序生命期内恒定不变。无论什么时候调用`GetString2`，它返回的始终是同一个“只读”的内存块。\n\n## 杜绝“野指针”\n\n　　“野指针”不是`NULL`指针，是指向“垃圾”内存的指针。人们一般不会错用`NULL`指针，因为用`if`语句很容易判断。但是“野指针”是很危险的，`if`语句对它不起作用。 “野指针”的成因主要有三种：\n\n　　(1). 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。例如：\n\n　　(2). 指针p被free或者delete之后，没有置为NULL，让人误以为p是个合法的指针。\n\n　　(3). 指针操作超越了变量的作用域范围。这种情况让人防不胜防，示例程序如下：\n\n　　函数`Test`在执行语句`p->Func()`时，对象a已经消失，而p是指向a的，所以p就成了“野指针”。但奇怪的是我运行这个程序时居然没有出错，这可能与编译器有关。\n\n## 有了malloc/free为什么还要new/delete\n\n　　`malloc`与`free`是C++/C语言的标准库函数，`new/delete`是C++的运算符。它们都可用于申请动态内存和释放内存。\n　　对于非内部数据类型的对象而言，光用`maloc/free`无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于`malloc/free`是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于`malloc/free`。\n　　因此C++语言需要一个能完成动态内存分配和初始化工作的运算符`new`，以及一个能完成清理与释放内存工作的运算符`delet`e。注意`new/delete`不是库函数。我们先看一看`malloc/free`和`new/delete`如何实现对象的动态内存管理，见示例：\n\n　　类`Obj`的函数`Initialize`模拟了构造函数的功能，函数`Destroy`模拟了析构函数的功能。函数`UseMallocFree`中，由于`malloc/free`不能执行构造函数与析构函数，必须调用成员函数`Initialize`和`Destroy`来完成初始化与清除工作。函数`UseNewDelete`则简单得多。\n　　所以我们不要企图用`malloc/free`来完成动态对象的内存管理，应该用`new/delete`。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言`malloc/free`和`new/delete`是等价的。\n　　既然`new/delete`的功能完全覆盖了`malloc/free`，为什么C++不把`malloc/free`淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用`malloc/free`管理动态内存。\n　　如果用`free`释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用`delete`释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以`new/delete`必须配对使用，`malloc/free`也一样。\n\n## 内存耗尽怎么办\n\n　　如果在申请动态内存时找不到足够大的内存块，`malloc`和`new`将返回`NULL`指针，宣告内存申请失败。通常有三种方式处理“内存耗尽”问题。\n　　(1). 判断指针是否为`NULL`，如果是则马上用`return`语句终止本函数。例如：\n\n　　(2). 判断指针是否为`NULL`，如果是则马上用`exit(1)`终止整个程序的运行。例如：\n\n　　(3). 为`new`和`malloc`设置异常处理函数。例如Visual C++可以用`_set_new_hander`函数为`new`设置用户自己定义的异常处理函数，也可以让`malloc`享用与`new`相同的异常处理函数。详细内容请参考C++使用手册。\n　　上述 (1)、(2) 方式使用最普遍。如果一个函数内有多处需要申请动态内存，那么方式 (1) 就显得力不从心（释放内存很麻烦），应该用方式 (2) 来处理。\n　　很多人不忍心用`exit(1)`，问：“不编写出错处理程序，让操作系统自己解决行不行？”\n　　不行。如果发生“内存耗尽”这样的事情，一般说来应用程序已经无药可救。如果不用`exit(1)` 把坏程序杀死，它可能会害死操作系统。道理如同：如果不把歹徒击毙，歹徒在老死之前会犯下更多的罪。\n　　有一个很重要的现象要告诉大家。对于32位以上的应用程序而言，无论怎样使用`malloc与new`，几乎不可能导致“内存耗尽”。对于32位以上的应用程序，“内存耗尽”错误处理程序毫无用处。这下可把Unix和Windows程序员们乐坏了：反正错误处理程序不起作用，我就不写了，省了很多麻烦。\n　　必须强调：不加错误处理将导致程序的质量很差，千万不可因小失大。\n\n## malloc/free的使用要点\n\n　　函数`malloc`的原型如下：\n\n　　用`malloc`申请一块长度为`length`的整数类型的内存，程序如下：\n\n　　我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。\n　　`* malloc`返回值的类型是`void*`，所以在调用`malloc`时要显式地进行类型转换，将`void *`转换成所需要的指针类型。\n　　`* malloc`函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。我们通常记不住`int`, `float`等数据类型的变量的确切字节数。例如`int`变量在16位系统下是2个字节，在32位下是4个字节；而`float`变量在16位系统下是4个字节，在32位下也是4个字节。最好用以下程序作一次测试：\n\n　　在`malloc`的“()”中使用`sizeof`运算符是良好的风格，但要当心有时我们会昏了头，写出 `p = malloc(sizeof(p))`这样的程序来。\n　　函数`free`的原型如下：\n\n　　为什么`free`函数不象`mallo`c函数那样复杂呢？这是因为指针`p`的类型以及它所指的内存的容量事先都是知道的，语句`free(p)`能正确地释放内存。如果`p`是`NULL`指针，那么`free`对`p`无论操作多少次都不会出问题。如果`p`不是`NULL`指针，那么`free`对`p`连续操作两次就会导致程序运行错误。\n\n## new/delete的使用要点\n\n　　运算符`new`使用起来要比函数`malloc`简单得多，例如：\n\n　　这是因为`new`内置了`sizeof`、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，`new`在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么`new`的语句也可以有多种形式。例如：\n\n　　如果用`new`创建对象数组，那么只能使用对象的无参数构造函数。例如：\n\n　　不能写成：\n\n　　在用`delete`释放对象数组时，留意不要丢了符号‘[]’。例如：\n\n　　后者有可能引起程序崩溃和内存泄漏。","slug":"内存分配方式","published":1,"date":"2017-09-30T09:07:10.410Z","updated":"2017-09-27T09:09:07.716Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8742rw20001pkwr1bpejfod","content":"<p>内存管理是C++最令人切齿痛恨的问题，也是C++最有争议的问题，C++高手从中获得了更好的性能，更大的自由，C++菜鸟的收获则是一遍一遍的检查代码和对C++的痛恨，但内存管理在C++中无处不在，内存泄漏几乎在每个C++程序中都会发生，因此要想成为C++高手，内存管理一关是必须要过的，除非放弃C++，转到Java或者.NET，他们的内存管理基本是自动的，当然你也放弃了自由和对内存的支配权，还放弃了C++超绝的性能。<br>　　伟大的Bill Gates 曾经失言：</p>\n<blockquote>\n<p>　<em>640K ought to be enough for everybody</em> — Bill Gates 1981</p>\n</blockquote>\n<p>　　程序员们经常编写内存管理程序，往往提心吊胆。如果不想触雷，唯一的解决办法就是发现所有潜伏的地雷并且排除它们，躲是躲不了的。</p>\n<h2 id=\"内存分配方式\"><a href=\"#内存分配方式\" class=\"headerlink\" title=\"内存分配方式\"></a>内存分配方式</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>　　在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。<br>　　<strong>栈</strong>：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。<br>　　<strong>堆</strong>：就是那些由 <code>new</code>分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个<code>new</code>就要对应一个 <code>delete</code>。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。<br>　　<strong>自由存储区</strong>：就是那些由<code>malloc</code>等分配的内存块，他和堆是十分相似的，不过它是用<code>free</code>来结束自己的生命的。<br>　　<strong>全局/静态存储区</strong>：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。<br>　　<strong>常量存储区</strong>：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。</p>\n<h3 id=\"明确区分堆与栈\"><a href=\"#明确区分堆与栈\" class=\"headerlink\" title=\"明确区分堆与栈\"></a>明确区分堆与栈</h3><p>　　堆与栈的区分问题，似乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。<br>　　首先，我们举一个例子：</p>\n<p>　　这条短短的一句话就包含了堆与栈，看到<code>new</code>，我们首先就应该想到，我们分配了一块堆内存，那么指针<code>p</code>呢？他分配的是一块栈内存，所以这句话的意思就是：在栈内存中存放了一个指向一块堆内存的指针<code>p</code>。在程序会先确定在堆中分配内存的大小，然后调用<code>operator new</code>分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">00401028 push 14h</div><div class=\"line\">0040102A call operator new (00401060)</div><div class=\"line\">0040102F add esp,4</div><div class=\"line\">00401032 mov dword ptr [ebp-8],eax</div><div class=\"line\">00401035 mov eax,dword ptr [ebp-8]</div><div class=\"line\">00401038 mov dword ptr [ebp-4],eax</div></pre></td></tr></table></figure>\n<p>　　这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是<code>delete p</code>么？澳，错了，应该是<code>delete []p</code>，这是为了告诉编译器：我删除的是一个数组，编译器就会根据相应的<code>Cookie</code>信息去进行释放内存的工作。</p>\n<h3 id=\"堆和栈究竟有什么区别\"><a href=\"#堆和栈究竟有什么区别\" class=\"headerlink\" title=\"堆和栈究竟有什么区别\"></a>堆和栈究竟有什么区别</h3><p>　　好了，我们回到我们的主题：堆和栈究竟有什么区别？<br>　　主要的区别由以下几点：<br>　　(1). 管理方式不同<br>　　(2). 空间大小不同<br>　　(3). 能否产生碎片不同<br>　　(4). 生长方向不同<br>　　(5). 分配方式不同<br>　　(6). 分配效率不同<br>　　管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生<code>memory leak</code>。<br>　　空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：<br>　　打开工程，依次操作菜单如下<code>：Project-&gt;Setting-&gt;Link</code>，在<code>Category</code> 中选中<code>Output</code>，然后在<code>Reserve</code>中设定堆栈的最大值和<code>commit</code>。<br>　　注意：reserve最小值为4Byte；<code>commit</code>是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。<br>　　碎片问题：对于堆来讲，频繁的<code>new/delete</code>势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。<br>　　生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。<br>　　分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由<code>alloca</code>函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。<br>　　分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。<br>　　从这里我们可以看到，堆和栈相比，由于大量<code>new/delete</code>的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。<br>　　虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。<br>　　无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候<code>debug</code>可是相当困难的：）</p>\n<h2 id=\"控制C-的内存分配\"><a href=\"#控制C-的内存分配\" class=\"headerlink\" title=\"控制C++的内存分配\"></a>控制C++的内存分配</h2><p>　　在嵌入式系统中使用C++的一个常见问题是内存分配，即对<code>new</code> 和 <code>delete</code> 操作符的失控。<br>　　具有讽刺意味的是，问题的根源却是C++对内存的管理非常的容易而且安全。具体地说，当一个对象被消除时，它的析构函数能够安全的释放所分配的内存。<br>　　这当然是个好事情，但是这种使用的简单性使得程序员们过度使用<code>new</code> 和 <code>delete</code>，而不注意在嵌入式C++环境中的因果关系。并且，在嵌入式系统中，由于内存的限制，频繁的动态分配不定大小的内存会引起很大的问题以及堆破碎的风险。<br>　　作为忠告，保守的使用内存分配是嵌入式环境中的第一原则。<br>　　但当你必须要使用<code>new</code>和<code>delete</code>时，你不得不控制C++中的内存分配。你需要用一个全局的<code>new</code> 和<code>delete</code>来代替系统的内存分配符，并且一个类一个类的重载<code>new</code>和<code>delete</code>。<br>　　一个防止堆破碎的通用方法是从不同固定大小的内存持中分配不同类型的对象。对每个类重载<code>new</code> 和<code>delete</code>就提供了这样的控制。</p>\n<h3 id=\"重载全局的new和delete操作符\"><a href=\"#重载全局的new和delete操作符\" class=\"headerlink\" title=\"重载全局的new和delete操作符\"></a>重载全局的new和delete操作符</h3><p>　　可以很容易地重载new 和 delete 操作符，如下所示:</p>\n<p>　　这段代码可以代替默认的操作符来满足内存分配的请求。出于解释C++的目的，我们也可以直接调用<code>malloc()</code>和<code>free()</code>。<br>　　也可以对单个类的<code>new</code> 和 <code>delete</code>操作符重载。这是你能灵活的控制对象的内存分配。</p>\n<p>　　所有<code>TestClass</code> 对象的内存分配都采用这段代码。更进一步，任何从<code>TestClass</code> 继承的类也都采用这一方式，除非它自己也重载了<code>new</code> 和 <code>delete</code> 操作符。通过重载<code>new</code> 和 <code>delete</code> 操作符的方法，你可以自由地采用不同的分配策略，从不同的内存池中分配不同的类对象。</p>\n<h3 id=\"为单个的类重载new-和delete\"><a href=\"#为单个的类重载new-和delete\" class=\"headerlink\" title=\"为单个的类重载new[]和delete[]\"></a>为单个的类重载new[]和delete[]</h3><p>　　必须小心对象数组的分配。你可能希望调用到被你重载过的<code>new</code> 和 <code>delete</code> 操作符，但并不如此。内存的请求被定向到全局的<code>new[]</code>和<code>delete[]</code> 操作符，而这些内存来自于系统堆。<br>　　C++将对象数组的内存分配作为一个单独的操作，而不同于单个对象的内存分配。为了改变这种方式，你同样需要重载<code>new[]</code> 和 <code>delete[]</code>操作符。</p>\n<p>　　但是<strong>注意</strong>：对于多数C++的实现，<code>new[]</code>操作符中的个数参数是数组的大小加上额外的存储对象数目的一些字节。在你的内存分配机制重要考虑的这一点。你应该尽量避免分配对象数组，从而使你的内存分配策略简单。</p>\n<h2 id=\"常见的内存错误及其对策\"><a href=\"#常见的内存错误及其对策\" class=\"headerlink\" title=\"常见的内存错误及其对策\"></a>常见的内存错误及其对策</h2><p>　　发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。有时用户怒气冲冲地把你找来，程序却没有发生任何问题，你一走，错误又发作了。 常见的内存错误及其对策如下：</p>\n<ul>\n<li>内存分配未成功，却使用了它。编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为<code>NULL</code>。如果指针<code>p</code>是函数的参数，那么在函数的入口处用<code>assert(p!=NULL)</code>进行检查。如果是用<code>malloc</code>或<code>new</code>来申请内存，应该用<code>if(p==NULL)</code> 或<code>if(p!=NULL)</code>进行防错处理。</li>\n<li>内存分配虽然成功，但是尚未初始化就引用它。犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。</li>\n<li>内存分配成功并且已经初始化，但操作越过了内存的边界。例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在<code>for</code>循环语句中，循环次数很容易搞错，导致数组操作越界。</li>\n<li>忘记了释放内存，造成内存泄露。含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。动态内存的申请与释放必须配对，程序中<code>malloc</code>与<code>free</code>的使用次数一定要相同，否则肯定有错误（<code>new/delete</code>同理）。</li>\n<li>释放了内存却继续使用它。</li>\n</ul>\n<p>　　有三种情况：<br>　　(1). 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。<br>　　(2). 函数的<code>return</code>语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。<br>　　(3). 使用<code>free</code>或<code>delete</code>释放了内存后，没有将指针设置为<code>NULL</code>。<strong>导致产生“野指针”</strong>。<br>　　<strong>那么如何避免产生野指针呢</strong>？这里列出了5条规则，平常写程序时多注意一下，养成良好的习惯。</p>\n<blockquote>\n<p>规则1：用<code>malloc</code>或<code>new</code>申请内存之后，应该立即检查指针值是否为<code>NULL</code>。防止使用指针值为<code>NULL</code>的内存。<br>规则2：不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。<br>规则3：避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。<br>规则4：动态内存的申请与释放必须配对，防止内存泄漏。<br>规则5：用<code>free</code>或<code>delete</code>释放了内存之后，立即将指针设置为<code>NULL</code>，防止产生“野指针”。</p>\n</blockquote>\n<h2 id=\"针与数组的对比\"><a href=\"#针与数组的对比\" class=\"headerlink\" title=\"针与数组的对比\"></a>针与数组的对比</h2><p>　　C++/C程序中，指针和数组在不少地方可以相互替换着用，让人产生一种错觉，以为两者是等价的。<br>　　数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。<br>　　指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。<br>　　下面以字符串为例比较指针与数组的特性。</p>\n<h3 id=\"修改内容\"><a href=\"#修改内容\" class=\"headerlink\" title=\"修改内容\"></a>修改内容</h3><p>　　下面示例中，字符数组a的容量是6个字符，其内容为 hello。a的内容可以改变，如<code>a[0]= ‘X’</code>。指针p指向常量字符串“world”（位于静态存储区，内容为world），常量字符串的内容是不可以被修改的。从语法上看，编译器并不觉得语句<code>p[0]= ‘X’</code>有什么不妥，但是该语句企图修改常量字符串的内容而导致运行错误。</p>\n<h3 id=\"内容复制与比较\"><a href=\"#内容复制与比较\" class=\"headerlink\" title=\"内容复制与比较\"></a>内容复制与比较</h3><p>　　不能对数组名进行直接复制与比较。若想把数组a的内容复制给数组b，不能用语句 <code>b = a</code> ，否则将产生编译错误。应该用标准库函数<code>strcpy</code>进行复制。同理，比较b和a的内容是否相同，不能用<code>if(b==a)</code> 来判断，应该用标准库函数<code>strcmp</code>进行比较。<br>　　语句 <code>p = a</code> 并不能把a的内容复制指针p，而是把a的地址赋给了p。要想复制a的内容，可以先用库函数<code>malloc</code>为p申请一块容量为<code>strlen(a)+1</code>个字符的内存，再用<code>strcpy</code>进行字符串复制。同理，语句<code>if(p==a)</code> 比较的不是内容而是地址，应该用库函数<code>strcmp</code>来比较。</p>\n<h3 id=\"计算内存容量\"><a href=\"#计算内存容量\" class=\"headerlink\" title=\"计算内存容量\"></a>计算内存容量</h3><p>　　用运算符<code>sizeof</code>可以计算出数组的容量（字节数）。如下示例中，<code>sizeof(a)</code>的值是12（注意别忘了’’）。指针p指向a，但是<code>sizeof(p)</code>的值却是4。这是因为<code>sizeof(p)</code>得到的是一个指针变量的字节数，相当于<code>sizeof(char*)</code>，而不是p所指的内存容量。C++/C语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。</p>\n<p>　　注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。如下示例中，不论数组a的容量是多少，<code>sizeof(a)</code>始终等于<code>sizeof(char *)</code>。</p>\n<h2 id=\"指针参数是如何传递内存的\"><a href=\"#指针参数是如何传递内存的\" class=\"headerlink\" title=\"指针参数是如何传递内存的\"></a>指针参数是如何传递内存的</h2><p>　　如果函数的参数是一个指针，不要指望用该指针去申请动态内存。如下示例中，Test函数的语句<code>GetMemory(str, 200)</code>并没有使<code>str</code>获得期望的内存，<code>str</code>依旧是<code>NULL</code>，为什么？</p>\n<p>　　毛病出在函数<code>GetMemory</code>中。编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 <code>_p</code>，编译器使<code>_p=p</code>。如果函数体内的程序修改了<code>_p</code>的内容，就导致参数p的内容作相应的修改。这就是指针可以用作输出参数的原因。在本例中，<code>_p</code>申请了新的内存，只是把 <code>_p</code>所指的内存地址改变了，但是p丝毫未变。所以函数<code>GetMemory</code>并不能输出任何东西。事实上，每执行一次<code>GetMemory</code>就会泄露一块内存，因为没有用<code>free</code>释放内存。<br>　　如果非得要用指针参数去申请内存，那么应该改用“指向指针的指针”，见示例：</p>\n<p>　　由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单，见示例：</p>\n<p>　　用函数返回值来传递动态内存这种方法虽然好用，但是常常有人把<code>return</code>语句用错了。这里强调不要用<code>return</code>语句返回指向“栈内存”的指针，因为该内存在函数结束时自动消亡，见示例：</p>\n<p>　　用调试器逐步跟踪<code>Test4</code>，发现执行<code>str = GetString</code>语句后<code>str</code>不再是<code>NULL</code>指针，但是<code>str</code>的内容不是<code>“hello world”</code>而是垃圾。<br>　　如果把上述示例改写成如下示例，会怎么样？</p>\n<p>　　函数<code>Test5</code>运行虽然不会出错，但是函数<code>GetString2</code>的设计概念却是错误的。因为<code>GetString2</code>内的<code>“hello world”</code>是常量字符串，位于静态存储区，它在程序生命期内恒定不变。无论什么时候调用<code>GetString2</code>，它返回的始终是同一个“只读”的内存块。</p>\n<h2 id=\"杜绝“野指针”\"><a href=\"#杜绝“野指针”\" class=\"headerlink\" title=\"杜绝“野指针”\"></a>杜绝“野指针”</h2><p>　　“野指针”不是<code>NULL</code>指针，是指向“垃圾”内存的指针。人们一般不会错用<code>NULL</code>指针，因为用<code>if</code>语句很容易判断。但是“野指针”是很危险的，<code>if</code>语句对它不起作用。 “野指针”的成因主要有三种：</p>\n<p>　　(1). 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。例如：</p>\n<p>　　(2). 指针p被free或者delete之后，没有置为NULL，让人误以为p是个合法的指针。</p>\n<p>　　(3). 指针操作超越了变量的作用域范围。这种情况让人防不胜防，示例程序如下：</p>\n<p>　　函数<code>Test</code>在执行语句<code>p-&gt;Func()</code>时，对象a已经消失，而p是指向a的，所以p就成了“野指针”。但奇怪的是我运行这个程序时居然没有出错，这可能与编译器有关。</p>\n<h2 id=\"有了malloc-free为什么还要new-delete\"><a href=\"#有了malloc-free为什么还要new-delete\" class=\"headerlink\" title=\"有了malloc/free为什么还要new/delete\"></a>有了malloc/free为什么还要new/delete</h2><p>　　<code>malloc</code>与<code>free</code>是C++/C语言的标准库函数，<code>new/delete</code>是C++的运算符。它们都可用于申请动态内存和释放内存。<br>　　对于非内部数据类型的对象而言，光用<code>maloc/free</code>无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于<code>malloc/free</code>是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于<code>malloc/free</code>。<br>　　因此C++语言需要一个能完成动态内存分配和初始化工作的运算符<code>new</code>，以及一个能完成清理与释放内存工作的运算符<code>delet</code>e。注意<code>new/delete</code>不是库函数。我们先看一看<code>malloc/free</code>和<code>new/delete</code>如何实现对象的动态内存管理，见示例：</p>\n<p>　　类<code>Obj</code>的函数<code>Initialize</code>模拟了构造函数的功能，函数<code>Destroy</code>模拟了析构函数的功能。函数<code>UseMallocFree</code>中，由于<code>malloc/free</code>不能执行构造函数与析构函数，必须调用成员函数<code>Initialize</code>和<code>Destroy</code>来完成初始化与清除工作。函数<code>UseNewDelete</code>则简单得多。<br>　　所以我们不要企图用<code>malloc/free</code>来完成动态对象的内存管理，应该用<code>new/delete</code>。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言<code>malloc/free</code>和<code>new/delete</code>是等价的。<br>　　既然<code>new/delete</code>的功能完全覆盖了<code>malloc/free</code>，为什么C++不把<code>malloc/free</code>淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用<code>malloc/free</code>管理动态内存。<br>　　如果用<code>free</code>释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用<code>delete</code>释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以<code>new/delete</code>必须配对使用，<code>malloc/free</code>也一样。</p>\n<h2 id=\"内存耗尽怎么办\"><a href=\"#内存耗尽怎么办\" class=\"headerlink\" title=\"内存耗尽怎么办\"></a>内存耗尽怎么办</h2><p>　　如果在申请动态内存时找不到足够大的内存块，<code>malloc</code>和<code>new</code>将返回<code>NULL</code>指针，宣告内存申请失败。通常有三种方式处理“内存耗尽”问题。<br>　　(1). 判断指针是否为<code>NULL</code>，如果是则马上用<code>return</code>语句终止本函数。例如：</p>\n<p>　　(2). 判断指针是否为<code>NULL</code>，如果是则马上用<code>exit(1)</code>终止整个程序的运行。例如：</p>\n<p>　　(3). 为<code>new</code>和<code>malloc</code>设置异常处理函数。例如Visual C++可以用<code>_set_new_hander</code>函数为<code>new</code>设置用户自己定义的异常处理函数，也可以让<code>malloc</code>享用与<code>new</code>相同的异常处理函数。详细内容请参考C++使用手册。<br>　　上述 (1)、(2) 方式使用最普遍。如果一个函数内有多处需要申请动态内存，那么方式 (1) 就显得力不从心（释放内存很麻烦），应该用方式 (2) 来处理。<br>　　很多人不忍心用<code>exit(1)</code>，问：“不编写出错处理程序，让操作系统自己解决行不行？”<br>　　不行。如果发生“内存耗尽”这样的事情，一般说来应用程序已经无药可救。如果不用<code>exit(1)</code> 把坏程序杀死，它可能会害死操作系统。道理如同：如果不把歹徒击毙，歹徒在老死之前会犯下更多的罪。<br>　　有一个很重要的现象要告诉大家。对于32位以上的应用程序而言，无论怎样使用<code>malloc与new</code>，几乎不可能导致“内存耗尽”。对于32位以上的应用程序，“内存耗尽”错误处理程序毫无用处。这下可把Unix和Windows程序员们乐坏了：反正错误处理程序不起作用，我就不写了，省了很多麻烦。<br>　　必须强调：不加错误处理将导致程序的质量很差，千万不可因小失大。</p>\n<h2 id=\"malloc-free的使用要点\"><a href=\"#malloc-free的使用要点\" class=\"headerlink\" title=\"malloc/free的使用要点\"></a>malloc/free的使用要点</h2><p>　　函数<code>malloc</code>的原型如下：</p>\n<p>　　用<code>malloc</code>申请一块长度为<code>length</code>的整数类型的内存，程序如下：</p>\n<p>　　我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。<br>　　<code>* malloc</code>返回值的类型是<code>void*</code>，所以在调用<code>malloc</code>时要显式地进行类型转换，将<code>void *</code>转换成所需要的指针类型。<br>　　<code>* malloc</code>函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。我们通常记不住<code>int</code>, <code>float</code>等数据类型的变量的确切字节数。例如<code>int</code>变量在16位系统下是2个字节，在32位下是4个字节；而<code>float</code>变量在16位系统下是4个字节，在32位下也是4个字节。最好用以下程序作一次测试：</p>\n<p>　　在<code>malloc</code>的“()”中使用<code>sizeof</code>运算符是良好的风格，但要当心有时我们会昏了头，写出 <code>p = malloc(sizeof(p))</code>这样的程序来。<br>　　函数<code>free</code>的原型如下：</p>\n<p>　　为什么<code>free</code>函数不象<code>mallo</code>c函数那样复杂呢？这是因为指针<code>p</code>的类型以及它所指的内存的容量事先都是知道的，语句<code>free(p)</code>能正确地释放内存。如果<code>p</code>是<code>NULL</code>指针，那么<code>free</code>对<code>p</code>无论操作多少次都不会出问题。如果<code>p</code>不是<code>NULL</code>指针，那么<code>free</code>对<code>p</code>连续操作两次就会导致程序运行错误。</p>\n<h2 id=\"new-delete的使用要点\"><a href=\"#new-delete的使用要点\" class=\"headerlink\" title=\"new/delete的使用要点\"></a>new/delete的使用要点</h2><p>　　运算符<code>new</code>使用起来要比函数<code>malloc</code>简单得多，例如：</p>\n<p>　　这是因为<code>new</code>内置了<code>sizeof</code>、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，<code>new</code>在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么<code>new</code>的语句也可以有多种形式。例如：</p>\n<p>　　如果用<code>new</code>创建对象数组，那么只能使用对象的无参数构造函数。例如：</p>\n<p>　　不能写成：</p>\n<p>　　在用<code>delete</code>释放对象数组时，留意不要丢了符号‘[]’。例如：</p>\n<p>　　后者有可能引起程序崩溃和内存泄漏。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>内存管理是C++最令人切齿痛恨的问题，也是C++最有争议的问题，C++高手从中获得了更好的性能，更大的自由，C++菜鸟的收获则是一遍一遍的检查代码和对C++的痛恨，但内存管理在C++中无处不在，内存泄漏几乎在每个C++程序中都会发生，因此要想成为C++高手，内存管理一关是必须要过的，除非放弃C++，转到Java或者.NET，他们的内存管理基本是自动的，当然你也放弃了自由和对内存的支配权，还放弃了C++超绝的性能。<br>　　伟大的Bill Gates 曾经失言：</p>\n<blockquote>\n<p>　<em>640K ought to be enough for everybody</em> — Bill Gates 1981</p>\n</blockquote>\n<p>　　程序员们经常编写内存管理程序，往往提心吊胆。如果不想触雷，唯一的解决办法就是发现所有潜伏的地雷并且排除它们，躲是躲不了的。</p>\n<h2 id=\"内存分配方式\"><a href=\"#内存分配方式\" class=\"headerlink\" title=\"内存分配方式\"></a>内存分配方式</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>　　在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。<br>　　<strong>栈</strong>：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。<br>　　<strong>堆</strong>：就是那些由 <code>new</code>分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个<code>new</code>就要对应一个 <code>delete</code>。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。<br>　　<strong>自由存储区</strong>：就是那些由<code>malloc</code>等分配的内存块，他和堆是十分相似的，不过它是用<code>free</code>来结束自己的生命的。<br>　　<strong>全局/静态存储区</strong>：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。<br>　　<strong>常量存储区</strong>：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。</p>\n<h3 id=\"明确区分堆与栈\"><a href=\"#明确区分堆与栈\" class=\"headerlink\" title=\"明确区分堆与栈\"></a>明确区分堆与栈</h3><p>　　堆与栈的区分问题，似乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。<br>　　首先，我们举一个例子：</p>\n<p>　　这条短短的一句话就包含了堆与栈，看到<code>new</code>，我们首先就应该想到，我们分配了一块堆内存，那么指针<code>p</code>呢？他分配的是一块栈内存，所以这句话的意思就是：在栈内存中存放了一个指向一块堆内存的指针<code>p</code>。在程序会先确定在堆中分配内存的大小，然后调用<code>operator new</code>分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">00401028 push 14h</div><div class=\"line\">0040102A call operator new (00401060)</div><div class=\"line\">0040102F add esp,4</div><div class=\"line\">00401032 mov dword ptr [ebp-8],eax</div><div class=\"line\">00401035 mov eax,dword ptr [ebp-8]</div><div class=\"line\">00401038 mov dword ptr [ebp-4],eax</div></pre></td></tr></table></figure>\n<p>　　这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是<code>delete p</code>么？澳，错了，应该是<code>delete []p</code>，这是为了告诉编译器：我删除的是一个数组，编译器就会根据相应的<code>Cookie</code>信息去进行释放内存的工作。</p>\n<h3 id=\"堆和栈究竟有什么区别\"><a href=\"#堆和栈究竟有什么区别\" class=\"headerlink\" title=\"堆和栈究竟有什么区别\"></a>堆和栈究竟有什么区别</h3><p>　　好了，我们回到我们的主题：堆和栈究竟有什么区别？<br>　　主要的区别由以下几点：<br>　　(1). 管理方式不同<br>　　(2). 空间大小不同<br>　　(3). 能否产生碎片不同<br>　　(4). 生长方向不同<br>　　(5). 分配方式不同<br>　　(6). 分配效率不同<br>　　管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生<code>memory leak</code>。<br>　　空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：<br>　　打开工程，依次操作菜单如下<code>：Project-&gt;Setting-&gt;Link</code>，在<code>Category</code> 中选中<code>Output</code>，然后在<code>Reserve</code>中设定堆栈的最大值和<code>commit</code>。<br>　　注意：reserve最小值为4Byte；<code>commit</code>是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。<br>　　碎片问题：对于堆来讲，频繁的<code>new/delete</code>势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。<br>　　生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。<br>　　分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由<code>alloca</code>函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。<br>　　分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。<br>　　从这里我们可以看到，堆和栈相比，由于大量<code>new/delete</code>的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。<br>　　虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。<br>　　无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候<code>debug</code>可是相当困难的：）</p>\n<h2 id=\"控制C-的内存分配\"><a href=\"#控制C-的内存分配\" class=\"headerlink\" title=\"控制C++的内存分配\"></a>控制C++的内存分配</h2><p>　　在嵌入式系统中使用C++的一个常见问题是内存分配，即对<code>new</code> 和 <code>delete</code> 操作符的失控。<br>　　具有讽刺意味的是，问题的根源却是C++对内存的管理非常的容易而且安全。具体地说，当一个对象被消除时，它的析构函数能够安全的释放所分配的内存。<br>　　这当然是个好事情，但是这种使用的简单性使得程序员们过度使用<code>new</code> 和 <code>delete</code>，而不注意在嵌入式C++环境中的因果关系。并且，在嵌入式系统中，由于内存的限制，频繁的动态分配不定大小的内存会引起很大的问题以及堆破碎的风险。<br>　　作为忠告，保守的使用内存分配是嵌入式环境中的第一原则。<br>　　但当你必须要使用<code>new</code>和<code>delete</code>时，你不得不控制C++中的内存分配。你需要用一个全局的<code>new</code> 和<code>delete</code>来代替系统的内存分配符，并且一个类一个类的重载<code>new</code>和<code>delete</code>。<br>　　一个防止堆破碎的通用方法是从不同固定大小的内存持中分配不同类型的对象。对每个类重载<code>new</code> 和<code>delete</code>就提供了这样的控制。</p>\n<h3 id=\"重载全局的new和delete操作符\"><a href=\"#重载全局的new和delete操作符\" class=\"headerlink\" title=\"重载全局的new和delete操作符\"></a>重载全局的new和delete操作符</h3><p>　　可以很容易地重载new 和 delete 操作符，如下所示:</p>\n<p>　　这段代码可以代替默认的操作符来满足内存分配的请求。出于解释C++的目的，我们也可以直接调用<code>malloc()</code>和<code>free()</code>。<br>　　也可以对单个类的<code>new</code> 和 <code>delete</code>操作符重载。这是你能灵活的控制对象的内存分配。</p>\n<p>　　所有<code>TestClass</code> 对象的内存分配都采用这段代码。更进一步，任何从<code>TestClass</code> 继承的类也都采用这一方式，除非它自己也重载了<code>new</code> 和 <code>delete</code> 操作符。通过重载<code>new</code> 和 <code>delete</code> 操作符的方法，你可以自由地采用不同的分配策略，从不同的内存池中分配不同的类对象。</p>\n<h3 id=\"为单个的类重载new-和delete\"><a href=\"#为单个的类重载new-和delete\" class=\"headerlink\" title=\"为单个的类重载new[]和delete[]\"></a>为单个的类重载new[]和delete[]</h3><p>　　必须小心对象数组的分配。你可能希望调用到被你重载过的<code>new</code> 和 <code>delete</code> 操作符，但并不如此。内存的请求被定向到全局的<code>new[]</code>和<code>delete[]</code> 操作符，而这些内存来自于系统堆。<br>　　C++将对象数组的内存分配作为一个单独的操作，而不同于单个对象的内存分配。为了改变这种方式，你同样需要重载<code>new[]</code> 和 <code>delete[]</code>操作符。</p>\n<p>　　但是<strong>注意</strong>：对于多数C++的实现，<code>new[]</code>操作符中的个数参数是数组的大小加上额外的存储对象数目的一些字节。在你的内存分配机制重要考虑的这一点。你应该尽量避免分配对象数组，从而使你的内存分配策略简单。</p>\n<h2 id=\"常见的内存错误及其对策\"><a href=\"#常见的内存错误及其对策\" class=\"headerlink\" title=\"常见的内存错误及其对策\"></a>常见的内存错误及其对策</h2><p>　　发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。有时用户怒气冲冲地把你找来，程序却没有发生任何问题，你一走，错误又发作了。 常见的内存错误及其对策如下：</p>\n<ul>\n<li>内存分配未成功，却使用了它。编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为<code>NULL</code>。如果指针<code>p</code>是函数的参数，那么在函数的入口处用<code>assert(p!=NULL)</code>进行检查。如果是用<code>malloc</code>或<code>new</code>来申请内存，应该用<code>if(p==NULL)</code> 或<code>if(p!=NULL)</code>进行防错处理。</li>\n<li>内存分配虽然成功，但是尚未初始化就引用它。犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。</li>\n<li>内存分配成功并且已经初始化，但操作越过了内存的边界。例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在<code>for</code>循环语句中，循环次数很容易搞错，导致数组操作越界。</li>\n<li>忘记了释放内存，造成内存泄露。含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。动态内存的申请与释放必须配对，程序中<code>malloc</code>与<code>free</code>的使用次数一定要相同，否则肯定有错误（<code>new/delete</code>同理）。</li>\n<li>释放了内存却继续使用它。</li>\n</ul>\n<p>　　有三种情况：<br>　　(1). 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。<br>　　(2). 函数的<code>return</code>语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。<br>　　(3). 使用<code>free</code>或<code>delete</code>释放了内存后，没有将指针设置为<code>NULL</code>。<strong>导致产生“野指针”</strong>。<br>　　<strong>那么如何避免产生野指针呢</strong>？这里列出了5条规则，平常写程序时多注意一下，养成良好的习惯。</p>\n<blockquote>\n<p>规则1：用<code>malloc</code>或<code>new</code>申请内存之后，应该立即检查指针值是否为<code>NULL</code>。防止使用指针值为<code>NULL</code>的内存。<br>规则2：不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。<br>规则3：避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。<br>规则4：动态内存的申请与释放必须配对，防止内存泄漏。<br>规则5：用<code>free</code>或<code>delete</code>释放了内存之后，立即将指针设置为<code>NULL</code>，防止产生“野指针”。</p>\n</blockquote>\n<h2 id=\"针与数组的对比\"><a href=\"#针与数组的对比\" class=\"headerlink\" title=\"针与数组的对比\"></a>针与数组的对比</h2><p>　　C++/C程序中，指针和数组在不少地方可以相互替换着用，让人产生一种错觉，以为两者是等价的。<br>　　数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。<br>　　指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。<br>　　下面以字符串为例比较指针与数组的特性。</p>\n<h3 id=\"修改内容\"><a href=\"#修改内容\" class=\"headerlink\" title=\"修改内容\"></a>修改内容</h3><p>　　下面示例中，字符数组a的容量是6个字符，其内容为 hello。a的内容可以改变，如<code>a[0]= ‘X’</code>。指针p指向常量字符串“world”（位于静态存储区，内容为world），常量字符串的内容是不可以被修改的。从语法上看，编译器并不觉得语句<code>p[0]= ‘X’</code>有什么不妥，但是该语句企图修改常量字符串的内容而导致运行错误。</p>\n<h3 id=\"内容复制与比较\"><a href=\"#内容复制与比较\" class=\"headerlink\" title=\"内容复制与比较\"></a>内容复制与比较</h3><p>　　不能对数组名进行直接复制与比较。若想把数组a的内容复制给数组b，不能用语句 <code>b = a</code> ，否则将产生编译错误。应该用标准库函数<code>strcpy</code>进行复制。同理，比较b和a的内容是否相同，不能用<code>if(b==a)</code> 来判断，应该用标准库函数<code>strcmp</code>进行比较。<br>　　语句 <code>p = a</code> 并不能把a的内容复制指针p，而是把a的地址赋给了p。要想复制a的内容，可以先用库函数<code>malloc</code>为p申请一块容量为<code>strlen(a)+1</code>个字符的内存，再用<code>strcpy</code>进行字符串复制。同理，语句<code>if(p==a)</code> 比较的不是内容而是地址，应该用库函数<code>strcmp</code>来比较。</p>\n<h3 id=\"计算内存容量\"><a href=\"#计算内存容量\" class=\"headerlink\" title=\"计算内存容量\"></a>计算内存容量</h3><p>　　用运算符<code>sizeof</code>可以计算出数组的容量（字节数）。如下示例中，<code>sizeof(a)</code>的值是12（注意别忘了’’）。指针p指向a，但是<code>sizeof(p)</code>的值却是4。这是因为<code>sizeof(p)</code>得到的是一个指针变量的字节数，相当于<code>sizeof(char*)</code>，而不是p所指的内存容量。C++/C语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。</p>\n<p>　　注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。如下示例中，不论数组a的容量是多少，<code>sizeof(a)</code>始终等于<code>sizeof(char *)</code>。</p>\n<h2 id=\"指针参数是如何传递内存的\"><a href=\"#指针参数是如何传递内存的\" class=\"headerlink\" title=\"指针参数是如何传递内存的\"></a>指针参数是如何传递内存的</h2><p>　　如果函数的参数是一个指针，不要指望用该指针去申请动态内存。如下示例中，Test函数的语句<code>GetMemory(str, 200)</code>并没有使<code>str</code>获得期望的内存，<code>str</code>依旧是<code>NULL</code>，为什么？</p>\n<p>　　毛病出在函数<code>GetMemory</code>中。编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 <code>_p</code>，编译器使<code>_p=p</code>。如果函数体内的程序修改了<code>_p</code>的内容，就导致参数p的内容作相应的修改。这就是指针可以用作输出参数的原因。在本例中，<code>_p</code>申请了新的内存，只是把 <code>_p</code>所指的内存地址改变了，但是p丝毫未变。所以函数<code>GetMemory</code>并不能输出任何东西。事实上，每执行一次<code>GetMemory</code>就会泄露一块内存，因为没有用<code>free</code>释放内存。<br>　　如果非得要用指针参数去申请内存，那么应该改用“指向指针的指针”，见示例：</p>\n<p>　　由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单，见示例：</p>\n<p>　　用函数返回值来传递动态内存这种方法虽然好用，但是常常有人把<code>return</code>语句用错了。这里强调不要用<code>return</code>语句返回指向“栈内存”的指针，因为该内存在函数结束时自动消亡，见示例：</p>\n<p>　　用调试器逐步跟踪<code>Test4</code>，发现执行<code>str = GetString</code>语句后<code>str</code>不再是<code>NULL</code>指针，但是<code>str</code>的内容不是<code>“hello world”</code>而是垃圾。<br>　　如果把上述示例改写成如下示例，会怎么样？</p>\n<p>　　函数<code>Test5</code>运行虽然不会出错，但是函数<code>GetString2</code>的设计概念却是错误的。因为<code>GetString2</code>内的<code>“hello world”</code>是常量字符串，位于静态存储区，它在程序生命期内恒定不变。无论什么时候调用<code>GetString2</code>，它返回的始终是同一个“只读”的内存块。</p>\n<h2 id=\"杜绝“野指针”\"><a href=\"#杜绝“野指针”\" class=\"headerlink\" title=\"杜绝“野指针”\"></a>杜绝“野指针”</h2><p>　　“野指针”不是<code>NULL</code>指针，是指向“垃圾”内存的指针。人们一般不会错用<code>NULL</code>指针，因为用<code>if</code>语句很容易判断。但是“野指针”是很危险的，<code>if</code>语句对它不起作用。 “野指针”的成因主要有三种：</p>\n<p>　　(1). 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。例如：</p>\n<p>　　(2). 指针p被free或者delete之后，没有置为NULL，让人误以为p是个合法的指针。</p>\n<p>　　(3). 指针操作超越了变量的作用域范围。这种情况让人防不胜防，示例程序如下：</p>\n<p>　　函数<code>Test</code>在执行语句<code>p-&gt;Func()</code>时，对象a已经消失，而p是指向a的，所以p就成了“野指针”。但奇怪的是我运行这个程序时居然没有出错，这可能与编译器有关。</p>\n<h2 id=\"有了malloc-free为什么还要new-delete\"><a href=\"#有了malloc-free为什么还要new-delete\" class=\"headerlink\" title=\"有了malloc/free为什么还要new/delete\"></a>有了malloc/free为什么还要new/delete</h2><p>　　<code>malloc</code>与<code>free</code>是C++/C语言的标准库函数，<code>new/delete</code>是C++的运算符。它们都可用于申请动态内存和释放内存。<br>　　对于非内部数据类型的对象而言，光用<code>maloc/free</code>无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于<code>malloc/free</code>是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于<code>malloc/free</code>。<br>　　因此C++语言需要一个能完成动态内存分配和初始化工作的运算符<code>new</code>，以及一个能完成清理与释放内存工作的运算符<code>delet</code>e。注意<code>new/delete</code>不是库函数。我们先看一看<code>malloc/free</code>和<code>new/delete</code>如何实现对象的动态内存管理，见示例：</p>\n<p>　　类<code>Obj</code>的函数<code>Initialize</code>模拟了构造函数的功能，函数<code>Destroy</code>模拟了析构函数的功能。函数<code>UseMallocFree</code>中，由于<code>malloc/free</code>不能执行构造函数与析构函数，必须调用成员函数<code>Initialize</code>和<code>Destroy</code>来完成初始化与清除工作。函数<code>UseNewDelete</code>则简单得多。<br>　　所以我们不要企图用<code>malloc/free</code>来完成动态对象的内存管理，应该用<code>new/delete</code>。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言<code>malloc/free</code>和<code>new/delete</code>是等价的。<br>　　既然<code>new/delete</code>的功能完全覆盖了<code>malloc/free</code>，为什么C++不把<code>malloc/free</code>淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用<code>malloc/free</code>管理动态内存。<br>　　如果用<code>free</code>释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用<code>delete</code>释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以<code>new/delete</code>必须配对使用，<code>malloc/free</code>也一样。</p>\n<h2 id=\"内存耗尽怎么办\"><a href=\"#内存耗尽怎么办\" class=\"headerlink\" title=\"内存耗尽怎么办\"></a>内存耗尽怎么办</h2><p>　　如果在申请动态内存时找不到足够大的内存块，<code>malloc</code>和<code>new</code>将返回<code>NULL</code>指针，宣告内存申请失败。通常有三种方式处理“内存耗尽”问题。<br>　　(1). 判断指针是否为<code>NULL</code>，如果是则马上用<code>return</code>语句终止本函数。例如：</p>\n<p>　　(2). 判断指针是否为<code>NULL</code>，如果是则马上用<code>exit(1)</code>终止整个程序的运行。例如：</p>\n<p>　　(3). 为<code>new</code>和<code>malloc</code>设置异常处理函数。例如Visual C++可以用<code>_set_new_hander</code>函数为<code>new</code>设置用户自己定义的异常处理函数，也可以让<code>malloc</code>享用与<code>new</code>相同的异常处理函数。详细内容请参考C++使用手册。<br>　　上述 (1)、(2) 方式使用最普遍。如果一个函数内有多处需要申请动态内存，那么方式 (1) 就显得力不从心（释放内存很麻烦），应该用方式 (2) 来处理。<br>　　很多人不忍心用<code>exit(1)</code>，问：“不编写出错处理程序，让操作系统自己解决行不行？”<br>　　不行。如果发生“内存耗尽”这样的事情，一般说来应用程序已经无药可救。如果不用<code>exit(1)</code> 把坏程序杀死，它可能会害死操作系统。道理如同：如果不把歹徒击毙，歹徒在老死之前会犯下更多的罪。<br>　　有一个很重要的现象要告诉大家。对于32位以上的应用程序而言，无论怎样使用<code>malloc与new</code>，几乎不可能导致“内存耗尽”。对于32位以上的应用程序，“内存耗尽”错误处理程序毫无用处。这下可把Unix和Windows程序员们乐坏了：反正错误处理程序不起作用，我就不写了，省了很多麻烦。<br>　　必须强调：不加错误处理将导致程序的质量很差，千万不可因小失大。</p>\n<h2 id=\"malloc-free的使用要点\"><a href=\"#malloc-free的使用要点\" class=\"headerlink\" title=\"malloc/free的使用要点\"></a>malloc/free的使用要点</h2><p>　　函数<code>malloc</code>的原型如下：</p>\n<p>　　用<code>malloc</code>申请一块长度为<code>length</code>的整数类型的内存，程序如下：</p>\n<p>　　我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。<br>　　<code>* malloc</code>返回值的类型是<code>void*</code>，所以在调用<code>malloc</code>时要显式地进行类型转换，将<code>void *</code>转换成所需要的指针类型。<br>　　<code>* malloc</code>函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。我们通常记不住<code>int</code>, <code>float</code>等数据类型的变量的确切字节数。例如<code>int</code>变量在16位系统下是2个字节，在32位下是4个字节；而<code>float</code>变量在16位系统下是4个字节，在32位下也是4个字节。最好用以下程序作一次测试：</p>\n<p>　　在<code>malloc</code>的“()”中使用<code>sizeof</code>运算符是良好的风格，但要当心有时我们会昏了头，写出 <code>p = malloc(sizeof(p))</code>这样的程序来。<br>　　函数<code>free</code>的原型如下：</p>\n<p>　　为什么<code>free</code>函数不象<code>mallo</code>c函数那样复杂呢？这是因为指针<code>p</code>的类型以及它所指的内存的容量事先都是知道的，语句<code>free(p)</code>能正确地释放内存。如果<code>p</code>是<code>NULL</code>指针，那么<code>free</code>对<code>p</code>无论操作多少次都不会出问题。如果<code>p</code>不是<code>NULL</code>指针，那么<code>free</code>对<code>p</code>连续操作两次就会导致程序运行错误。</p>\n<h2 id=\"new-delete的使用要点\"><a href=\"#new-delete的使用要点\" class=\"headerlink\" title=\"new/delete的使用要点\"></a>new/delete的使用要点</h2><p>　　运算符<code>new</code>使用起来要比函数<code>malloc</code>简单得多，例如：</p>\n<p>　　这是因为<code>new</code>内置了<code>sizeof</code>、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，<code>new</code>在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么<code>new</code>的语句也可以有多种形式。例如：</p>\n<p>　　如果用<code>new</code>创建对象数组，那么只能使用对象的无参数构造函数。例如：</p>\n<p>　　不能写成：</p>\n<p>　　在用<code>delete</code>释放对象数组时，留意不要丢了符号‘[]’。例如：</p>\n<p>　　后者有可能引起程序崩溃和内存泄漏。</p>\n"},{"_content":"# 堆的概念\n\n堆实际上是一棵完全二叉树，其任何一非叶节点满足性质：\n Key[i]<=key[2i+1]&&Key[i]<=key[2i+2]或者Key[i]>=Key[2i+1]&&key>=key[2i+2]\n 即任何一非叶节点的关键字不大于或者不小于其左右孩子节点的关键字。\n 堆分为大顶堆和小顶堆，满足Key[i]>=Key[2i+1]&&key>=key[2i+2]称为大顶堆，满足 Key[i]<=key[2i+1]&&Key[i]<=key[2i+2]称为小顶堆。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。\n\n其中，大根堆和小根堆在海量数据的top N问题中，有着很好的时间复杂度。\n\n首先，先给出一个交换两个变量数值的函数。\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. void Swap(uint32_t* array, uint32_t i, uint32_t j)  \n2. {  \n3. ​    assert(array);  \n4. ​    uint32_t tmp = 0;  \n5. ​    tmp = array[j];  \n6. ​    array[j] = array[i];  \n7. ​    array[i] = tmp;  \n8. }  \n\n```\nvoid Swap(uint32_t* array, uint32_t i, uint32_t j)\n{\n\tassert(array);\n\tuint32_t tmp = 0;\n\ttmp = array[j];\n\tarray[j] = array[i];\n\tarray[i] = tmp;\n}\n```\n\n头文件包含\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. \\#include <stdlib.h>  \n2. \\#include <stdint.h>  \n3. \\#include <assert.h>  \n4. \\#include <string.h>  \n5. \\#include <stdio.h>  \n\n```\n#include <stdlib.h>\n#include <stdint.h>\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n```\n\n# 大根堆实现\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*大根堆调整*/  \n2. void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  \n3. {  \n4. ​    uint32_t leftChild = 0, rightChild = 0,  largest = 0;  \n5. ​    leftChild = 2*currentNode + 1;  \n6. ​    rightChild = 2*currentNode + 2;  \n7. ​    if(leftChild < heapSize && array[leftChild] > array[currentNode])  \n8. ​        largest = leftChild;  \n9. ​    else  \n10. ​        largest = currentNode;  \n11. ​    if(rightChild < heapSize && array[rightChild] > array[largest])  \n12. ​        largest = rightChild;  \n13. ​    if(largest != currentNode)  \n14. ​    {  \n15. ​        Swap(array, largest, currentNode);  \n16. ​        MaxHeapify(array, heapSize, largest);  \n17. ​    }  \n18. }  \n19.   \n20. /*构建大根堆*/  \n21. void MaxHeapCreat(uint32_t* array, uint32_t heapSize)  \n22. {  \n23. ​    int i = 0;  \n24. ​    for(i = heapSize/2; i >= 0; i--)  \n25. ​    {  \n26. ​        MaxHeapify(array, heapSize, i);  \n27. ​    }  \n28. }  \n\n```\n/*大根堆调整*/\nvoid MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)\n{\n\tuint32_t leftChild = 0, rightChild = 0,  largest = 0;\n\tleftChild = 2*currentNode + 1;\n\trightChild = 2*currentNode + 2;\n\tif(leftChild < heapSize && array[leftChild] > array[currentNode])\n\t\tlargest = leftChild;\n\telse\n\t\tlargest = currentNode;\n\tif(rightChild < heapSize && array[rightChild] > array[largest])\n\t\tlargest = rightChild;\n\tif(largest != currentNode)\n\t{\n\t\tSwap(array, largest, currentNode);\n\t\tMaxHeapify(array, heapSize, largest);\n\t}\n}\n\n/*构建大根堆*/\nvoid MaxHeapCreat(uint32_t* array, uint32_t heapSize)\n{\n\tint i = 0;\n\tfor(i = heapSize/2; i >= 0; i--)\n\t{\n\t\tMaxHeapify(array, heapSize, i);\n\t}\n}\n```\n\n# 小根堆实现\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*小根堆调整*/  \n2. void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  \n3. {  \n4. ​    uint32_t leftChild = 0, rightChild = 0,  minimum = 0;  \n5. ​    leftChild = 2*currentNode + 1;  \n6. ​    rightChild = 2*currentNode + 2;  \n7. ​    if(leftChild < heapSize && array[leftChild] < array[currentNode])  \n8. ​        minimum = leftChild;  \n9. ​    else  \n10. ​        minimum = currentNode;  \n11. ​    if(rightChild < heapSize && array[rightChild] < array[minimum])  \n12. ​        minimum = rightChild;  \n13. ​    if(minimum != currentNode)  \n14. ​    {  \n15. ​        Swap(array, minimum, currentNode);  \n16. ​        MinHeapify(array, heapSize, minimum);  \n17. ​    }  \n18. }  \n19. /*构建小根堆*/  \n20. void MinHeapCreat(uint32_t* array, uint32_t heapSize)  \n21. {  \n22. ​    int i = 0;  \n23. ​    for(i = heapSize/2; i >= 0; i--)  \n24. ​    {  \n25. ​        MinHeapify(array, heapSize, i);  \n26. ​    }  \n27. }  \n\n```\n/*小根堆调整*/\nvoid MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)\n{\n\tuint32_t leftChild = 0, rightChild = 0,  minimum = 0;\n\tleftChild = 2*currentNode + 1;\n\trightChild = 2*currentNode + 2;\n\tif(leftChild < heapSize && array[leftChild] < array[currentNode])\n\t\tminimum = leftChild;\n\telse\n\t\tminimum = currentNode;\n\tif(rightChild < heapSize && array[rightChild] < array[minimum])\n\t\tminimum = rightChild;\n\tif(minimum != currentNode)\n\t{\n\t\tSwap(array, minimum, currentNode);\n\t\tMinHeapify(array, heapSize, minimum);\n\t}\n}\n/*构建小根堆*/\nvoid MinHeapCreat(uint32_t* array, uint32_t heapSize)\n{\n\tint i = 0;\n\tfor(i = heapSize/2; i >= 0; i--)\n\t{\n\t\tMinHeapify(array, heapSize, i);\n\t}\n}\n```\n\n \n\n# top N问题\n\n利用小根堆解决获取大量数据中最大的N个值，先构建一个拥有N个元素的小根堆。然后，将其余的元素插入到小根堆即可。插入方法如下：\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*maintain the top N numbers*/  \n2. void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  \n3. {  \n4. ​    if(elem > array[0])  \n5. ​    {  \n6. ​        array[0] = elem;  \n7. ​        MinHeapify(array, heapSize, 0);  \n8. ​    }  \n9. }  \n\n```\n/*maintain the top N numbers*/\nvoid MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)\n{\n\tif(elem > array[0])\n\t{\n\t\tarray[0] = elem;\n\t\tMinHeapify(array, heapSize, 0);\n\t}\n}\n```\n\n 利用大根堆解决获取大量数据中最小的N个值，先构建一个拥有N个元素的大根堆。然后，将其余的元素插入到大根堆即可。插入方法如下：\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*maintain the low N numbers*/  \n2. void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  \n3. {  \n4. ​    if(elem < array[0])  \n5. ​    {  \n6. ​        array[0] = elem;  \n7. ​        MaxHeapify(array, heapSize, 0);  \n8. ​    }  \n9. }  \n\n```\n/*maintain the low N numbers*/\nvoid MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)\n{\n\tif(elem < array[0])\n\t{\n\t\tarray[0] = elem;\n\t\tMaxHeapify(array, heapSize, 0);\n\t}\n}\n```\n\n# 时间复杂度分析\n\n堆调整一次的时间复杂度是O(logN)。所以，通过堆来解决top N 问题的时间复杂度是O(nlogN).\n\n其中，n为数据的个数,N为堆维护的数据的个数。\n\n \n\n# 测试程序\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. int main()  \n2. {  \n3. ​    int i = 0, heapSize = 10;  \n4. ​    uint32_t array[] = {2,20,13,18,15,8,3,5,4,25};  \n5. ​    uint32_t minelem = 10, maxelem = 1;  \n6.   \n7. /*build min heap and test insert*/  \n8. ​    MinHeapCreat(array, heapSize);    \n9. ​    printf(\"Output the MinHeap:\\n\");    \n10. ​    for(i = 0; i < heapSize; i++)    \n11. ​    {    \n12. ​        printf(\"%d\\t\", array[i]);    \n13. ​    }    \n14. ​    MinInsert(array, heapSize, minelem);   \n15. ​    printf(\"\\nOutput insert elem %d:\\n\",minelem);  \n16. ​    for(i = 0; i < heapSize; i++)  \n17. ​    {  \n18. ​        printf(\"%d\\t\", array[i]);  \n19. ​    }  \n20. ​    printf(\"\\n\");  \n21. /*build max heap and test insert*/  \n22. ​    MaxHeapCreat(array, heapSize);      \n23. ​    printf(\"Output the MaxHeap:\\n\");      \n24. ​    for(i = 0; i < heapSize; i++)      \n25. ​    {      \n26. ​        printf(\"%d\\t\", array[i]);      \n27. ​    }      \n28. ​    MaxInsert(array, heapSize,maxelem);   \n29. ​    printf(\"\\nOutput insert elem %d:\\n\",maxelem);      \n30. ​    for(i = 0; i < heapSize; i++)      \n31. ​    {      \n32. ​        printf(\"%d\\t\", array[i]);      \n33. ​    }  \n34. ​    printf(\"\\n\");   \n35. }  ","source":"_posts/小根堆.md","raw":"# 堆的概念\n\n堆实际上是一棵完全二叉树，其任何一非叶节点满足性质：\n Key[i]<=key[2i+1]&&Key[i]<=key[2i+2]或者Key[i]>=Key[2i+1]&&key>=key[2i+2]\n 即任何一非叶节点的关键字不大于或者不小于其左右孩子节点的关键字。\n 堆分为大顶堆和小顶堆，满足Key[i]>=Key[2i+1]&&key>=key[2i+2]称为大顶堆，满足 Key[i]<=key[2i+1]&&Key[i]<=key[2i+2]称为小顶堆。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。\n\n其中，大根堆和小根堆在海量数据的top N问题中，有着很好的时间复杂度。\n\n首先，先给出一个交换两个变量数值的函数。\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. void Swap(uint32_t* array, uint32_t i, uint32_t j)  \n2. {  \n3. ​    assert(array);  \n4. ​    uint32_t tmp = 0;  \n5. ​    tmp = array[j];  \n6. ​    array[j] = array[i];  \n7. ​    array[i] = tmp;  \n8. }  \n\n```\nvoid Swap(uint32_t* array, uint32_t i, uint32_t j)\n{\n\tassert(array);\n\tuint32_t tmp = 0;\n\ttmp = array[j];\n\tarray[j] = array[i];\n\tarray[i] = tmp;\n}\n```\n\n头文件包含\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. \\#include <stdlib.h>  \n2. \\#include <stdint.h>  \n3. \\#include <assert.h>  \n4. \\#include <string.h>  \n5. \\#include <stdio.h>  \n\n```\n#include <stdlib.h>\n#include <stdint.h>\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n```\n\n# 大根堆实现\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*大根堆调整*/  \n2. void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  \n3. {  \n4. ​    uint32_t leftChild = 0, rightChild = 0,  largest = 0;  \n5. ​    leftChild = 2*currentNode + 1;  \n6. ​    rightChild = 2*currentNode + 2;  \n7. ​    if(leftChild < heapSize && array[leftChild] > array[currentNode])  \n8. ​        largest = leftChild;  \n9. ​    else  \n10. ​        largest = currentNode;  \n11. ​    if(rightChild < heapSize && array[rightChild] > array[largest])  \n12. ​        largest = rightChild;  \n13. ​    if(largest != currentNode)  \n14. ​    {  \n15. ​        Swap(array, largest, currentNode);  \n16. ​        MaxHeapify(array, heapSize, largest);  \n17. ​    }  \n18. }  \n19.   \n20. /*构建大根堆*/  \n21. void MaxHeapCreat(uint32_t* array, uint32_t heapSize)  \n22. {  \n23. ​    int i = 0;  \n24. ​    for(i = heapSize/2; i >= 0; i--)  \n25. ​    {  \n26. ​        MaxHeapify(array, heapSize, i);  \n27. ​    }  \n28. }  \n\n```\n/*大根堆调整*/\nvoid MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)\n{\n\tuint32_t leftChild = 0, rightChild = 0,  largest = 0;\n\tleftChild = 2*currentNode + 1;\n\trightChild = 2*currentNode + 2;\n\tif(leftChild < heapSize && array[leftChild] > array[currentNode])\n\t\tlargest = leftChild;\n\telse\n\t\tlargest = currentNode;\n\tif(rightChild < heapSize && array[rightChild] > array[largest])\n\t\tlargest = rightChild;\n\tif(largest != currentNode)\n\t{\n\t\tSwap(array, largest, currentNode);\n\t\tMaxHeapify(array, heapSize, largest);\n\t}\n}\n\n/*构建大根堆*/\nvoid MaxHeapCreat(uint32_t* array, uint32_t heapSize)\n{\n\tint i = 0;\n\tfor(i = heapSize/2; i >= 0; i--)\n\t{\n\t\tMaxHeapify(array, heapSize, i);\n\t}\n}\n```\n\n# 小根堆实现\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*小根堆调整*/  \n2. void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  \n3. {  \n4. ​    uint32_t leftChild = 0, rightChild = 0,  minimum = 0;  \n5. ​    leftChild = 2*currentNode + 1;  \n6. ​    rightChild = 2*currentNode + 2;  \n7. ​    if(leftChild < heapSize && array[leftChild] < array[currentNode])  \n8. ​        minimum = leftChild;  \n9. ​    else  \n10. ​        minimum = currentNode;  \n11. ​    if(rightChild < heapSize && array[rightChild] < array[minimum])  \n12. ​        minimum = rightChild;  \n13. ​    if(minimum != currentNode)  \n14. ​    {  \n15. ​        Swap(array, minimum, currentNode);  \n16. ​        MinHeapify(array, heapSize, minimum);  \n17. ​    }  \n18. }  \n19. /*构建小根堆*/  \n20. void MinHeapCreat(uint32_t* array, uint32_t heapSize)  \n21. {  \n22. ​    int i = 0;  \n23. ​    for(i = heapSize/2; i >= 0; i--)  \n24. ​    {  \n25. ​        MinHeapify(array, heapSize, i);  \n26. ​    }  \n27. }  \n\n```\n/*小根堆调整*/\nvoid MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)\n{\n\tuint32_t leftChild = 0, rightChild = 0,  minimum = 0;\n\tleftChild = 2*currentNode + 1;\n\trightChild = 2*currentNode + 2;\n\tif(leftChild < heapSize && array[leftChild] < array[currentNode])\n\t\tminimum = leftChild;\n\telse\n\t\tminimum = currentNode;\n\tif(rightChild < heapSize && array[rightChild] < array[minimum])\n\t\tminimum = rightChild;\n\tif(minimum != currentNode)\n\t{\n\t\tSwap(array, minimum, currentNode);\n\t\tMinHeapify(array, heapSize, minimum);\n\t}\n}\n/*构建小根堆*/\nvoid MinHeapCreat(uint32_t* array, uint32_t heapSize)\n{\n\tint i = 0;\n\tfor(i = heapSize/2; i >= 0; i--)\n\t{\n\t\tMinHeapify(array, heapSize, i);\n\t}\n}\n```\n\n \n\n# top N问题\n\n利用小根堆解决获取大量数据中最大的N个值，先构建一个拥有N个元素的小根堆。然后，将其余的元素插入到小根堆即可。插入方法如下：\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*maintain the top N numbers*/  \n2. void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  \n3. {  \n4. ​    if(elem > array[0])  \n5. ​    {  \n6. ​        array[0] = elem;  \n7. ​        MinHeapify(array, heapSize, 0);  \n8. ​    }  \n9. }  \n\n```\n/*maintain the top N numbers*/\nvoid MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)\n{\n\tif(elem > array[0])\n\t{\n\t\tarray[0] = elem;\n\t\tMinHeapify(array, heapSize, 0);\n\t}\n}\n```\n\n 利用大根堆解决获取大量数据中最小的N个值，先构建一个拥有N个元素的大根堆。然后，将其余的元素插入到大根堆即可。插入方法如下：\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*maintain the low N numbers*/  \n2. void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  \n3. {  \n4. ​    if(elem < array[0])  \n5. ​    {  \n6. ​        array[0] = elem;  \n7. ​        MaxHeapify(array, heapSize, 0);  \n8. ​    }  \n9. }  \n\n```\n/*maintain the low N numbers*/\nvoid MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)\n{\n\tif(elem < array[0])\n\t{\n\t\tarray[0] = elem;\n\t\tMaxHeapify(array, heapSize, 0);\n\t}\n}\n```\n\n# 时间复杂度分析\n\n堆调整一次的时间复杂度是O(logN)。所以，通过堆来解决top N 问题的时间复杂度是O(nlogN).\n\n其中，n为数据的个数,N为堆维护的数据的个数。\n\n \n\n# 测试程序\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. int main()  \n2. {  \n3. ​    int i = 0, heapSize = 10;  \n4. ​    uint32_t array[] = {2,20,13,18,15,8,3,5,4,25};  \n5. ​    uint32_t minelem = 10, maxelem = 1;  \n6.   \n7. /*build min heap and test insert*/  \n8. ​    MinHeapCreat(array, heapSize);    \n9. ​    printf(\"Output the MinHeap:\\n\");    \n10. ​    for(i = 0; i < heapSize; i++)    \n11. ​    {    \n12. ​        printf(\"%d\\t\", array[i]);    \n13. ​    }    \n14. ​    MinInsert(array, heapSize, minelem);   \n15. ​    printf(\"\\nOutput insert elem %d:\\n\",minelem);  \n16. ​    for(i = 0; i < heapSize; i++)  \n17. ​    {  \n18. ​        printf(\"%d\\t\", array[i]);  \n19. ​    }  \n20. ​    printf(\"\\n\");  \n21. /*build max heap and test insert*/  \n22. ​    MaxHeapCreat(array, heapSize);      \n23. ​    printf(\"Output the MaxHeap:\\n\");      \n24. ​    for(i = 0; i < heapSize; i++)      \n25. ​    {      \n26. ​        printf(\"%d\\t\", array[i]);      \n27. ​    }      \n28. ​    MaxInsert(array, heapSize,maxelem);   \n29. ​    printf(\"\\nOutput insert elem %d:\\n\",maxelem);      \n30. ​    for(i = 0; i < heapSize; i++)      \n31. ​    {      \n32. ​        printf(\"%d\\t\", array[i]);      \n33. ​    }  \n34. ​    printf(\"\\n\");   \n35. }  ","slug":"小根堆","published":1,"date":"2017-09-30T09:07:10.412Z","updated":"2017-09-28T03:44:50.469Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8742rw50002pkwri2rwxs7d","content":"<h1 id=\"堆的概念\"><a href=\"#堆的概念\" class=\"headerlink\" title=\"堆的概念\"></a>堆的概念</h1><p>堆实际上是一棵完全二叉树，其任何一非叶节点满足性质：<br> Key[i]&lt;=key[2i+1]&amp;&amp;Key[i]&lt;=key[2i+2]或者Key[i]&gt;=Key[2i+1]&amp;&amp;key&gt;=key[2i+2]<br> 即任何一非叶节点的关键字不大于或者不小于其左右孩子节点的关键字。<br> 堆分为大顶堆和小顶堆，满足Key[i]&gt;=Key[2i+1]&amp;&amp;key&gt;=key[2i+2]称为大顶堆，满足 Key[i]&lt;=key[2i+1]&amp;&amp;Key[i]&lt;=key[2i+2]称为小顶堆。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。</p>\n<p>其中，大根堆和小根堆在海量数据的top N问题中，有着很好的时间复杂度。</p>\n<p>首先，先给出一个交换两个变量数值的函数。</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>void Swap(uint32_t* array, uint32_t i, uint32_t j)  </li>\n<li>{  </li>\n<li>​    assert(array);  </li>\n<li>​    uint32_t tmp = 0;  </li>\n<li>​    tmp = array[j];  </li>\n<li>​    array[j] = array[i];  </li>\n<li>​    array[i] = tmp;  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">void Swap(uint32_t* array, uint32_t i, uint32_t j)</div><div class=\"line\">&#123;</div><div class=\"line\">\tassert(array);</div><div class=\"line\">\tuint32_t tmp = 0;</div><div class=\"line\">\ttmp = array[j];</div><div class=\"line\">\tarray[j] = array[i];</div><div class=\"line\">\tarray[i] = tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>头文件包含</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>#include <stdlib.h>  </stdlib.h></li>\n<li>#include <stdint.h>  </stdint.h></li>\n<li>#include <assert.h>  </assert.h></li>\n<li>#include <string.h>  </string.h></li>\n<li>#include <stdio.h>  </stdio.h></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;stdint.h&gt;</div><div class=\"line\">#include &lt;assert.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">#include &lt;stdio.h&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"大根堆实现\"><a href=\"#大根堆实现\" class=\"headerlink\" title=\"大根堆实现\"></a>大根堆实现</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>大根堆调整</em>/  </li>\n<li>void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  </li>\n<li>{  </li>\n<li>​    uint32_t leftChild = 0, rightChild = 0,  largest = 0;  </li>\n<li>​    leftChild = 2*currentNode + 1;  </li>\n<li>​    rightChild = 2*currentNode + 2;  </li>\n<li>​    if(leftChild &lt; heapSize &amp;&amp; array[leftChild] &gt; array[currentNode])  </li>\n<li>​        largest = leftChild;  </li>\n<li>​    else  </li>\n<li>​        largest = currentNode;  </li>\n<li>​    if(rightChild &lt; heapSize &amp;&amp; array[rightChild] &gt; array[largest])  </li>\n<li>​        largest = rightChild;  </li>\n<li>​    if(largest != currentNode)  </li>\n<li>​    {  </li>\n<li>​        Swap(array, largest, currentNode);  </li>\n<li>​        MaxHeapify(array, heapSize, largest);  </li>\n<li>​    }  </li>\n<li>}  </li>\n<li></li>\n<li>/<em>构建大根堆</em>/  </li>\n<li>void MaxHeapCreat(uint32_t* array, uint32_t heapSize)  </li>\n<li>{  </li>\n<li>​    int i = 0;  </li>\n<li>​    for(i = heapSize/2; i &gt;= 0; i–)  </li>\n<li>​    {  </li>\n<li>​        MaxHeapify(array, heapSize, i);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*大根堆调整*/</div><div class=\"line\">void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)</div><div class=\"line\">&#123;</div><div class=\"line\">\tuint32_t leftChild = 0, rightChild = 0,  largest = 0;</div><div class=\"line\">\tleftChild = 2*currentNode + 1;</div><div class=\"line\">\trightChild = 2*currentNode + 2;</div><div class=\"line\">\tif(leftChild &lt; heapSize &amp;&amp; array[leftChild] &gt; array[currentNode])</div><div class=\"line\">\t\tlargest = leftChild;</div><div class=\"line\">\telse</div><div class=\"line\">\t\tlargest = currentNode;</div><div class=\"line\">\tif(rightChild &lt; heapSize &amp;&amp; array[rightChild] &gt; array[largest])</div><div class=\"line\">\t\tlargest = rightChild;</div><div class=\"line\">\tif(largest != currentNode)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSwap(array, largest, currentNode);</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, largest);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*构建大根堆*/</div><div class=\"line\">void MaxHeapCreat(uint32_t* array, uint32_t heapSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">\tfor(i = heapSize/2; i &gt;= 0; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"小根堆实现\"><a href=\"#小根堆实现\" class=\"headerlink\" title=\"小根堆实现\"></a>小根堆实现</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>小根堆调整</em>/  </li>\n<li>void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  </li>\n<li>{  </li>\n<li>​    uint32_t leftChild = 0, rightChild = 0,  minimum = 0;  </li>\n<li>​    leftChild = 2*currentNode + 1;  </li>\n<li>​    rightChild = 2*currentNode + 2;  </li>\n<li>​    if(leftChild &lt; heapSize &amp;&amp; array[leftChild] &lt; array[currentNode])  </li>\n<li>​        minimum = leftChild;  </li>\n<li>​    else  </li>\n<li>​        minimum = currentNode;  </li>\n<li>​    if(rightChild &lt; heapSize &amp;&amp; array[rightChild] &lt; array[minimum])  </li>\n<li>​        minimum = rightChild;  </li>\n<li>​    if(minimum != currentNode)  </li>\n<li>​    {  </li>\n<li>​        Swap(array, minimum, currentNode);  </li>\n<li>​        MinHeapify(array, heapSize, minimum);  </li>\n<li>​    }  </li>\n<li>}  </li>\n<li>/<em>构建小根堆</em>/  </li>\n<li>void MinHeapCreat(uint32_t* array, uint32_t heapSize)  </li>\n<li>{  </li>\n<li>​    int i = 0;  </li>\n<li>​    for(i = heapSize/2; i &gt;= 0; i–)  </li>\n<li>​    {  </li>\n<li>​        MinHeapify(array, heapSize, i);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*小根堆调整*/</div><div class=\"line\">void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)</div><div class=\"line\">&#123;</div><div class=\"line\">\tuint32_t leftChild = 0, rightChild = 0,  minimum = 0;</div><div class=\"line\">\tleftChild = 2*currentNode + 1;</div><div class=\"line\">\trightChild = 2*currentNode + 2;</div><div class=\"line\">\tif(leftChild &lt; heapSize &amp;&amp; array[leftChild] &lt; array[currentNode])</div><div class=\"line\">\t\tminimum = leftChild;</div><div class=\"line\">\telse</div><div class=\"line\">\t\tminimum = currentNode;</div><div class=\"line\">\tif(rightChild &lt; heapSize &amp;&amp; array[rightChild] &lt; array[minimum])</div><div class=\"line\">\t\tminimum = rightChild;</div><div class=\"line\">\tif(minimum != currentNode)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSwap(array, minimum, currentNode);</div><div class=\"line\">\t\tMinHeapify(array, heapSize, minimum);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*构建小根堆*/</div><div class=\"line\">void MinHeapCreat(uint32_t* array, uint32_t heapSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">\tfor(i = heapSize/2; i &gt;= 0; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tMinHeapify(array, heapSize, i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"top-N问题\"><a href=\"#top-N问题\" class=\"headerlink\" title=\"top N问题\"></a>top N问题</h1><p>利用小根堆解决获取大量数据中最大的N个值，先构建一个拥有N个元素的小根堆。然后，将其余的元素插入到小根堆即可。插入方法如下：</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>maintain the top N numbers</em>/  </li>\n<li>void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  </li>\n<li>{  </li>\n<li>​    if(elem &gt; array[0])  </li>\n<li>​    {  </li>\n<li>​        array[0] = elem;  </li>\n<li>​        MinHeapify(array, heapSize, 0);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*maintain the top N numbers*/</div><div class=\"line\">void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif(elem &gt; array[0])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tarray[0] = elem;</div><div class=\"line\">\t\tMinHeapify(array, heapSize, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 利用大根堆解决获取大量数据中最小的N个值，先构建一个拥有N个元素的大根堆。然后，将其余的元素插入到大根堆即可。插入方法如下：</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>maintain the low N numbers</em>/  </li>\n<li>void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  </li>\n<li>{  </li>\n<li>​    if(elem &lt; array[0])  </li>\n<li>​    {  </li>\n<li>​        array[0] = elem;  </li>\n<li>​        MaxHeapify(array, heapSize, 0);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*maintain the low N numbers*/</div><div class=\"line\">void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif(elem &lt; array[0])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tarray[0] = elem;</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h1><p>堆调整一次的时间复杂度是O(logN)。所以，通过堆来解决top N 问题的时间复杂度是O(nlogN).</p>\n<p>其中，n为数据的个数,N为堆维护的数据的个数。</p>\n<h1 id=\"测试程序\"><a href=\"#测试程序\" class=\"headerlink\" title=\"测试程序\"></a>测试程序</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>int main()  </li>\n<li>{  </li>\n<li>​    int i = 0, heapSize = 10;  </li>\n<li>​    uint32_t array[] = {2,20,13,18,15,8,3,5,4,25};  </li>\n<li>​    uint32_t minelem = 10, maxelem = 1;  </li>\n<li></li>\n<li>/<em>build min heap and test insert</em>/  </li>\n<li>​    MinHeapCreat(array, heapSize);    </li>\n<li>​    printf(“Output the MinHeap:\\n”);    </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)    </li>\n<li>​    {    </li>\n<li>​        printf(“%d\\t”, array[i]);    </li>\n<li>​    }    </li>\n<li>​    MinInsert(array, heapSize, minelem);   </li>\n<li>​    printf(“\\nOutput insert elem %d:\\n”,minelem);  </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)  </li>\n<li>​    {  </li>\n<li>​        printf(“%d\\t”, array[i]);  </li>\n<li>​    }  </li>\n<li>​    printf(“\\n”);  </li>\n<li>/<em>build max heap and test insert</em>/  </li>\n<li>​    MaxHeapCreat(array, heapSize);      </li>\n<li>​    printf(“Output the MaxHeap:\\n”);      </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)      </li>\n<li>​    {      </li>\n<li>​        printf(“%d\\t”, array[i]);      </li>\n<li>​    }      </li>\n<li>​    MaxInsert(array, heapSize,maxelem);   </li>\n<li>​    printf(“\\nOutput insert elem %d:\\n”,maxelem);      </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)      </li>\n<li>​    {      </li>\n<li>​        printf(“%d\\t”, array[i]);      </li>\n<li>​    }  </li>\n<li>​    printf(“\\n”);   </li>\n<li>}  </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"堆的概念\"><a href=\"#堆的概念\" class=\"headerlink\" title=\"堆的概念\"></a>堆的概念</h1><p>堆实际上是一棵完全二叉树，其任何一非叶节点满足性质：<br> Key[i]&lt;=key[2i+1]&amp;&amp;Key[i]&lt;=key[2i+2]或者Key[i]&gt;=Key[2i+1]&amp;&amp;key&gt;=key[2i+2]<br> 即任何一非叶节点的关键字不大于或者不小于其左右孩子节点的关键字。<br> 堆分为大顶堆和小顶堆，满足Key[i]&gt;=Key[2i+1]&amp;&amp;key&gt;=key[2i+2]称为大顶堆，满足 Key[i]&lt;=key[2i+1]&amp;&amp;Key[i]&lt;=key[2i+2]称为小顶堆。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。</p>\n<p>其中，大根堆和小根堆在海量数据的top N问题中，有着很好的时间复杂度。</p>\n<p>首先，先给出一个交换两个变量数值的函数。</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>void Swap(uint32_t* array, uint32_t i, uint32_t j)  </li>\n<li>{  </li>\n<li>​    assert(array);  </li>\n<li>​    uint32_t tmp = 0;  </li>\n<li>​    tmp = array[j];  </li>\n<li>​    array[j] = array[i];  </li>\n<li>​    array[i] = tmp;  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">void Swap(uint32_t* array, uint32_t i, uint32_t j)</div><div class=\"line\">&#123;</div><div class=\"line\">\tassert(array);</div><div class=\"line\">\tuint32_t tmp = 0;</div><div class=\"line\">\ttmp = array[j];</div><div class=\"line\">\tarray[j] = array[i];</div><div class=\"line\">\tarray[i] = tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>头文件包含</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>#include <stdlib.h>  </stdlib.h></li>\n<li>#include <stdint.h>  </stdint.h></li>\n<li>#include <assert.h>  </assert.h></li>\n<li>#include <string.h>  </string.h></li>\n<li>#include <stdio.h>  </stdio.h></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;stdint.h&gt;</div><div class=\"line\">#include &lt;assert.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">#include &lt;stdio.h&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"大根堆实现\"><a href=\"#大根堆实现\" class=\"headerlink\" title=\"大根堆实现\"></a>大根堆实现</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>大根堆调整</em>/  </li>\n<li>void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  </li>\n<li>{  </li>\n<li>​    uint32_t leftChild = 0, rightChild = 0,  largest = 0;  </li>\n<li>​    leftChild = 2*currentNode + 1;  </li>\n<li>​    rightChild = 2*currentNode + 2;  </li>\n<li>​    if(leftChild &lt; heapSize &amp;&amp; array[leftChild] &gt; array[currentNode])  </li>\n<li>​        largest = leftChild;  </li>\n<li>​    else  </li>\n<li>​        largest = currentNode;  </li>\n<li>​    if(rightChild &lt; heapSize &amp;&amp; array[rightChild] &gt; array[largest])  </li>\n<li>​        largest = rightChild;  </li>\n<li>​    if(largest != currentNode)  </li>\n<li>​    {  </li>\n<li>​        Swap(array, largest, currentNode);  </li>\n<li>​        MaxHeapify(array, heapSize, largest);  </li>\n<li>​    }  </li>\n<li>}  </li>\n<li></li>\n<li>/<em>构建大根堆</em>/  </li>\n<li>void MaxHeapCreat(uint32_t* array, uint32_t heapSize)  </li>\n<li>{  </li>\n<li>​    int i = 0;  </li>\n<li>​    for(i = heapSize/2; i &gt;= 0; i–)  </li>\n<li>​    {  </li>\n<li>​        MaxHeapify(array, heapSize, i);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*大根堆调整*/</div><div class=\"line\">void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)</div><div class=\"line\">&#123;</div><div class=\"line\">\tuint32_t leftChild = 0, rightChild = 0,  largest = 0;</div><div class=\"line\">\tleftChild = 2*currentNode + 1;</div><div class=\"line\">\trightChild = 2*currentNode + 2;</div><div class=\"line\">\tif(leftChild &lt; heapSize &amp;&amp; array[leftChild] &gt; array[currentNode])</div><div class=\"line\">\t\tlargest = leftChild;</div><div class=\"line\">\telse</div><div class=\"line\">\t\tlargest = currentNode;</div><div class=\"line\">\tif(rightChild &lt; heapSize &amp;&amp; array[rightChild] &gt; array[largest])</div><div class=\"line\">\t\tlargest = rightChild;</div><div class=\"line\">\tif(largest != currentNode)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSwap(array, largest, currentNode);</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, largest);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*构建大根堆*/</div><div class=\"line\">void MaxHeapCreat(uint32_t* array, uint32_t heapSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">\tfor(i = heapSize/2; i &gt;= 0; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"小根堆实现\"><a href=\"#小根堆实现\" class=\"headerlink\" title=\"小根堆实现\"></a>小根堆实现</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>小根堆调整</em>/  </li>\n<li>void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  </li>\n<li>{  </li>\n<li>​    uint32_t leftChild = 0, rightChild = 0,  minimum = 0;  </li>\n<li>​    leftChild = 2*currentNode + 1;  </li>\n<li>​    rightChild = 2*currentNode + 2;  </li>\n<li>​    if(leftChild &lt; heapSize &amp;&amp; array[leftChild] &lt; array[currentNode])  </li>\n<li>​        minimum = leftChild;  </li>\n<li>​    else  </li>\n<li>​        minimum = currentNode;  </li>\n<li>​    if(rightChild &lt; heapSize &amp;&amp; array[rightChild] &lt; array[minimum])  </li>\n<li>​        minimum = rightChild;  </li>\n<li>​    if(minimum != currentNode)  </li>\n<li>​    {  </li>\n<li>​        Swap(array, minimum, currentNode);  </li>\n<li>​        MinHeapify(array, heapSize, minimum);  </li>\n<li>​    }  </li>\n<li>}  </li>\n<li>/<em>构建小根堆</em>/  </li>\n<li>void MinHeapCreat(uint32_t* array, uint32_t heapSize)  </li>\n<li>{  </li>\n<li>​    int i = 0;  </li>\n<li>​    for(i = heapSize/2; i &gt;= 0; i–)  </li>\n<li>​    {  </li>\n<li>​        MinHeapify(array, heapSize, i);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*小根堆调整*/</div><div class=\"line\">void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)</div><div class=\"line\">&#123;</div><div class=\"line\">\tuint32_t leftChild = 0, rightChild = 0,  minimum = 0;</div><div class=\"line\">\tleftChild = 2*currentNode + 1;</div><div class=\"line\">\trightChild = 2*currentNode + 2;</div><div class=\"line\">\tif(leftChild &lt; heapSize &amp;&amp; array[leftChild] &lt; array[currentNode])</div><div class=\"line\">\t\tminimum = leftChild;</div><div class=\"line\">\telse</div><div class=\"line\">\t\tminimum = currentNode;</div><div class=\"line\">\tif(rightChild &lt; heapSize &amp;&amp; array[rightChild] &lt; array[minimum])</div><div class=\"line\">\t\tminimum = rightChild;</div><div class=\"line\">\tif(minimum != currentNode)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSwap(array, minimum, currentNode);</div><div class=\"line\">\t\tMinHeapify(array, heapSize, minimum);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*构建小根堆*/</div><div class=\"line\">void MinHeapCreat(uint32_t* array, uint32_t heapSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">\tfor(i = heapSize/2; i &gt;= 0; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tMinHeapify(array, heapSize, i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"top-N问题\"><a href=\"#top-N问题\" class=\"headerlink\" title=\"top N问题\"></a>top N问题</h1><p>利用小根堆解决获取大量数据中最大的N个值，先构建一个拥有N个元素的小根堆。然后，将其余的元素插入到小根堆即可。插入方法如下：</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>maintain the top N numbers</em>/  </li>\n<li>void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  </li>\n<li>{  </li>\n<li>​    if(elem &gt; array[0])  </li>\n<li>​    {  </li>\n<li>​        array[0] = elem;  </li>\n<li>​        MinHeapify(array, heapSize, 0);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*maintain the top N numbers*/</div><div class=\"line\">void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif(elem &gt; array[0])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tarray[0] = elem;</div><div class=\"line\">\t\tMinHeapify(array, heapSize, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 利用大根堆解决获取大量数据中最小的N个值，先构建一个拥有N个元素的大根堆。然后，将其余的元素插入到大根堆即可。插入方法如下：</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>maintain the low N numbers</em>/  </li>\n<li>void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  </li>\n<li>{  </li>\n<li>​    if(elem &lt; array[0])  </li>\n<li>​    {  </li>\n<li>​        array[0] = elem;  </li>\n<li>​        MaxHeapify(array, heapSize, 0);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*maintain the low N numbers*/</div><div class=\"line\">void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif(elem &lt; array[0])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tarray[0] = elem;</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h1><p>堆调整一次的时间复杂度是O(logN)。所以，通过堆来解决top N 问题的时间复杂度是O(nlogN).</p>\n<p>其中，n为数据的个数,N为堆维护的数据的个数。</p>\n<h1 id=\"测试程序\"><a href=\"#测试程序\" class=\"headerlink\" title=\"测试程序\"></a>测试程序</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>int main()  </li>\n<li>{  </li>\n<li>​    int i = 0, heapSize = 10;  </li>\n<li>​    uint32_t array[] = {2,20,13,18,15,8,3,5,4,25};  </li>\n<li>​    uint32_t minelem = 10, maxelem = 1;  </li>\n<li></li>\n<li>/<em>build min heap and test insert</em>/  </li>\n<li>​    MinHeapCreat(array, heapSize);    </li>\n<li>​    printf(“Output the MinHeap:\\n”);    </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)    </li>\n<li>​    {    </li>\n<li>​        printf(“%d\\t”, array[i]);    </li>\n<li>​    }    </li>\n<li>​    MinInsert(array, heapSize, minelem);   </li>\n<li>​    printf(“\\nOutput insert elem %d:\\n”,minelem);  </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)  </li>\n<li>​    {  </li>\n<li>​        printf(“%d\\t”, array[i]);  </li>\n<li>​    }  </li>\n<li>​    printf(“\\n”);  </li>\n<li>/<em>build max heap and test insert</em>/  </li>\n<li>​    MaxHeapCreat(array, heapSize);      </li>\n<li>​    printf(“Output the MaxHeap:\\n”);      </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)      </li>\n<li>​    {      </li>\n<li>​        printf(“%d\\t”, array[i]);      </li>\n<li>​    }      </li>\n<li>​    MaxInsert(array, heapSize,maxelem);   </li>\n<li>​    printf(“\\nOutput insert elem %d:\\n”,maxelem);      </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)      </li>\n<li>​    {      </li>\n<li>​        printf(“%d\\t”, array[i]);      </li>\n<li>​    }  </li>\n<li>​    printf(“\\n”);   </li>\n<li>}  </li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}