{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1506757107799},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1506757107799},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1506757107799},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1506757107801},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1506757107801},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1506757107801},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1506757107802},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1506757107802},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1506757107802},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1506757107803},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1506757107802},{"_id":"themes/next/README.md","hash":"52bad95ac4c88371d3ae9d9ea6e0e14b8c723edf","modified":1506757107803},{"_id":"themes/next/_config.yml","hash":"f63c819b43116d79b680247e095943c583dd931a","modified":1506762280859},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1506757107804},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1506757107804},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1506757107830},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1506756180142},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1506757107780},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1506757107784},{"_id":"themes/next/.git/index","hash":"1e68eb2a698f53087a9878bec8476f131dd6a092","modified":1506757758803},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1506756472396},{"_id":"themes/next/.git/packed-refs","hash":"c55a86bcf901924b257443b85aa5f5b1b610f6e6","modified":1506757107777},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1506757107800},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1506757107800},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"81dbdf09454cb26f9fd2e3ed1bf3df5af8a528fd","modified":1506757107800},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1506757107801},{"_id":"themes/next/layout/_layout.swig","hash":"fb55ab56e2d478cadc0c3906adfbc4a13620408e","modified":1506757107809},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1506757107829},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1506757107829},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1506757107828},{"_id":"themes/next/layout/post.swig","hash":"dd24412a52311c85415054738e711c810653688d","modified":1506757107830},{"_id":"themes/next/layout/page.swig","hash":"b47ce149090ccf8524b834f5347837b53569fe3c","modified":1506757107829},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1506757107830},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1506757107830},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1506757107804},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1506757107805},{"_id":"themes/next/languages/en.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1506757107805},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1506757107805},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1506757107805},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1506757107806},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1506757107806},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1506757107807},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1506757107807},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1506757107807},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1506757107806},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23817934c6bf7a59a494743777526b8c8ae3350d","modified":1506757107808},{"_id":"themes/next/languages/zh-tw.yml","hash":"64a16181fcc3779ea335792c22fda3b5202e3e9e","modified":1506757107808},{"_id":"themes/next/languages/zh-hk.yml","hash":"19fb3c159fa6f4d58237e5a1a3857048a6add9a6","modified":1506757107808},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1506757107831},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1506757107831},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1506757107918},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1506757107918},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1506757107918},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506757107865},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1506756472401},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1506756472399},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1506756472398},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1506756472398},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1506756472398},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1506756472399},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1506756472400},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1506756472400},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1506756472400},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1506756472399},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1506756472401},{"_id":"themes/next/.git/logs/HEAD","hash":"de0066944b31571aa9c40021ea1ed925ae956622","modified":1506757107782},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1506757107809},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1506757107809},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc0ff72b3a8ab25029a070acee066d9eaa0b0493","modified":1506757107812},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1506757107812},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1506757107813},{"_id":"themes/next/layout/_partials/head.swig","hash":"71040aa738c57c24f8b703875d58ab7a262fe075","modified":1506757107813},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1506757107814},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1506757107814},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1506757107814},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1506757107810},{"_id":"themes/next/layout/_macro/post.swig","hash":"9896b34a7edc112c03b393a1602a616710a66ae1","modified":1506757107811},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1506757107810},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1506757107811},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1506757107811},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0d78052679a4f913a5338b66e0cc624c6eb1254b","modified":1506757107811},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1506757107817},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1506757107817},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1506757107819},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1506757107825},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1506757107825},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1506757107825},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1506757107826},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1506757107826},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1506757107826},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1506757107832},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1506757107832},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1506757107832},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1506757107833},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1506757107833},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1506757107834},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1506757107833},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1506757107833},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1506757107834},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1506757107865},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1506757107866},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1506757107866},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1506757107866},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1506757107867},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1506757107867},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1506757107867},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1506757107868},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1506757107868},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506757107868},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506757107869},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1506757107869},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1506757107869},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1506757107869},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1506757107865},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506757107818},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506757107818},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506757107855},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506757107855},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506757107856},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506757107864},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506757107864},{"_id":"themes/next/.git/refs/heads/master","hash":"136b050c52b778b5a89561448f27590c4cba790d","modified":1506757107781},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1506757107813},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1506757107813},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1506757107815},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1506757107815},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1506757107815},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1506757107815},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1506757107816},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1506757107816},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1506757107816},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1506757107818},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1506757107818},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1506757107823},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1506757107819},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1506757107823},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1506757107823},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1506757107824},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1506757107824},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1506757107824},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1506757107824},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1506757107824},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1506757107820},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1506757107820},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1506757107820},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1506757107821},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1506757107820},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1506757107821},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1506757107821},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1506757107821},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1506757107822},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1506757107822},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1506757107822},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1506757107822},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1506757107827},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1506757107828},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1506757107827},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1506757107828},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1506757107855},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1506757107855},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1506757107856},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1506757107856},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"38a9f43973704afe7e8ca50f35a25940ea96e3cf","modified":1506757107863},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1506757107863},{"_id":"themes/next/source/css/_variables/base.styl","hash":"68c87734324408ae6d4560da1082168ea83ba2c1","modified":1506757107864},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1506757107864},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1506757107870},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1506757107870},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1506757107870},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1506757107871},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1506757107871},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1506757107871},{"_id":"themes/next/source/js/src/motion.js","hash":"6d34f2a6ea6d73f7715d00f8b175854cd02baa36","modified":1506757107872},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1506757107872},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1506757107873},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1506757107872},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1506757107873},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1506757107881},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1506757107881},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1506757107881},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1506757107878},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1506757107886},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1506757107887},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1506757107887},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1506757107887},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1506757107880},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1506757107889},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1506757107889},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1506757107889},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1506757107889},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1506757107890},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1506757107901},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1506757107902},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1506757107902},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1506757107903},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1506757107903},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1506757107904},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1506757107904},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1506757107905},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1506757107905},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1506757107905},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1506757107906},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1506757107906},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1506757107906},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1506757107907},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1506757107908},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1506757107907},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1506757107907},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1506757107908},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1506757107908},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1506757107908},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1506757107909},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1506757107909},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1506757107910},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1506757107910},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1506757107915},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1506757107914},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1506757107916},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1506757107917},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1506757107917},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1506757107902},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"de0066944b31571aa9c40021ea1ed925ae956622","modified":1506757107782},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1506757107780},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1506757107827},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1506757107827},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1506757107835},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1506757107835},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1506757107836},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1506757107836},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1506757107835},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1506757107840},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1506757107853},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1506757107847},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1506757107853},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1506757107854},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1506757107854},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1506757107854},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1506757107854},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1506757107853},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1506757107857},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1506757107857},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1506757107857},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1506757107858},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1506757107858},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"643eb1ad5bef63e1f5eff13ed33fc7b21111189e","modified":1506757107858},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1506757107859},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1506757107858},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1506757107862},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1506757107861},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1506757107862},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1506757107862},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1506757107863},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"24617c40a0d9b5e516d9500a45bc47cb995f325e","modified":1506757107863},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1506757107860},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1506757107860},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1506757107860},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1506757107860},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1506757107861},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1506757107872},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1506757107877},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1506757107877},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1506757107876},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506757107882},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506757107882},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506757107883},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506757107882},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506757107883},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506757107883},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1506757107885},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1506757107886},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1506757107886},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1506757107888},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1506757107888},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1506757107890},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1506757107891},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1506757107891},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1506757107914},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1506757107914},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1506757107876},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1506757107900},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1506757107900},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1506757107916},{"_id":"themes/next/.git/objects/pack/pack-d52a7cf3d76ce59c84c0440113af085ad4681bd9.idx","hash":"0e7b3c966a382d66975d08a2098a912ff9e104cd","modified":1506757107727},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"de0066944b31571aa9c40021ea1ed925ae956622","modified":1506757107780},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1506757107836},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1506757107837},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1506757107837},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1506757107838},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1506757107837},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1506757107837},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1506757107838},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1506757107838},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1506757107839},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1506757107839},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1506757107840},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1506757107839},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1506757107840},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1506757107840},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1506757107841},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1506757107841},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1506757107841},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1506757107842},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"37c7d10289df2deded057545ece3f652dbd18757","modified":1506757107842},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1506757107842},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1506757107842},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1506757107843},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1506757107843},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1506757107844},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1506757107843},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1506757107843},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1506757107844},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1506757107844},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1506757107845},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfe6d162b4647aeadee109d06bb314ea252f6904","modified":1506757107844},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1506757107845},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1506757107845},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1506757107846},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1506757107846},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1506757107846},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1506757107847},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1506757107846},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1506757107847},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1506757107847},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1506757107848},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1506757107848},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1506757107848},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1506757107849},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1506757107849},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1506757107849},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1506757107849},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1506757107850},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1506757107850},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1506757107850},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1506757107850},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1506757107851},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1506757107852},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1506757107851},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1506757107851},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1506757107852},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1506757107852},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1506757107859},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1506757107859},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1506757107861},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1506757107874},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1506757107875},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1506757107874},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1506757107874},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1506757107875},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506757107883},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1506757107884},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1506757107884},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1506757107884},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1506757107885},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1506757107885},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1506757107893},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1506757107894},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1506757107899},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1506757107880},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1506757107912},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1506757107897},{"_id":"themes/next/.git/objects/pack/pack-d52a7cf3d76ce59c84c0440113af085ad4681bd9.pack","hash":"165477729e8603fbf6196532e52c7a5b7676214c","modified":1506757107728},{"_id":"public/2017/09/30/hello-world/index.html","hash":"3db59ea02ee0fad7488b34e235d433054e7439cb","modified":1506762439953},{"_id":"public/index.html","hash":"6d8fb0df767957c92a0752464145a126eb430c41","modified":1506762439954},{"_id":"public/archives/index.html","hash":"be3e59245263f5810ba75f9442c28ca051dd5d62","modified":1506762439954},{"_id":"public/archives/2017/index.html","hash":"1f32f1f83aadbe6dda180a0fea92e5d4d8fa0c39","modified":1506762439954},{"_id":"public/archives/2017/09/index.html","hash":"ee5ec4c5ac3549d3fe4d70d43e80eedb5c13e79e","modified":1506762439954},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1506758629398},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1506758629398},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1506758629399},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1506758629399},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1506758629399},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1506758629399},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1506758629399},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1506758629403},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506758629403},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1506758629403},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506758629403},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1506758629403},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1506758629403},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1506758629403},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1506758629403},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1506758629403},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506758629403},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506758629403},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506758629403},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506758629403},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506758629403},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506758629403},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1506758629403},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1506758629403},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1506758629403},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1506758629404},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506758629404},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1506758629404},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1506758629404},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1506758629810},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1506758629821},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1506758629830},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1506758629830},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1506758629830},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1506758629830},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1506758629830},{"_id":"public/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1506758629830},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1506758629830},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1506758629830},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1506758629830},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1506758629830},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1506758629830},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1506758629830},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1506758629830},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1506758629830},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1506758629830},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1506758629830},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1506758629830},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1506758629830},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1506758629830},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1506758629830},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1506758629830},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1506758629830},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1506758629830},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1506758629830},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1506758629831},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1506758629831},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1506758629831},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1506758629831},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1506758629831},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1506758629831},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1506758629831},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1506758629831},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1506758629831},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1506758629831},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1506758629831},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1506758629831},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1506758629831},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1506758629831},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1506758629831},{"_id":"public/css/main.css","hash":"e8787d59430efddd3b6f42bd41f0d9423fef92b5","modified":1506758629831},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1506758629831},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1506758629831},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1506758629831},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1506758629831},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1506758629831},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1506758629832},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1506758629832},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1506758629832},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1506758629832},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1506758629832},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1506758629832},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1506758629832},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1506758629832},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1506758629832},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1506758629832},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1506758629832},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1506758629832},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1506758629832},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1506758629832},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1506758629832},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1506758629832},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1506758629840},{"_id":"source/_posts/内存分配方式.md","hash":"d806d3ee6e4224ee99828c8189ecceb2d4fb45f1","modified":1506503347716},{"_id":"source/_posts/小根堆.md","hash":"4720406131e678abf4fafd4bf6a98d9e8b022646","modified":1506570290469},{"_id":"public/2017/09/30/小根堆/index.html","hash":"b384f4ad0e529aaa96860a3957e38e2844321115","modified":1506762439955},{"_id":"public/2017/09/30/内存分配方式/index.html","hash":"82551e5f12d9535fd002cd3f8dae6a1867dda00c","modified":1506762439955}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-09-30T07:23:00.142Z","updated":"2017-09-30T07:23:00.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8716mry0000i8wrqv2hrulu","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"_content":"内存管理是C++最令人切齿痛恨的问题，也是C++最有争议的问题，C++高手从中获得了更好的性能，更大的自由，C++菜鸟的收获则是一遍一遍的检查代码和对C++的痛恨，但内存管理在C++中无处不在，内存泄漏几乎在每个C++程序中都会发生，因此要想成为C++高手，内存管理一关是必须要过的，除非放弃C++，转到Java或者.NET，他们的内存管理基本是自动的，当然你也放弃了自由和对内存的支配权，还放弃了C++超绝的性能。\n　　伟大的Bill Gates 曾经失言：\n\n> 　*640K ought to be enough for everybody* — Bill Gates 1981\n\n　　程序员们经常编写内存管理程序，往往提心吊胆。如果不想触雷，唯一的解决办法就是发现所有潜伏的地雷并且排除它们，躲是躲不了的。\n\n## 内存分配方式\n\n### 简介\n\n　　在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。\n　　**栈**：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。\n　　**堆**：就是那些由 `new`分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个`new`就要对应一个 `delete`。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。\n　　**自由存储区**：就是那些由`malloc`等分配的内存块，他和堆是十分相似的，不过它是用`free`来结束自己的生命的。\n　　**全局/静态存储区**：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。\n　　**常量存储区**：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。\n\n### 明确区分堆与栈\n\n　　堆与栈的区分问题，似乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。\n　　首先，我们举一个例子：\n\n　　这条短短的一句话就包含了堆与栈，看到`new`，我们首先就应该想到，我们分配了一块堆内存，那么指针`p`呢？他分配的是一块栈内存，所以这句话的意思就是：在栈内存中存放了一个指向一块堆内存的指针`p`。在程序会先确定在堆中分配内存的大小，然后调用`operator new`分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：\n\n```\n00401028 push 14h\n0040102A call operator new (00401060)\n0040102F add esp,4\n00401032 mov dword ptr [ebp-8],eax\n00401035 mov eax,dword ptr [ebp-8]\n00401038 mov dword ptr [ebp-4],eax\n\n```\n\n　　这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是`delete p`么？澳，错了，应该是`delete []p`，这是为了告诉编译器：我删除的是一个数组，编译器就会根据相应的`Cookie`信息去进行释放内存的工作。\n\n### 堆和栈究竟有什么区别\n\n　　好了，我们回到我们的主题：堆和栈究竟有什么区别？\n　　主要的区别由以下几点：\n　　(1). 管理方式不同\n　　(2). 空间大小不同\n　　(3). 能否产生碎片不同\n　　(4). 生长方向不同\n　　(5). 分配方式不同\n　　(6). 分配效率不同\n　　管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生`memory leak`。\n　　空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：\n　　打开工程，依次操作菜单如下`：Project->Setting->Link`，在`Category` 中选中`Output`，然后在`Reserve`中设定堆栈的最大值和`commit`。\n　　注意：reserve最小值为4Byte；`commit`是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。\n　　碎片问题：对于堆来讲，频繁的`new/delete`势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。\n　　生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。\n　　分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由`alloca`函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。\n　　分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。\n　　从这里我们可以看到，堆和栈相比，由于大量`new/delete`的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。\n　　虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。\n　　无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候`debug`可是相当困难的：）\n\n## 控制C++的内存分配\n\n　　在嵌入式系统中使用C++的一个常见问题是内存分配，即对`new` 和 `delete` 操作符的失控。\n　　具有讽刺意味的是，问题的根源却是C++对内存的管理非常的容易而且安全。具体地说，当一个对象被消除时，它的析构函数能够安全的释放所分配的内存。\n　　这当然是个好事情，但是这种使用的简单性使得程序员们过度使用`new` 和 `delete`，而不注意在嵌入式C++环境中的因果关系。并且，在嵌入式系统中，由于内存的限制，频繁的动态分配不定大小的内存会引起很大的问题以及堆破碎的风险。\n　　作为忠告，保守的使用内存分配是嵌入式环境中的第一原则。\n　　但当你必须要使用`new`和`delete`时，你不得不控制C++中的内存分配。你需要用一个全局的`new` 和`delete`来代替系统的内存分配符，并且一个类一个类的重载`new`和`delete`。\n　　一个防止堆破碎的通用方法是从不同固定大小的内存持中分配不同类型的对象。对每个类重载`new` 和`delete`就提供了这样的控制。\n\n### 重载全局的new和delete操作符\n\n　　可以很容易地重载new 和 delete 操作符，如下所示:\n\n　　这段代码可以代替默认的操作符来满足内存分配的请求。出于解释C++的目的，我们也可以直接调用`malloc()`和`free()`。\n　　也可以对单个类的`new` 和 `delete`操作符重载。这是你能灵活的控制对象的内存分配。\n\n　　所有`TestClass` 对象的内存分配都采用这段代码。更进一步，任何从`TestClass` 继承的类也都采用这一方式，除非它自己也重载了`new` 和 `delete` 操作符。通过重载`new` 和 `delete` 操作符的方法，你可以自由地采用不同的分配策略，从不同的内存池中分配不同的类对象。\n\n### 为单个的类重载new[]和delete[]\n\n　　必须小心对象数组的分配。你可能希望调用到被你重载过的`new` 和 `delete` 操作符，但并不如此。内存的请求被定向到全局的`new[]`和`delete[]` 操作符，而这些内存来自于系统堆。\n　　C++将对象数组的内存分配作为一个单独的操作，而不同于单个对象的内存分配。为了改变这种方式，你同样需要重载`new[]` 和 `delete[]`操作符。\n\n　　但是**注意**：对于多数C++的实现，`new[]`操作符中的个数参数是数组的大小加上额外的存储对象数目的一些字节。在你的内存分配机制重要考虑的这一点。你应该尽量避免分配对象数组，从而使你的内存分配策略简单。\n\n## 常见的内存错误及其对策\n\n　　发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。有时用户怒气冲冲地把你找来，程序却没有发生任何问题，你一走，错误又发作了。 常见的内存错误及其对策如下：\n\n- 内存分配未成功，却使用了它。编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为`NULL`。如果指针`p`是函数的参数，那么在函数的入口处用`assert(p!=NULL)`进行检查。如果是用`malloc`或`new`来申请内存，应该用`if(p==NULL)` 或`if(p!=NULL)`进行防错处理。\n- 内存分配虽然成功，但是尚未初始化就引用它。犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。\n- 内存分配成功并且已经初始化，但操作越过了内存的边界。例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在`for`循环语句中，循环次数很容易搞错，导致数组操作越界。\n- 忘记了释放内存，造成内存泄露。含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。动态内存的申请与释放必须配对，程序中`malloc`与`free`的使用次数一定要相同，否则肯定有错误（`new/delete`同理）。\n- 释放了内存却继续使用它。\n\n　　有三种情况：\n　　(1). 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。\n　　(2). 函数的`return`语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。\n　　(3). 使用`free`或`delete`释放了内存后，没有将指针设置为`NULL`。**导致产生“野指针”**。\n　　**那么如何避免产生野指针呢**？这里列出了5条规则，平常写程序时多注意一下，养成良好的习惯。\n\n> 规则1：用`malloc`或`new`申请内存之后，应该立即检查指针值是否为`NULL`。防止使用指针值为`NULL`的内存。\n> 规则2：不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。\n> 规则3：避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。\n> 规则4：动态内存的申请与释放必须配对，防止内存泄漏。\n> 规则5：用`free`或`delete`释放了内存之后，立即将指针设置为`NULL`，防止产生“野指针”。\n\n## 针与数组的对比\n\n　　C++/C程序中，指针和数组在不少地方可以相互替换着用，让人产生一种错觉，以为两者是等价的。\n　　数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。\n　　指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。\n　　下面以字符串为例比较指针与数组的特性。\n\n### 修改内容\n\n　　下面示例中，字符数组a的容量是6个字符，其内容为 hello。a的内容可以改变，如`a[0]= ‘X’`。指针p指向常量字符串“world”（位于静态存储区，内容为world），常量字符串的内容是不可以被修改的。从语法上看，编译器并不觉得语句`p[0]= ‘X’`有什么不妥，但是该语句企图修改常量字符串的内容而导致运行错误。\n\n### 内容复制与比较\n\n　　不能对数组名进行直接复制与比较。若想把数组a的内容复制给数组b，不能用语句 `b = a` ，否则将产生编译错误。应该用标准库函数`strcpy`进行复制。同理，比较b和a的内容是否相同，不能用`if(b==a)` 来判断，应该用标准库函数`strcmp`进行比较。\n　　语句 `p = a` 并不能把a的内容复制指针p，而是把a的地址赋给了p。要想复制a的内容，可以先用库函数`malloc`为p申请一块容量为`strlen(a)+1`个字符的内存，再用`strcpy`进行字符串复制。同理，语句`if(p==a)` 比较的不是内容而是地址，应该用库函数`strcmp`来比较。\n\n### 计算内存容量\n\n　　用运算符`sizeof`可以计算出数组的容量（字节数）。如下示例中，`sizeof(a)`的值是12（注意别忘了’’）。指针p指向a，但是`sizeof(p)`的值却是4。这是因为`sizeof(p)`得到的是一个指针变量的字节数，相当于`sizeof(char*)`，而不是p所指的内存容量。C++/C语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。\n\n　　注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。如下示例中，不论数组a的容量是多少，`sizeof(a)`始终等于`sizeof(char *)`。\n\n## 指针参数是如何传递内存的\n\n　　如果函数的参数是一个指针，不要指望用该指针去申请动态内存。如下示例中，Test函数的语句`GetMemory(str, 200)`并没有使`str`获得期望的内存，`str`依旧是`NULL`，为什么？\n\n　　毛病出在函数`GetMemory`中。编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 `_p`，编译器使`_p=p`。如果函数体内的程序修改了`_p`的内容，就导致参数p的内容作相应的修改。这就是指针可以用作输出参数的原因。在本例中，`_p`申请了新的内存，只是把 `_p`所指的内存地址改变了，但是p丝毫未变。所以函数`GetMemory`并不能输出任何东西。事实上，每执行一次`GetMemory`就会泄露一块内存，因为没有用`free`释放内存。\n　　如果非得要用指针参数去申请内存，那么应该改用“指向指针的指针”，见示例：\n\n　　由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单，见示例：\n\n　　用函数返回值来传递动态内存这种方法虽然好用，但是常常有人把`return`语句用错了。这里强调不要用`return`语句返回指向“栈内存”的指针，因为该内存在函数结束时自动消亡，见示例：\n\n　　用调试器逐步跟踪`Test4`，发现执行`str = GetString`语句后`str`不再是`NULL`指针，但是`str`的内容不是`“hello world”`而是垃圾。\n　　如果把上述示例改写成如下示例，会怎么样？\n\n　　函数`Test5`运行虽然不会出错，但是函数`GetString2`的设计概念却是错误的。因为`GetString2`内的`“hello world”`是常量字符串，位于静态存储区，它在程序生命期内恒定不变。无论什么时候调用`GetString2`，它返回的始终是同一个“只读”的内存块。\n\n## 杜绝“野指针”\n\n　　“野指针”不是`NULL`指针，是指向“垃圾”内存的指针。人们一般不会错用`NULL`指针，因为用`if`语句很容易判断。但是“野指针”是很危险的，`if`语句对它不起作用。 “野指针”的成因主要有三种：\n\n　　(1). 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。例如：\n\n　　(2). 指针p被free或者delete之后，没有置为NULL，让人误以为p是个合法的指针。\n\n　　(3). 指针操作超越了变量的作用域范围。这种情况让人防不胜防，示例程序如下：\n\n　　函数`Test`在执行语句`p->Func()`时，对象a已经消失，而p是指向a的，所以p就成了“野指针”。但奇怪的是我运行这个程序时居然没有出错，这可能与编译器有关。\n\n## 有了malloc/free为什么还要new/delete\n\n　　`malloc`与`free`是C++/C语言的标准库函数，`new/delete`是C++的运算符。它们都可用于申请动态内存和释放内存。\n　　对于非内部数据类型的对象而言，光用`maloc/free`无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于`malloc/free`是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于`malloc/free`。\n　　因此C++语言需要一个能完成动态内存分配和初始化工作的运算符`new`，以及一个能完成清理与释放内存工作的运算符`delet`e。注意`new/delete`不是库函数。我们先看一看`malloc/free`和`new/delete`如何实现对象的动态内存管理，见示例：\n\n　　类`Obj`的函数`Initialize`模拟了构造函数的功能，函数`Destroy`模拟了析构函数的功能。函数`UseMallocFree`中，由于`malloc/free`不能执行构造函数与析构函数，必须调用成员函数`Initialize`和`Destroy`来完成初始化与清除工作。函数`UseNewDelete`则简单得多。\n　　所以我们不要企图用`malloc/free`来完成动态对象的内存管理，应该用`new/delete`。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言`malloc/free`和`new/delete`是等价的。\n　　既然`new/delete`的功能完全覆盖了`malloc/free`，为什么C++不把`malloc/free`淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用`malloc/free`管理动态内存。\n　　如果用`free`释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用`delete`释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以`new/delete`必须配对使用，`malloc/free`也一样。\n\n## 内存耗尽怎么办\n\n　　如果在申请动态内存时找不到足够大的内存块，`malloc`和`new`将返回`NULL`指针，宣告内存申请失败。通常有三种方式处理“内存耗尽”问题。\n　　(1). 判断指针是否为`NULL`，如果是则马上用`return`语句终止本函数。例如：\n\n　　(2). 判断指针是否为`NULL`，如果是则马上用`exit(1)`终止整个程序的运行。例如：\n\n　　(3). 为`new`和`malloc`设置异常处理函数。例如Visual C++可以用`_set_new_hander`函数为`new`设置用户自己定义的异常处理函数，也可以让`malloc`享用与`new`相同的异常处理函数。详细内容请参考C++使用手册。\n　　上述 (1)、(2) 方式使用最普遍。如果一个函数内有多处需要申请动态内存，那么方式 (1) 就显得力不从心（释放内存很麻烦），应该用方式 (2) 来处理。\n　　很多人不忍心用`exit(1)`，问：“不编写出错处理程序，让操作系统自己解决行不行？”\n　　不行。如果发生“内存耗尽”这样的事情，一般说来应用程序已经无药可救。如果不用`exit(1)` 把坏程序杀死，它可能会害死操作系统。道理如同：如果不把歹徒击毙，歹徒在老死之前会犯下更多的罪。\n　　有一个很重要的现象要告诉大家。对于32位以上的应用程序而言，无论怎样使用`malloc与new`，几乎不可能导致“内存耗尽”。对于32位以上的应用程序，“内存耗尽”错误处理程序毫无用处。这下可把Unix和Windows程序员们乐坏了：反正错误处理程序不起作用，我就不写了，省了很多麻烦。\n　　必须强调：不加错误处理将导致程序的质量很差，千万不可因小失大。\n\n## malloc/free的使用要点\n\n　　函数`malloc`的原型如下：\n\n　　用`malloc`申请一块长度为`length`的整数类型的内存，程序如下：\n\n　　我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。\n　　`* malloc`返回值的类型是`void*`，所以在调用`malloc`时要显式地进行类型转换，将`void *`转换成所需要的指针类型。\n　　`* malloc`函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。我们通常记不住`int`, `float`等数据类型的变量的确切字节数。例如`int`变量在16位系统下是2个字节，在32位下是4个字节；而`float`变量在16位系统下是4个字节，在32位下也是4个字节。最好用以下程序作一次测试：\n\n　　在`malloc`的“()”中使用`sizeof`运算符是良好的风格，但要当心有时我们会昏了头，写出 `p = malloc(sizeof(p))`这样的程序来。\n　　函数`free`的原型如下：\n\n　　为什么`free`函数不象`mallo`c函数那样复杂呢？这是因为指针`p`的类型以及它所指的内存的容量事先都是知道的，语句`free(p)`能正确地释放内存。如果`p`是`NULL`指针，那么`free`对`p`无论操作多少次都不会出问题。如果`p`不是`NULL`指针，那么`free`对`p`连续操作两次就会导致程序运行错误。\n\n## new/delete的使用要点\n\n　　运算符`new`使用起来要比函数`malloc`简单得多，例如：\n\n　　这是因为`new`内置了`sizeof`、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，`new`在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么`new`的语句也可以有多种形式。例如：\n\n　　如果用`new`创建对象数组，那么只能使用对象的无参数构造函数。例如：\n\n　　不能写成：\n\n　　在用`delete`释放对象数组时，留意不要丢了符号‘[]’。例如：\n\n　　后者有可能引起程序崩溃和内存泄漏。","source":"_posts/内存分配方式.md","raw":"内存管理是C++最令人切齿痛恨的问题，也是C++最有争议的问题，C++高手从中获得了更好的性能，更大的自由，C++菜鸟的收获则是一遍一遍的检查代码和对C++的痛恨，但内存管理在C++中无处不在，内存泄漏几乎在每个C++程序中都会发生，因此要想成为C++高手，内存管理一关是必须要过的，除非放弃C++，转到Java或者.NET，他们的内存管理基本是自动的，当然你也放弃了自由和对内存的支配权，还放弃了C++超绝的性能。\n　　伟大的Bill Gates 曾经失言：\n\n> 　*640K ought to be enough for everybody* — Bill Gates 1981\n\n　　程序员们经常编写内存管理程序，往往提心吊胆。如果不想触雷，唯一的解决办法就是发现所有潜伏的地雷并且排除它们，躲是躲不了的。\n\n## 内存分配方式\n\n### 简介\n\n　　在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。\n　　**栈**：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。\n　　**堆**：就是那些由 `new`分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个`new`就要对应一个 `delete`。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。\n　　**自由存储区**：就是那些由`malloc`等分配的内存块，他和堆是十分相似的，不过它是用`free`来结束自己的生命的。\n　　**全局/静态存储区**：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。\n　　**常量存储区**：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。\n\n### 明确区分堆与栈\n\n　　堆与栈的区分问题，似乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。\n　　首先，我们举一个例子：\n\n　　这条短短的一句话就包含了堆与栈，看到`new`，我们首先就应该想到，我们分配了一块堆内存，那么指针`p`呢？他分配的是一块栈内存，所以这句话的意思就是：在栈内存中存放了一个指向一块堆内存的指针`p`。在程序会先确定在堆中分配内存的大小，然后调用`operator new`分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：\n\n```\n00401028 push 14h\n0040102A call operator new (00401060)\n0040102F add esp,4\n00401032 mov dword ptr [ebp-8],eax\n00401035 mov eax,dword ptr [ebp-8]\n00401038 mov dword ptr [ebp-4],eax\n\n```\n\n　　这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是`delete p`么？澳，错了，应该是`delete []p`，这是为了告诉编译器：我删除的是一个数组，编译器就会根据相应的`Cookie`信息去进行释放内存的工作。\n\n### 堆和栈究竟有什么区别\n\n　　好了，我们回到我们的主题：堆和栈究竟有什么区别？\n　　主要的区别由以下几点：\n　　(1). 管理方式不同\n　　(2). 空间大小不同\n　　(3). 能否产生碎片不同\n　　(4). 生长方向不同\n　　(5). 分配方式不同\n　　(6). 分配效率不同\n　　管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生`memory leak`。\n　　空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：\n　　打开工程，依次操作菜单如下`：Project->Setting->Link`，在`Category` 中选中`Output`，然后在`Reserve`中设定堆栈的最大值和`commit`。\n　　注意：reserve最小值为4Byte；`commit`是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。\n　　碎片问题：对于堆来讲，频繁的`new/delete`势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。\n　　生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。\n　　分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由`alloca`函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。\n　　分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。\n　　从这里我们可以看到，堆和栈相比，由于大量`new/delete`的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。\n　　虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。\n　　无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候`debug`可是相当困难的：）\n\n## 控制C++的内存分配\n\n　　在嵌入式系统中使用C++的一个常见问题是内存分配，即对`new` 和 `delete` 操作符的失控。\n　　具有讽刺意味的是，问题的根源却是C++对内存的管理非常的容易而且安全。具体地说，当一个对象被消除时，它的析构函数能够安全的释放所分配的内存。\n　　这当然是个好事情，但是这种使用的简单性使得程序员们过度使用`new` 和 `delete`，而不注意在嵌入式C++环境中的因果关系。并且，在嵌入式系统中，由于内存的限制，频繁的动态分配不定大小的内存会引起很大的问题以及堆破碎的风险。\n　　作为忠告，保守的使用内存分配是嵌入式环境中的第一原则。\n　　但当你必须要使用`new`和`delete`时，你不得不控制C++中的内存分配。你需要用一个全局的`new` 和`delete`来代替系统的内存分配符，并且一个类一个类的重载`new`和`delete`。\n　　一个防止堆破碎的通用方法是从不同固定大小的内存持中分配不同类型的对象。对每个类重载`new` 和`delete`就提供了这样的控制。\n\n### 重载全局的new和delete操作符\n\n　　可以很容易地重载new 和 delete 操作符，如下所示:\n\n　　这段代码可以代替默认的操作符来满足内存分配的请求。出于解释C++的目的，我们也可以直接调用`malloc()`和`free()`。\n　　也可以对单个类的`new` 和 `delete`操作符重载。这是你能灵活的控制对象的内存分配。\n\n　　所有`TestClass` 对象的内存分配都采用这段代码。更进一步，任何从`TestClass` 继承的类也都采用这一方式，除非它自己也重载了`new` 和 `delete` 操作符。通过重载`new` 和 `delete` 操作符的方法，你可以自由地采用不同的分配策略，从不同的内存池中分配不同的类对象。\n\n### 为单个的类重载new[]和delete[]\n\n　　必须小心对象数组的分配。你可能希望调用到被你重载过的`new` 和 `delete` 操作符，但并不如此。内存的请求被定向到全局的`new[]`和`delete[]` 操作符，而这些内存来自于系统堆。\n　　C++将对象数组的内存分配作为一个单独的操作，而不同于单个对象的内存分配。为了改变这种方式，你同样需要重载`new[]` 和 `delete[]`操作符。\n\n　　但是**注意**：对于多数C++的实现，`new[]`操作符中的个数参数是数组的大小加上额外的存储对象数目的一些字节。在你的内存分配机制重要考虑的这一点。你应该尽量避免分配对象数组，从而使你的内存分配策略简单。\n\n## 常见的内存错误及其对策\n\n　　发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。有时用户怒气冲冲地把你找来，程序却没有发生任何问题，你一走，错误又发作了。 常见的内存错误及其对策如下：\n\n- 内存分配未成功，却使用了它。编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为`NULL`。如果指针`p`是函数的参数，那么在函数的入口处用`assert(p!=NULL)`进行检查。如果是用`malloc`或`new`来申请内存，应该用`if(p==NULL)` 或`if(p!=NULL)`进行防错处理。\n- 内存分配虽然成功，但是尚未初始化就引用它。犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。\n- 内存分配成功并且已经初始化，但操作越过了内存的边界。例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在`for`循环语句中，循环次数很容易搞错，导致数组操作越界。\n- 忘记了释放内存，造成内存泄露。含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。动态内存的申请与释放必须配对，程序中`malloc`与`free`的使用次数一定要相同，否则肯定有错误（`new/delete`同理）。\n- 释放了内存却继续使用它。\n\n　　有三种情况：\n　　(1). 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。\n　　(2). 函数的`return`语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。\n　　(3). 使用`free`或`delete`释放了内存后，没有将指针设置为`NULL`。**导致产生“野指针”**。\n　　**那么如何避免产生野指针呢**？这里列出了5条规则，平常写程序时多注意一下，养成良好的习惯。\n\n> 规则1：用`malloc`或`new`申请内存之后，应该立即检查指针值是否为`NULL`。防止使用指针值为`NULL`的内存。\n> 规则2：不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。\n> 规则3：避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。\n> 规则4：动态内存的申请与释放必须配对，防止内存泄漏。\n> 规则5：用`free`或`delete`释放了内存之后，立即将指针设置为`NULL`，防止产生“野指针”。\n\n## 针与数组的对比\n\n　　C++/C程序中，指针和数组在不少地方可以相互替换着用，让人产生一种错觉，以为两者是等价的。\n　　数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。\n　　指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。\n　　下面以字符串为例比较指针与数组的特性。\n\n### 修改内容\n\n　　下面示例中，字符数组a的容量是6个字符，其内容为 hello。a的内容可以改变，如`a[0]= ‘X’`。指针p指向常量字符串“world”（位于静态存储区，内容为world），常量字符串的内容是不可以被修改的。从语法上看，编译器并不觉得语句`p[0]= ‘X’`有什么不妥，但是该语句企图修改常量字符串的内容而导致运行错误。\n\n### 内容复制与比较\n\n　　不能对数组名进行直接复制与比较。若想把数组a的内容复制给数组b，不能用语句 `b = a` ，否则将产生编译错误。应该用标准库函数`strcpy`进行复制。同理，比较b和a的内容是否相同，不能用`if(b==a)` 来判断，应该用标准库函数`strcmp`进行比较。\n　　语句 `p = a` 并不能把a的内容复制指针p，而是把a的地址赋给了p。要想复制a的内容，可以先用库函数`malloc`为p申请一块容量为`strlen(a)+1`个字符的内存，再用`strcpy`进行字符串复制。同理，语句`if(p==a)` 比较的不是内容而是地址，应该用库函数`strcmp`来比较。\n\n### 计算内存容量\n\n　　用运算符`sizeof`可以计算出数组的容量（字节数）。如下示例中，`sizeof(a)`的值是12（注意别忘了’’）。指针p指向a，但是`sizeof(p)`的值却是4。这是因为`sizeof(p)`得到的是一个指针变量的字节数，相当于`sizeof(char*)`，而不是p所指的内存容量。C++/C语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。\n\n　　注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。如下示例中，不论数组a的容量是多少，`sizeof(a)`始终等于`sizeof(char *)`。\n\n## 指针参数是如何传递内存的\n\n　　如果函数的参数是一个指针，不要指望用该指针去申请动态内存。如下示例中，Test函数的语句`GetMemory(str, 200)`并没有使`str`获得期望的内存，`str`依旧是`NULL`，为什么？\n\n　　毛病出在函数`GetMemory`中。编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 `_p`，编译器使`_p=p`。如果函数体内的程序修改了`_p`的内容，就导致参数p的内容作相应的修改。这就是指针可以用作输出参数的原因。在本例中，`_p`申请了新的内存，只是把 `_p`所指的内存地址改变了，但是p丝毫未变。所以函数`GetMemory`并不能输出任何东西。事实上，每执行一次`GetMemory`就会泄露一块内存，因为没有用`free`释放内存。\n　　如果非得要用指针参数去申请内存，那么应该改用“指向指针的指针”，见示例：\n\n　　由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单，见示例：\n\n　　用函数返回值来传递动态内存这种方法虽然好用，但是常常有人把`return`语句用错了。这里强调不要用`return`语句返回指向“栈内存”的指针，因为该内存在函数结束时自动消亡，见示例：\n\n　　用调试器逐步跟踪`Test4`，发现执行`str = GetString`语句后`str`不再是`NULL`指针，但是`str`的内容不是`“hello world”`而是垃圾。\n　　如果把上述示例改写成如下示例，会怎么样？\n\n　　函数`Test5`运行虽然不会出错，但是函数`GetString2`的设计概念却是错误的。因为`GetString2`内的`“hello world”`是常量字符串，位于静态存储区，它在程序生命期内恒定不变。无论什么时候调用`GetString2`，它返回的始终是同一个“只读”的内存块。\n\n## 杜绝“野指针”\n\n　　“野指针”不是`NULL`指针，是指向“垃圾”内存的指针。人们一般不会错用`NULL`指针，因为用`if`语句很容易判断。但是“野指针”是很危险的，`if`语句对它不起作用。 “野指针”的成因主要有三种：\n\n　　(1). 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。例如：\n\n　　(2). 指针p被free或者delete之后，没有置为NULL，让人误以为p是个合法的指针。\n\n　　(3). 指针操作超越了变量的作用域范围。这种情况让人防不胜防，示例程序如下：\n\n　　函数`Test`在执行语句`p->Func()`时，对象a已经消失，而p是指向a的，所以p就成了“野指针”。但奇怪的是我运行这个程序时居然没有出错，这可能与编译器有关。\n\n## 有了malloc/free为什么还要new/delete\n\n　　`malloc`与`free`是C++/C语言的标准库函数，`new/delete`是C++的运算符。它们都可用于申请动态内存和释放内存。\n　　对于非内部数据类型的对象而言，光用`maloc/free`无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于`malloc/free`是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于`malloc/free`。\n　　因此C++语言需要一个能完成动态内存分配和初始化工作的运算符`new`，以及一个能完成清理与释放内存工作的运算符`delet`e。注意`new/delete`不是库函数。我们先看一看`malloc/free`和`new/delete`如何实现对象的动态内存管理，见示例：\n\n　　类`Obj`的函数`Initialize`模拟了构造函数的功能，函数`Destroy`模拟了析构函数的功能。函数`UseMallocFree`中，由于`malloc/free`不能执行构造函数与析构函数，必须调用成员函数`Initialize`和`Destroy`来完成初始化与清除工作。函数`UseNewDelete`则简单得多。\n　　所以我们不要企图用`malloc/free`来完成动态对象的内存管理，应该用`new/delete`。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言`malloc/free`和`new/delete`是等价的。\n　　既然`new/delete`的功能完全覆盖了`malloc/free`，为什么C++不把`malloc/free`淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用`malloc/free`管理动态内存。\n　　如果用`free`释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用`delete`释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以`new/delete`必须配对使用，`malloc/free`也一样。\n\n## 内存耗尽怎么办\n\n　　如果在申请动态内存时找不到足够大的内存块，`malloc`和`new`将返回`NULL`指针，宣告内存申请失败。通常有三种方式处理“内存耗尽”问题。\n　　(1). 判断指针是否为`NULL`，如果是则马上用`return`语句终止本函数。例如：\n\n　　(2). 判断指针是否为`NULL`，如果是则马上用`exit(1)`终止整个程序的运行。例如：\n\n　　(3). 为`new`和`malloc`设置异常处理函数。例如Visual C++可以用`_set_new_hander`函数为`new`设置用户自己定义的异常处理函数，也可以让`malloc`享用与`new`相同的异常处理函数。详细内容请参考C++使用手册。\n　　上述 (1)、(2) 方式使用最普遍。如果一个函数内有多处需要申请动态内存，那么方式 (1) 就显得力不从心（释放内存很麻烦），应该用方式 (2) 来处理。\n　　很多人不忍心用`exit(1)`，问：“不编写出错处理程序，让操作系统自己解决行不行？”\n　　不行。如果发生“内存耗尽”这样的事情，一般说来应用程序已经无药可救。如果不用`exit(1)` 把坏程序杀死，它可能会害死操作系统。道理如同：如果不把歹徒击毙，歹徒在老死之前会犯下更多的罪。\n　　有一个很重要的现象要告诉大家。对于32位以上的应用程序而言，无论怎样使用`malloc与new`，几乎不可能导致“内存耗尽”。对于32位以上的应用程序，“内存耗尽”错误处理程序毫无用处。这下可把Unix和Windows程序员们乐坏了：反正错误处理程序不起作用，我就不写了，省了很多麻烦。\n　　必须强调：不加错误处理将导致程序的质量很差，千万不可因小失大。\n\n## malloc/free的使用要点\n\n　　函数`malloc`的原型如下：\n\n　　用`malloc`申请一块长度为`length`的整数类型的内存，程序如下：\n\n　　我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。\n　　`* malloc`返回值的类型是`void*`，所以在调用`malloc`时要显式地进行类型转换，将`void *`转换成所需要的指针类型。\n　　`* malloc`函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。我们通常记不住`int`, `float`等数据类型的变量的确切字节数。例如`int`变量在16位系统下是2个字节，在32位下是4个字节；而`float`变量在16位系统下是4个字节，在32位下也是4个字节。最好用以下程序作一次测试：\n\n　　在`malloc`的“()”中使用`sizeof`运算符是良好的风格，但要当心有时我们会昏了头，写出 `p = malloc(sizeof(p))`这样的程序来。\n　　函数`free`的原型如下：\n\n　　为什么`free`函数不象`mallo`c函数那样复杂呢？这是因为指针`p`的类型以及它所指的内存的容量事先都是知道的，语句`free(p)`能正确地释放内存。如果`p`是`NULL`指针，那么`free`对`p`无论操作多少次都不会出问题。如果`p`不是`NULL`指针，那么`free`对`p`连续操作两次就会导致程序运行错误。\n\n## new/delete的使用要点\n\n　　运算符`new`使用起来要比函数`malloc`简单得多，例如：\n\n　　这是因为`new`内置了`sizeof`、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，`new`在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么`new`的语句也可以有多种形式。例如：\n\n　　如果用`new`创建对象数组，那么只能使用对象的无参数构造函数。例如：\n\n　　不能写成：\n\n　　在用`delete`释放对象数组时，留意不要丢了符号‘[]’。例如：\n\n　　后者有可能引起程序崩溃和内存泄漏。","slug":"内存分配方式","published":1,"date":"2017-09-30T09:07:10.410Z","updated":"2017-09-27T09:09:07.716Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj873gay400005kwrs8bv8636","content":"<p>内存管理是C++最令人切齿痛恨的问题，也是C++最有争议的问题，C++高手从中获得了更好的性能，更大的自由，C++菜鸟的收获则是一遍一遍的检查代码和对C++的痛恨，但内存管理在C++中无处不在，内存泄漏几乎在每个C++程序中都会发生，因此要想成为C++高手，内存管理一关是必须要过的，除非放弃C++，转到Java或者.NET，他们的内存管理基本是自动的，当然你也放弃了自由和对内存的支配权，还放弃了C++超绝的性能。<br>　　伟大的Bill Gates 曾经失言：</p>\n<blockquote>\n<p>　<em>640K ought to be enough for everybody</em> — Bill Gates 1981</p>\n</blockquote>\n<p>　　程序员们经常编写内存管理程序，往往提心吊胆。如果不想触雷，唯一的解决办法就是发现所有潜伏的地雷并且排除它们，躲是躲不了的。</p>\n<h2 id=\"内存分配方式\"><a href=\"#内存分配方式\" class=\"headerlink\" title=\"内存分配方式\"></a>内存分配方式</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>　　在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。<br>　　<strong>栈</strong>：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。<br>　　<strong>堆</strong>：就是那些由 <code>new</code>分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个<code>new</code>就要对应一个 <code>delete</code>。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。<br>　　<strong>自由存储区</strong>：就是那些由<code>malloc</code>等分配的内存块，他和堆是十分相似的，不过它是用<code>free</code>来结束自己的生命的。<br>　　<strong>全局/静态存储区</strong>：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。<br>　　<strong>常量存储区</strong>：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。</p>\n<h3 id=\"明确区分堆与栈\"><a href=\"#明确区分堆与栈\" class=\"headerlink\" title=\"明确区分堆与栈\"></a>明确区分堆与栈</h3><p>　　堆与栈的区分问题，似乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。<br>　　首先，我们举一个例子：</p>\n<p>　　这条短短的一句话就包含了堆与栈，看到<code>new</code>，我们首先就应该想到，我们分配了一块堆内存，那么指针<code>p</code>呢？他分配的是一块栈内存，所以这句话的意思就是：在栈内存中存放了一个指向一块堆内存的指针<code>p</code>。在程序会先确定在堆中分配内存的大小，然后调用<code>operator new</code>分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">00401028 push 14h</div><div class=\"line\">0040102A call operator new (00401060)</div><div class=\"line\">0040102F add esp,4</div><div class=\"line\">00401032 mov dword ptr [ebp-8],eax</div><div class=\"line\">00401035 mov eax,dword ptr [ebp-8]</div><div class=\"line\">00401038 mov dword ptr [ebp-4],eax</div></pre></td></tr></table></figure>\n<p>　　这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是<code>delete p</code>么？澳，错了，应该是<code>delete []p</code>，这是为了告诉编译器：我删除的是一个数组，编译器就会根据相应的<code>Cookie</code>信息去进行释放内存的工作。</p>\n<h3 id=\"堆和栈究竟有什么区别\"><a href=\"#堆和栈究竟有什么区别\" class=\"headerlink\" title=\"堆和栈究竟有什么区别\"></a>堆和栈究竟有什么区别</h3><p>　　好了，我们回到我们的主题：堆和栈究竟有什么区别？<br>　　主要的区别由以下几点：<br>　　(1). 管理方式不同<br>　　(2). 空间大小不同<br>　　(3). 能否产生碎片不同<br>　　(4). 生长方向不同<br>　　(5). 分配方式不同<br>　　(6). 分配效率不同<br>　　管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生<code>memory leak</code>。<br>　　空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：<br>　　打开工程，依次操作菜单如下<code>：Project-&gt;Setting-&gt;Link</code>，在<code>Category</code> 中选中<code>Output</code>，然后在<code>Reserve</code>中设定堆栈的最大值和<code>commit</code>。<br>　　注意：reserve最小值为4Byte；<code>commit</code>是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。<br>　　碎片问题：对于堆来讲，频繁的<code>new/delete</code>势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。<br>　　生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。<br>　　分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由<code>alloca</code>函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。<br>　　分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。<br>　　从这里我们可以看到，堆和栈相比，由于大量<code>new/delete</code>的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。<br>　　虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。<br>　　无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候<code>debug</code>可是相当困难的：）</p>\n<h2 id=\"控制C-的内存分配\"><a href=\"#控制C-的内存分配\" class=\"headerlink\" title=\"控制C++的内存分配\"></a>控制C++的内存分配</h2><p>　　在嵌入式系统中使用C++的一个常见问题是内存分配，即对<code>new</code> 和 <code>delete</code> 操作符的失控。<br>　　具有讽刺意味的是，问题的根源却是C++对内存的管理非常的容易而且安全。具体地说，当一个对象被消除时，它的析构函数能够安全的释放所分配的内存。<br>　　这当然是个好事情，但是这种使用的简单性使得程序员们过度使用<code>new</code> 和 <code>delete</code>，而不注意在嵌入式C++环境中的因果关系。并且，在嵌入式系统中，由于内存的限制，频繁的动态分配不定大小的内存会引起很大的问题以及堆破碎的风险。<br>　　作为忠告，保守的使用内存分配是嵌入式环境中的第一原则。<br>　　但当你必须要使用<code>new</code>和<code>delete</code>时，你不得不控制C++中的内存分配。你需要用一个全局的<code>new</code> 和<code>delete</code>来代替系统的内存分配符，并且一个类一个类的重载<code>new</code>和<code>delete</code>。<br>　　一个防止堆破碎的通用方法是从不同固定大小的内存持中分配不同类型的对象。对每个类重载<code>new</code> 和<code>delete</code>就提供了这样的控制。</p>\n<h3 id=\"重载全局的new和delete操作符\"><a href=\"#重载全局的new和delete操作符\" class=\"headerlink\" title=\"重载全局的new和delete操作符\"></a>重载全局的new和delete操作符</h3><p>　　可以很容易地重载new 和 delete 操作符，如下所示:</p>\n<p>　　这段代码可以代替默认的操作符来满足内存分配的请求。出于解释C++的目的，我们也可以直接调用<code>malloc()</code>和<code>free()</code>。<br>　　也可以对单个类的<code>new</code> 和 <code>delete</code>操作符重载。这是你能灵活的控制对象的内存分配。</p>\n<p>　　所有<code>TestClass</code> 对象的内存分配都采用这段代码。更进一步，任何从<code>TestClass</code> 继承的类也都采用这一方式，除非它自己也重载了<code>new</code> 和 <code>delete</code> 操作符。通过重载<code>new</code> 和 <code>delete</code> 操作符的方法，你可以自由地采用不同的分配策略，从不同的内存池中分配不同的类对象。</p>\n<h3 id=\"为单个的类重载new-和delete\"><a href=\"#为单个的类重载new-和delete\" class=\"headerlink\" title=\"为单个的类重载new[]和delete[]\"></a>为单个的类重载new[]和delete[]</h3><p>　　必须小心对象数组的分配。你可能希望调用到被你重载过的<code>new</code> 和 <code>delete</code> 操作符，但并不如此。内存的请求被定向到全局的<code>new[]</code>和<code>delete[]</code> 操作符，而这些内存来自于系统堆。<br>　　C++将对象数组的内存分配作为一个单独的操作，而不同于单个对象的内存分配。为了改变这种方式，你同样需要重载<code>new[]</code> 和 <code>delete[]</code>操作符。</p>\n<p>　　但是<strong>注意</strong>：对于多数C++的实现，<code>new[]</code>操作符中的个数参数是数组的大小加上额外的存储对象数目的一些字节。在你的内存分配机制重要考虑的这一点。你应该尽量避免分配对象数组，从而使你的内存分配策略简单。</p>\n<h2 id=\"常见的内存错误及其对策\"><a href=\"#常见的内存错误及其对策\" class=\"headerlink\" title=\"常见的内存错误及其对策\"></a>常见的内存错误及其对策</h2><p>　　发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。有时用户怒气冲冲地把你找来，程序却没有发生任何问题，你一走，错误又发作了。 常见的内存错误及其对策如下：</p>\n<ul>\n<li>内存分配未成功，却使用了它。编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为<code>NULL</code>。如果指针<code>p</code>是函数的参数，那么在函数的入口处用<code>assert(p!=NULL)</code>进行检查。如果是用<code>malloc</code>或<code>new</code>来申请内存，应该用<code>if(p==NULL)</code> 或<code>if(p!=NULL)</code>进行防错处理。</li>\n<li>内存分配虽然成功，但是尚未初始化就引用它。犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。</li>\n<li>内存分配成功并且已经初始化，但操作越过了内存的边界。例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在<code>for</code>循环语句中，循环次数很容易搞错，导致数组操作越界。</li>\n<li>忘记了释放内存，造成内存泄露。含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。动态内存的申请与释放必须配对，程序中<code>malloc</code>与<code>free</code>的使用次数一定要相同，否则肯定有错误（<code>new/delete</code>同理）。</li>\n<li>释放了内存却继续使用它。</li>\n</ul>\n<p>　　有三种情况：<br>　　(1). 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。<br>　　(2). 函数的<code>return</code>语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。<br>　　(3). 使用<code>free</code>或<code>delete</code>释放了内存后，没有将指针设置为<code>NULL</code>。<strong>导致产生“野指针”</strong>。<br>　　<strong>那么如何避免产生野指针呢</strong>？这里列出了5条规则，平常写程序时多注意一下，养成良好的习惯。</p>\n<blockquote>\n<p>规则1：用<code>malloc</code>或<code>new</code>申请内存之后，应该立即检查指针值是否为<code>NULL</code>。防止使用指针值为<code>NULL</code>的内存。<br>规则2：不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。<br>规则3：避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。<br>规则4：动态内存的申请与释放必须配对，防止内存泄漏。<br>规则5：用<code>free</code>或<code>delete</code>释放了内存之后，立即将指针设置为<code>NULL</code>，防止产生“野指针”。</p>\n</blockquote>\n<h2 id=\"针与数组的对比\"><a href=\"#针与数组的对比\" class=\"headerlink\" title=\"针与数组的对比\"></a>针与数组的对比</h2><p>　　C++/C程序中，指针和数组在不少地方可以相互替换着用，让人产生一种错觉，以为两者是等价的。<br>　　数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。<br>　　指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。<br>　　下面以字符串为例比较指针与数组的特性。</p>\n<h3 id=\"修改内容\"><a href=\"#修改内容\" class=\"headerlink\" title=\"修改内容\"></a>修改内容</h3><p>　　下面示例中，字符数组a的容量是6个字符，其内容为 hello。a的内容可以改变，如<code>a[0]= ‘X’</code>。指针p指向常量字符串“world”（位于静态存储区，内容为world），常量字符串的内容是不可以被修改的。从语法上看，编译器并不觉得语句<code>p[0]= ‘X’</code>有什么不妥，但是该语句企图修改常量字符串的内容而导致运行错误。</p>\n<h3 id=\"内容复制与比较\"><a href=\"#内容复制与比较\" class=\"headerlink\" title=\"内容复制与比较\"></a>内容复制与比较</h3><p>　　不能对数组名进行直接复制与比较。若想把数组a的内容复制给数组b，不能用语句 <code>b = a</code> ，否则将产生编译错误。应该用标准库函数<code>strcpy</code>进行复制。同理，比较b和a的内容是否相同，不能用<code>if(b==a)</code> 来判断，应该用标准库函数<code>strcmp</code>进行比较。<br>　　语句 <code>p = a</code> 并不能把a的内容复制指针p，而是把a的地址赋给了p。要想复制a的内容，可以先用库函数<code>malloc</code>为p申请一块容量为<code>strlen(a)+1</code>个字符的内存，再用<code>strcpy</code>进行字符串复制。同理，语句<code>if(p==a)</code> 比较的不是内容而是地址，应该用库函数<code>strcmp</code>来比较。</p>\n<h3 id=\"计算内存容量\"><a href=\"#计算内存容量\" class=\"headerlink\" title=\"计算内存容量\"></a>计算内存容量</h3><p>　　用运算符<code>sizeof</code>可以计算出数组的容量（字节数）。如下示例中，<code>sizeof(a)</code>的值是12（注意别忘了’’）。指针p指向a，但是<code>sizeof(p)</code>的值却是4。这是因为<code>sizeof(p)</code>得到的是一个指针变量的字节数，相当于<code>sizeof(char*)</code>，而不是p所指的内存容量。C++/C语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。</p>\n<p>　　注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。如下示例中，不论数组a的容量是多少，<code>sizeof(a)</code>始终等于<code>sizeof(char *)</code>。</p>\n<h2 id=\"指针参数是如何传递内存的\"><a href=\"#指针参数是如何传递内存的\" class=\"headerlink\" title=\"指针参数是如何传递内存的\"></a>指针参数是如何传递内存的</h2><p>　　如果函数的参数是一个指针，不要指望用该指针去申请动态内存。如下示例中，Test函数的语句<code>GetMemory(str, 200)</code>并没有使<code>str</code>获得期望的内存，<code>str</code>依旧是<code>NULL</code>，为什么？</p>\n<p>　　毛病出在函数<code>GetMemory</code>中。编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 <code>_p</code>，编译器使<code>_p=p</code>。如果函数体内的程序修改了<code>_p</code>的内容，就导致参数p的内容作相应的修改。这就是指针可以用作输出参数的原因。在本例中，<code>_p</code>申请了新的内存，只是把 <code>_p</code>所指的内存地址改变了，但是p丝毫未变。所以函数<code>GetMemory</code>并不能输出任何东西。事实上，每执行一次<code>GetMemory</code>就会泄露一块内存，因为没有用<code>free</code>释放内存。<br>　　如果非得要用指针参数去申请内存，那么应该改用“指向指针的指针”，见示例：</p>\n<p>　　由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单，见示例：</p>\n<p>　　用函数返回值来传递动态内存这种方法虽然好用，但是常常有人把<code>return</code>语句用错了。这里强调不要用<code>return</code>语句返回指向“栈内存”的指针，因为该内存在函数结束时自动消亡，见示例：</p>\n<p>　　用调试器逐步跟踪<code>Test4</code>，发现执行<code>str = GetString</code>语句后<code>str</code>不再是<code>NULL</code>指针，但是<code>str</code>的内容不是<code>“hello world”</code>而是垃圾。<br>　　如果把上述示例改写成如下示例，会怎么样？</p>\n<p>　　函数<code>Test5</code>运行虽然不会出错，但是函数<code>GetString2</code>的设计概念却是错误的。因为<code>GetString2</code>内的<code>“hello world”</code>是常量字符串，位于静态存储区，它在程序生命期内恒定不变。无论什么时候调用<code>GetString2</code>，它返回的始终是同一个“只读”的内存块。</p>\n<h2 id=\"杜绝“野指针”\"><a href=\"#杜绝“野指针”\" class=\"headerlink\" title=\"杜绝“野指针”\"></a>杜绝“野指针”</h2><p>　　“野指针”不是<code>NULL</code>指针，是指向“垃圾”内存的指针。人们一般不会错用<code>NULL</code>指针，因为用<code>if</code>语句很容易判断。但是“野指针”是很危险的，<code>if</code>语句对它不起作用。 “野指针”的成因主要有三种：</p>\n<p>　　(1). 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。例如：</p>\n<p>　　(2). 指针p被free或者delete之后，没有置为NULL，让人误以为p是个合法的指针。</p>\n<p>　　(3). 指针操作超越了变量的作用域范围。这种情况让人防不胜防，示例程序如下：</p>\n<p>　　函数<code>Test</code>在执行语句<code>p-&gt;Func()</code>时，对象a已经消失，而p是指向a的，所以p就成了“野指针”。但奇怪的是我运行这个程序时居然没有出错，这可能与编译器有关。</p>\n<h2 id=\"有了malloc-free为什么还要new-delete\"><a href=\"#有了malloc-free为什么还要new-delete\" class=\"headerlink\" title=\"有了malloc/free为什么还要new/delete\"></a>有了malloc/free为什么还要new/delete</h2><p>　　<code>malloc</code>与<code>free</code>是C++/C语言的标准库函数，<code>new/delete</code>是C++的运算符。它们都可用于申请动态内存和释放内存。<br>　　对于非内部数据类型的对象而言，光用<code>maloc/free</code>无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于<code>malloc/free</code>是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于<code>malloc/free</code>。<br>　　因此C++语言需要一个能完成动态内存分配和初始化工作的运算符<code>new</code>，以及一个能完成清理与释放内存工作的运算符<code>delet</code>e。注意<code>new/delete</code>不是库函数。我们先看一看<code>malloc/free</code>和<code>new/delete</code>如何实现对象的动态内存管理，见示例：</p>\n<p>　　类<code>Obj</code>的函数<code>Initialize</code>模拟了构造函数的功能，函数<code>Destroy</code>模拟了析构函数的功能。函数<code>UseMallocFree</code>中，由于<code>malloc/free</code>不能执行构造函数与析构函数，必须调用成员函数<code>Initialize</code>和<code>Destroy</code>来完成初始化与清除工作。函数<code>UseNewDelete</code>则简单得多。<br>　　所以我们不要企图用<code>malloc/free</code>来完成动态对象的内存管理，应该用<code>new/delete</code>。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言<code>malloc/free</code>和<code>new/delete</code>是等价的。<br>　　既然<code>new/delete</code>的功能完全覆盖了<code>malloc/free</code>，为什么C++不把<code>malloc/free</code>淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用<code>malloc/free</code>管理动态内存。<br>　　如果用<code>free</code>释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用<code>delete</code>释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以<code>new/delete</code>必须配对使用，<code>malloc/free</code>也一样。</p>\n<h2 id=\"内存耗尽怎么办\"><a href=\"#内存耗尽怎么办\" class=\"headerlink\" title=\"内存耗尽怎么办\"></a>内存耗尽怎么办</h2><p>　　如果在申请动态内存时找不到足够大的内存块，<code>malloc</code>和<code>new</code>将返回<code>NULL</code>指针，宣告内存申请失败。通常有三种方式处理“内存耗尽”问题。<br>　　(1). 判断指针是否为<code>NULL</code>，如果是则马上用<code>return</code>语句终止本函数。例如：</p>\n<p>　　(2). 判断指针是否为<code>NULL</code>，如果是则马上用<code>exit(1)</code>终止整个程序的运行。例如：</p>\n<p>　　(3). 为<code>new</code>和<code>malloc</code>设置异常处理函数。例如Visual C++可以用<code>_set_new_hander</code>函数为<code>new</code>设置用户自己定义的异常处理函数，也可以让<code>malloc</code>享用与<code>new</code>相同的异常处理函数。详细内容请参考C++使用手册。<br>　　上述 (1)、(2) 方式使用最普遍。如果一个函数内有多处需要申请动态内存，那么方式 (1) 就显得力不从心（释放内存很麻烦），应该用方式 (2) 来处理。<br>　　很多人不忍心用<code>exit(1)</code>，问：“不编写出错处理程序，让操作系统自己解决行不行？”<br>　　不行。如果发生“内存耗尽”这样的事情，一般说来应用程序已经无药可救。如果不用<code>exit(1)</code> 把坏程序杀死，它可能会害死操作系统。道理如同：如果不把歹徒击毙，歹徒在老死之前会犯下更多的罪。<br>　　有一个很重要的现象要告诉大家。对于32位以上的应用程序而言，无论怎样使用<code>malloc与new</code>，几乎不可能导致“内存耗尽”。对于32位以上的应用程序，“内存耗尽”错误处理程序毫无用处。这下可把Unix和Windows程序员们乐坏了：反正错误处理程序不起作用，我就不写了，省了很多麻烦。<br>　　必须强调：不加错误处理将导致程序的质量很差，千万不可因小失大。</p>\n<h2 id=\"malloc-free的使用要点\"><a href=\"#malloc-free的使用要点\" class=\"headerlink\" title=\"malloc/free的使用要点\"></a>malloc/free的使用要点</h2><p>　　函数<code>malloc</code>的原型如下：</p>\n<p>　　用<code>malloc</code>申请一块长度为<code>length</code>的整数类型的内存，程序如下：</p>\n<p>　　我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。<br>　　<code>* malloc</code>返回值的类型是<code>void*</code>，所以在调用<code>malloc</code>时要显式地进行类型转换，将<code>void *</code>转换成所需要的指针类型。<br>　　<code>* malloc</code>函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。我们通常记不住<code>int</code>, <code>float</code>等数据类型的变量的确切字节数。例如<code>int</code>变量在16位系统下是2个字节，在32位下是4个字节；而<code>float</code>变量在16位系统下是4个字节，在32位下也是4个字节。最好用以下程序作一次测试：</p>\n<p>　　在<code>malloc</code>的“()”中使用<code>sizeof</code>运算符是良好的风格，但要当心有时我们会昏了头，写出 <code>p = malloc(sizeof(p))</code>这样的程序来。<br>　　函数<code>free</code>的原型如下：</p>\n<p>　　为什么<code>free</code>函数不象<code>mallo</code>c函数那样复杂呢？这是因为指针<code>p</code>的类型以及它所指的内存的容量事先都是知道的，语句<code>free(p)</code>能正确地释放内存。如果<code>p</code>是<code>NULL</code>指针，那么<code>free</code>对<code>p</code>无论操作多少次都不会出问题。如果<code>p</code>不是<code>NULL</code>指针，那么<code>free</code>对<code>p</code>连续操作两次就会导致程序运行错误。</p>\n<h2 id=\"new-delete的使用要点\"><a href=\"#new-delete的使用要点\" class=\"headerlink\" title=\"new/delete的使用要点\"></a>new/delete的使用要点</h2><p>　　运算符<code>new</code>使用起来要比函数<code>malloc</code>简单得多，例如：</p>\n<p>　　这是因为<code>new</code>内置了<code>sizeof</code>、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，<code>new</code>在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么<code>new</code>的语句也可以有多种形式。例如：</p>\n<p>　　如果用<code>new</code>创建对象数组，那么只能使用对象的无参数构造函数。例如：</p>\n<p>　　不能写成：</p>\n<p>　　在用<code>delete</code>释放对象数组时，留意不要丢了符号‘[]’。例如：</p>\n<p>　　后者有可能引起程序崩溃和内存泄漏。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>内存管理是C++最令人切齿痛恨的问题，也是C++最有争议的问题，C++高手从中获得了更好的性能，更大的自由，C++菜鸟的收获则是一遍一遍的检查代码和对C++的痛恨，但内存管理在C++中无处不在，内存泄漏几乎在每个C++程序中都会发生，因此要想成为C++高手，内存管理一关是必须要过的，除非放弃C++，转到Java或者.NET，他们的内存管理基本是自动的，当然你也放弃了自由和对内存的支配权，还放弃了C++超绝的性能。<br>　　伟大的Bill Gates 曾经失言：</p>\n<blockquote>\n<p>　<em>640K ought to be enough for everybody</em> — Bill Gates 1981</p>\n</blockquote>\n<p>　　程序员们经常编写内存管理程序，往往提心吊胆。如果不想触雷，唯一的解决办法就是发现所有潜伏的地雷并且排除它们，躲是躲不了的。</p>\n<h2 id=\"内存分配方式\"><a href=\"#内存分配方式\" class=\"headerlink\" title=\"内存分配方式\"></a>内存分配方式</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>　　在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。<br>　　<strong>栈</strong>：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。<br>　　<strong>堆</strong>：就是那些由 <code>new</code>分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个<code>new</code>就要对应一个 <code>delete</code>。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。<br>　　<strong>自由存储区</strong>：就是那些由<code>malloc</code>等分配的内存块，他和堆是十分相似的，不过它是用<code>free</code>来结束自己的生命的。<br>　　<strong>全局/静态存储区</strong>：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。<br>　　<strong>常量存储区</strong>：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。</p>\n<h3 id=\"明确区分堆与栈\"><a href=\"#明确区分堆与栈\" class=\"headerlink\" title=\"明确区分堆与栈\"></a>明确区分堆与栈</h3><p>　　堆与栈的区分问题，似乎是一个永恒的话题，由此可见，初学者对此往往是混淆不清的，所以我决定拿他第一个开刀。<br>　　首先，我们举一个例子：</p>\n<p>　　这条短短的一句话就包含了堆与栈，看到<code>new</code>，我们首先就应该想到，我们分配了一块堆内存，那么指针<code>p</code>呢？他分配的是一块栈内存，所以这句话的意思就是：在栈内存中存放了一个指向一块堆内存的指针<code>p</code>。在程序会先确定在堆中分配内存的大小，然后调用<code>operator new</code>分配内存，然后返回这块内存的首地址，放入栈中，他在VC6下的汇编代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">00401028 push 14h</div><div class=\"line\">0040102A call operator new (00401060)</div><div class=\"line\">0040102F add esp,4</div><div class=\"line\">00401032 mov dword ptr [ebp-8],eax</div><div class=\"line\">00401035 mov eax,dword ptr [ebp-8]</div><div class=\"line\">00401038 mov dword ptr [ebp-4],eax</div></pre></td></tr></table></figure>\n<p>　　这里，我们为了简单并没有释放内存，那么该怎么去释放呢？是<code>delete p</code>么？澳，错了，应该是<code>delete []p</code>，这是为了告诉编译器：我删除的是一个数组，编译器就会根据相应的<code>Cookie</code>信息去进行释放内存的工作。</p>\n<h3 id=\"堆和栈究竟有什么区别\"><a href=\"#堆和栈究竟有什么区别\" class=\"headerlink\" title=\"堆和栈究竟有什么区别\"></a>堆和栈究竟有什么区别</h3><p>　　好了，我们回到我们的主题：堆和栈究竟有什么区别？<br>　　主要的区别由以下几点：<br>　　(1). 管理方式不同<br>　　(2). 空间大小不同<br>　　(3). 能否产生碎片不同<br>　　(4). 生长方向不同<br>　　(5). 分配方式不同<br>　　(6). 分配效率不同<br>　　管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生<code>memory leak</code>。<br>　　空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，例如，在VC6下面，默认的栈空间大小是1M（好像是，记不清楚了）。当然，我们可以修改：<br>　　打开工程，依次操作菜单如下<code>：Project-&gt;Setting-&gt;Link</code>，在<code>Category</code> 中选中<code>Output</code>，然后在<code>Reserve</code>中设定堆栈的最大值和<code>commit</code>。<br>　　注意：reserve最小值为4Byte；<code>commit</code>是保留在虚拟内存的页文件里面，它设置的较大会使栈开辟较大的值，可能增加内存的开销和启动时间。<br>　　碎片问题：对于堆来讲，频繁的<code>new/delete</code>势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。<br>　　生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。<br>　　分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由<code>alloca</code>函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。<br>　　分配效率：栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。<br>　　从这里我们可以看到，堆和栈相比，由于大量<code>new/delete</code>的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。<br>　　虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。<br>　　无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候<code>debug</code>可是相当困难的：）</p>\n<h2 id=\"控制C-的内存分配\"><a href=\"#控制C-的内存分配\" class=\"headerlink\" title=\"控制C++的内存分配\"></a>控制C++的内存分配</h2><p>　　在嵌入式系统中使用C++的一个常见问题是内存分配，即对<code>new</code> 和 <code>delete</code> 操作符的失控。<br>　　具有讽刺意味的是，问题的根源却是C++对内存的管理非常的容易而且安全。具体地说，当一个对象被消除时，它的析构函数能够安全的释放所分配的内存。<br>　　这当然是个好事情，但是这种使用的简单性使得程序员们过度使用<code>new</code> 和 <code>delete</code>，而不注意在嵌入式C++环境中的因果关系。并且，在嵌入式系统中，由于内存的限制，频繁的动态分配不定大小的内存会引起很大的问题以及堆破碎的风险。<br>　　作为忠告，保守的使用内存分配是嵌入式环境中的第一原则。<br>　　但当你必须要使用<code>new</code>和<code>delete</code>时，你不得不控制C++中的内存分配。你需要用一个全局的<code>new</code> 和<code>delete</code>来代替系统的内存分配符，并且一个类一个类的重载<code>new</code>和<code>delete</code>。<br>　　一个防止堆破碎的通用方法是从不同固定大小的内存持中分配不同类型的对象。对每个类重载<code>new</code> 和<code>delete</code>就提供了这样的控制。</p>\n<h3 id=\"重载全局的new和delete操作符\"><a href=\"#重载全局的new和delete操作符\" class=\"headerlink\" title=\"重载全局的new和delete操作符\"></a>重载全局的new和delete操作符</h3><p>　　可以很容易地重载new 和 delete 操作符，如下所示:</p>\n<p>　　这段代码可以代替默认的操作符来满足内存分配的请求。出于解释C++的目的，我们也可以直接调用<code>malloc()</code>和<code>free()</code>。<br>　　也可以对单个类的<code>new</code> 和 <code>delete</code>操作符重载。这是你能灵活的控制对象的内存分配。</p>\n<p>　　所有<code>TestClass</code> 对象的内存分配都采用这段代码。更进一步，任何从<code>TestClass</code> 继承的类也都采用这一方式，除非它自己也重载了<code>new</code> 和 <code>delete</code> 操作符。通过重载<code>new</code> 和 <code>delete</code> 操作符的方法，你可以自由地采用不同的分配策略，从不同的内存池中分配不同的类对象。</p>\n<h3 id=\"为单个的类重载new-和delete\"><a href=\"#为单个的类重载new-和delete\" class=\"headerlink\" title=\"为单个的类重载new[]和delete[]\"></a>为单个的类重载new[]和delete[]</h3><p>　　必须小心对象数组的分配。你可能希望调用到被你重载过的<code>new</code> 和 <code>delete</code> 操作符，但并不如此。内存的请求被定向到全局的<code>new[]</code>和<code>delete[]</code> 操作符，而这些内存来自于系统堆。<br>　　C++将对象数组的内存分配作为一个单独的操作，而不同于单个对象的内存分配。为了改变这种方式，你同样需要重载<code>new[]</code> 和 <code>delete[]</code>操作符。</p>\n<p>　　但是<strong>注意</strong>：对于多数C++的实现，<code>new[]</code>操作符中的个数参数是数组的大小加上额外的存储对象数目的一些字节。在你的内存分配机制重要考虑的这一点。你应该尽量避免分配对象数组，从而使你的内存分配策略简单。</p>\n<h2 id=\"常见的内存错误及其对策\"><a href=\"#常见的内存错误及其对策\" class=\"headerlink\" title=\"常见的内存错误及其对策\"></a>常见的内存错误及其对策</h2><p>　　发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。有时用户怒气冲冲地把你找来，程序却没有发生任何问题，你一走，错误又发作了。 常见的内存错误及其对策如下：</p>\n<ul>\n<li>内存分配未成功，却使用了它。编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为<code>NULL</code>。如果指针<code>p</code>是函数的参数，那么在函数的入口处用<code>assert(p!=NULL)</code>进行检查。如果是用<code>malloc</code>或<code>new</code>来申请内存，应该用<code>if(p==NULL)</code> 或<code>if(p!=NULL)</code>进行防错处理。</li>\n<li>内存分配虽然成功，但是尚未初始化就引用它。犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。</li>\n<li>内存分配成功并且已经初始化，但操作越过了内存的边界。例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在<code>for</code>循环语句中，循环次数很容易搞错，导致数组操作越界。</li>\n<li>忘记了释放内存，造成内存泄露。含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。动态内存的申请与释放必须配对，程序中<code>malloc</code>与<code>free</code>的使用次数一定要相同，否则肯定有错误（<code>new/delete</code>同理）。</li>\n<li>释放了内存却继续使用它。</li>\n</ul>\n<p>　　有三种情况：<br>　　(1). 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。<br>　　(2). 函数的<code>return</code>语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。<br>　　(3). 使用<code>free</code>或<code>delete</code>释放了内存后，没有将指针设置为<code>NULL</code>。<strong>导致产生“野指针”</strong>。<br>　　<strong>那么如何避免产生野指针呢</strong>？这里列出了5条规则，平常写程序时多注意一下，养成良好的习惯。</p>\n<blockquote>\n<p>规则1：用<code>malloc</code>或<code>new</code>申请内存之后，应该立即检查指针值是否为<code>NULL</code>。防止使用指针值为<code>NULL</code>的内存。<br>规则2：不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。<br>规则3：避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。<br>规则4：动态内存的申请与释放必须配对，防止内存泄漏。<br>规则5：用<code>free</code>或<code>delete</code>释放了内存之后，立即将指针设置为<code>NULL</code>，防止产生“野指针”。</p>\n</blockquote>\n<h2 id=\"针与数组的对比\"><a href=\"#针与数组的对比\" class=\"headerlink\" title=\"针与数组的对比\"></a>针与数组的对比</h2><p>　　C++/C程序中，指针和数组在不少地方可以相互替换着用，让人产生一种错觉，以为两者是等价的。<br>　　数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。<br>　　指针可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。<br>　　下面以字符串为例比较指针与数组的特性。</p>\n<h3 id=\"修改内容\"><a href=\"#修改内容\" class=\"headerlink\" title=\"修改内容\"></a>修改内容</h3><p>　　下面示例中，字符数组a的容量是6个字符，其内容为 hello。a的内容可以改变，如<code>a[0]= ‘X’</code>。指针p指向常量字符串“world”（位于静态存储区，内容为world），常量字符串的内容是不可以被修改的。从语法上看，编译器并不觉得语句<code>p[0]= ‘X’</code>有什么不妥，但是该语句企图修改常量字符串的内容而导致运行错误。</p>\n<h3 id=\"内容复制与比较\"><a href=\"#内容复制与比较\" class=\"headerlink\" title=\"内容复制与比较\"></a>内容复制与比较</h3><p>　　不能对数组名进行直接复制与比较。若想把数组a的内容复制给数组b，不能用语句 <code>b = a</code> ，否则将产生编译错误。应该用标准库函数<code>strcpy</code>进行复制。同理，比较b和a的内容是否相同，不能用<code>if(b==a)</code> 来判断，应该用标准库函数<code>strcmp</code>进行比较。<br>　　语句 <code>p = a</code> 并不能把a的内容复制指针p，而是把a的地址赋给了p。要想复制a的内容，可以先用库函数<code>malloc</code>为p申请一块容量为<code>strlen(a)+1</code>个字符的内存，再用<code>strcpy</code>进行字符串复制。同理，语句<code>if(p==a)</code> 比较的不是内容而是地址，应该用库函数<code>strcmp</code>来比较。</p>\n<h3 id=\"计算内存容量\"><a href=\"#计算内存容量\" class=\"headerlink\" title=\"计算内存容量\"></a>计算内存容量</h3><p>　　用运算符<code>sizeof</code>可以计算出数组的容量（字节数）。如下示例中，<code>sizeof(a)</code>的值是12（注意别忘了’’）。指针p指向a，但是<code>sizeof(p)</code>的值却是4。这是因为<code>sizeof(p)</code>得到的是一个指针变量的字节数，相当于<code>sizeof(char*)</code>，而不是p所指的内存容量。C++/C语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。</p>\n<p>　　注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。如下示例中，不论数组a的容量是多少，<code>sizeof(a)</code>始终等于<code>sizeof(char *)</code>。</p>\n<h2 id=\"指针参数是如何传递内存的\"><a href=\"#指针参数是如何传递内存的\" class=\"headerlink\" title=\"指针参数是如何传递内存的\"></a>指针参数是如何传递内存的</h2><p>　　如果函数的参数是一个指针，不要指望用该指针去申请动态内存。如下示例中，Test函数的语句<code>GetMemory(str, 200)</code>并没有使<code>str</code>获得期望的内存，<code>str</code>依旧是<code>NULL</code>，为什么？</p>\n<p>　　毛病出在函数<code>GetMemory</code>中。编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 <code>_p</code>，编译器使<code>_p=p</code>。如果函数体内的程序修改了<code>_p</code>的内容，就导致参数p的内容作相应的修改。这就是指针可以用作输出参数的原因。在本例中，<code>_p</code>申请了新的内存，只是把 <code>_p</code>所指的内存地址改变了，但是p丝毫未变。所以函数<code>GetMemory</code>并不能输出任何东西。事实上，每执行一次<code>GetMemory</code>就会泄露一块内存，因为没有用<code>free</code>释放内存。<br>　　如果非得要用指针参数去申请内存，那么应该改用“指向指针的指针”，见示例：</p>\n<p>　　由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单，见示例：</p>\n<p>　　用函数返回值来传递动态内存这种方法虽然好用，但是常常有人把<code>return</code>语句用错了。这里强调不要用<code>return</code>语句返回指向“栈内存”的指针，因为该内存在函数结束时自动消亡，见示例：</p>\n<p>　　用调试器逐步跟踪<code>Test4</code>，发现执行<code>str = GetString</code>语句后<code>str</code>不再是<code>NULL</code>指针，但是<code>str</code>的内容不是<code>“hello world”</code>而是垃圾。<br>　　如果把上述示例改写成如下示例，会怎么样？</p>\n<p>　　函数<code>Test5</code>运行虽然不会出错，但是函数<code>GetString2</code>的设计概念却是错误的。因为<code>GetString2</code>内的<code>“hello world”</code>是常量字符串，位于静态存储区，它在程序生命期内恒定不变。无论什么时候调用<code>GetString2</code>，它返回的始终是同一个“只读”的内存块。</p>\n<h2 id=\"杜绝“野指针”\"><a href=\"#杜绝“野指针”\" class=\"headerlink\" title=\"杜绝“野指针”\"></a>杜绝“野指针”</h2><p>　　“野指针”不是<code>NULL</code>指针，是指向“垃圾”内存的指针。人们一般不会错用<code>NULL</code>指针，因为用<code>if</code>语句很容易判断。但是“野指针”是很危险的，<code>if</code>语句对它不起作用。 “野指针”的成因主要有三种：</p>\n<p>　　(1). 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。例如：</p>\n<p>　　(2). 指针p被free或者delete之后，没有置为NULL，让人误以为p是个合法的指针。</p>\n<p>　　(3). 指针操作超越了变量的作用域范围。这种情况让人防不胜防，示例程序如下：</p>\n<p>　　函数<code>Test</code>在执行语句<code>p-&gt;Func()</code>时，对象a已经消失，而p是指向a的，所以p就成了“野指针”。但奇怪的是我运行这个程序时居然没有出错，这可能与编译器有关。</p>\n<h2 id=\"有了malloc-free为什么还要new-delete\"><a href=\"#有了malloc-free为什么还要new-delete\" class=\"headerlink\" title=\"有了malloc/free为什么还要new/delete\"></a>有了malloc/free为什么还要new/delete</h2><p>　　<code>malloc</code>与<code>free</code>是C++/C语言的标准库函数，<code>new/delete</code>是C++的运算符。它们都可用于申请动态内存和释放内存。<br>　　对于非内部数据类型的对象而言，光用<code>maloc/free</code>无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于<code>malloc/free</code>是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于<code>malloc/free</code>。<br>　　因此C++语言需要一个能完成动态内存分配和初始化工作的运算符<code>new</code>，以及一个能完成清理与释放内存工作的运算符<code>delet</code>e。注意<code>new/delete</code>不是库函数。我们先看一看<code>malloc/free</code>和<code>new/delete</code>如何实现对象的动态内存管理，见示例：</p>\n<p>　　类<code>Obj</code>的函数<code>Initialize</code>模拟了构造函数的功能，函数<code>Destroy</code>模拟了析构函数的功能。函数<code>UseMallocFree</code>中，由于<code>malloc/free</code>不能执行构造函数与析构函数，必须调用成员函数<code>Initialize</code>和<code>Destroy</code>来完成初始化与清除工作。函数<code>UseNewDelete</code>则简单得多。<br>　　所以我们不要企图用<code>malloc/free</code>来完成动态对象的内存管理，应该用<code>new/delete</code>。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言<code>malloc/free</code>和<code>new/delete</code>是等价的。<br>　　既然<code>new/delete</code>的功能完全覆盖了<code>malloc/free</code>，为什么C++不把<code>malloc/free</code>淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用<code>malloc/free</code>管理动态内存。<br>　　如果用<code>free</code>释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用<code>delete</code>释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以<code>new/delete</code>必须配对使用，<code>malloc/free</code>也一样。</p>\n<h2 id=\"内存耗尽怎么办\"><a href=\"#内存耗尽怎么办\" class=\"headerlink\" title=\"内存耗尽怎么办\"></a>内存耗尽怎么办</h2><p>　　如果在申请动态内存时找不到足够大的内存块，<code>malloc</code>和<code>new</code>将返回<code>NULL</code>指针，宣告内存申请失败。通常有三种方式处理“内存耗尽”问题。<br>　　(1). 判断指针是否为<code>NULL</code>，如果是则马上用<code>return</code>语句终止本函数。例如：</p>\n<p>　　(2). 判断指针是否为<code>NULL</code>，如果是则马上用<code>exit(1)</code>终止整个程序的运行。例如：</p>\n<p>　　(3). 为<code>new</code>和<code>malloc</code>设置异常处理函数。例如Visual C++可以用<code>_set_new_hander</code>函数为<code>new</code>设置用户自己定义的异常处理函数，也可以让<code>malloc</code>享用与<code>new</code>相同的异常处理函数。详细内容请参考C++使用手册。<br>　　上述 (1)、(2) 方式使用最普遍。如果一个函数内有多处需要申请动态内存，那么方式 (1) 就显得力不从心（释放内存很麻烦），应该用方式 (2) 来处理。<br>　　很多人不忍心用<code>exit(1)</code>，问：“不编写出错处理程序，让操作系统自己解决行不行？”<br>　　不行。如果发生“内存耗尽”这样的事情，一般说来应用程序已经无药可救。如果不用<code>exit(1)</code> 把坏程序杀死，它可能会害死操作系统。道理如同：如果不把歹徒击毙，歹徒在老死之前会犯下更多的罪。<br>　　有一个很重要的现象要告诉大家。对于32位以上的应用程序而言，无论怎样使用<code>malloc与new</code>，几乎不可能导致“内存耗尽”。对于32位以上的应用程序，“内存耗尽”错误处理程序毫无用处。这下可把Unix和Windows程序员们乐坏了：反正错误处理程序不起作用，我就不写了，省了很多麻烦。<br>　　必须强调：不加错误处理将导致程序的质量很差，千万不可因小失大。</p>\n<h2 id=\"malloc-free的使用要点\"><a href=\"#malloc-free的使用要点\" class=\"headerlink\" title=\"malloc/free的使用要点\"></a>malloc/free的使用要点</h2><p>　　函数<code>malloc</code>的原型如下：</p>\n<p>　　用<code>malloc</code>申请一块长度为<code>length</code>的整数类型的内存，程序如下：</p>\n<p>　　我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。<br>　　<code>* malloc</code>返回值的类型是<code>void*</code>，所以在调用<code>malloc</code>时要显式地进行类型转换，将<code>void *</code>转换成所需要的指针类型。<br>　　<code>* malloc</code>函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。我们通常记不住<code>int</code>, <code>float</code>等数据类型的变量的确切字节数。例如<code>int</code>变量在16位系统下是2个字节，在32位下是4个字节；而<code>float</code>变量在16位系统下是4个字节，在32位下也是4个字节。最好用以下程序作一次测试：</p>\n<p>　　在<code>malloc</code>的“()”中使用<code>sizeof</code>运算符是良好的风格，但要当心有时我们会昏了头，写出 <code>p = malloc(sizeof(p))</code>这样的程序来。<br>　　函数<code>free</code>的原型如下：</p>\n<p>　　为什么<code>free</code>函数不象<code>mallo</code>c函数那样复杂呢？这是因为指针<code>p</code>的类型以及它所指的内存的容量事先都是知道的，语句<code>free(p)</code>能正确地释放内存。如果<code>p</code>是<code>NULL</code>指针，那么<code>free</code>对<code>p</code>无论操作多少次都不会出问题。如果<code>p</code>不是<code>NULL</code>指针，那么<code>free</code>对<code>p</code>连续操作两次就会导致程序运行错误。</p>\n<h2 id=\"new-delete的使用要点\"><a href=\"#new-delete的使用要点\" class=\"headerlink\" title=\"new/delete的使用要点\"></a>new/delete的使用要点</h2><p>　　运算符<code>new</code>使用起来要比函数<code>malloc</code>简单得多，例如：</p>\n<p>　　这是因为<code>new</code>内置了<code>sizeof</code>、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，<code>new</code>在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么<code>new</code>的语句也可以有多种形式。例如：</p>\n<p>　　如果用<code>new</code>创建对象数组，那么只能使用对象的无参数构造函数。例如：</p>\n<p>　　不能写成：</p>\n<p>　　在用<code>delete</code>释放对象数组时，留意不要丢了符号‘[]’。例如：</p>\n<p>　　后者有可能引起程序崩溃和内存泄漏。</p>\n"},{"_content":"# 堆的概念\n\n堆实际上是一棵完全二叉树，其任何一非叶节点满足性质：\n Key[i]<=key[2i+1]&&Key[i]<=key[2i+2]或者Key[i]>=Key[2i+1]&&key>=key[2i+2]\n 即任何一非叶节点的关键字不大于或者不小于其左右孩子节点的关键字。\n 堆分为大顶堆和小顶堆，满足Key[i]>=Key[2i+1]&&key>=key[2i+2]称为大顶堆，满足 Key[i]<=key[2i+1]&&Key[i]<=key[2i+2]称为小顶堆。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。\n\n其中，大根堆和小根堆在海量数据的top N问题中，有着很好的时间复杂度。\n\n首先，先给出一个交换两个变量数值的函数。\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. void Swap(uint32_t* array, uint32_t i, uint32_t j)  \n2. {  \n3. ​    assert(array);  \n4. ​    uint32_t tmp = 0;  \n5. ​    tmp = array[j];  \n6. ​    array[j] = array[i];  \n7. ​    array[i] = tmp;  \n8. }  \n\n```\nvoid Swap(uint32_t* array, uint32_t i, uint32_t j)\n{\n\tassert(array);\n\tuint32_t tmp = 0;\n\ttmp = array[j];\n\tarray[j] = array[i];\n\tarray[i] = tmp;\n}\n```\n\n头文件包含\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. \\#include <stdlib.h>  \n2. \\#include <stdint.h>  \n3. \\#include <assert.h>  \n4. \\#include <string.h>  \n5. \\#include <stdio.h>  \n\n```\n#include <stdlib.h>\n#include <stdint.h>\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n```\n\n# 大根堆实现\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*大根堆调整*/  \n2. void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  \n3. {  \n4. ​    uint32_t leftChild = 0, rightChild = 0,  largest = 0;  \n5. ​    leftChild = 2*currentNode + 1;  \n6. ​    rightChild = 2*currentNode + 2;  \n7. ​    if(leftChild < heapSize && array[leftChild] > array[currentNode])  \n8. ​        largest = leftChild;  \n9. ​    else  \n10. ​        largest = currentNode;  \n11. ​    if(rightChild < heapSize && array[rightChild] > array[largest])  \n12. ​        largest = rightChild;  \n13. ​    if(largest != currentNode)  \n14. ​    {  \n15. ​        Swap(array, largest, currentNode);  \n16. ​        MaxHeapify(array, heapSize, largest);  \n17. ​    }  \n18. }  \n19.   \n20. /*构建大根堆*/  \n21. void MaxHeapCreat(uint32_t* array, uint32_t heapSize)  \n22. {  \n23. ​    int i = 0;  \n24. ​    for(i = heapSize/2; i >= 0; i--)  \n25. ​    {  \n26. ​        MaxHeapify(array, heapSize, i);  \n27. ​    }  \n28. }  \n\n```\n/*大根堆调整*/\nvoid MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)\n{\n\tuint32_t leftChild = 0, rightChild = 0,  largest = 0;\n\tleftChild = 2*currentNode + 1;\n\trightChild = 2*currentNode + 2;\n\tif(leftChild < heapSize && array[leftChild] > array[currentNode])\n\t\tlargest = leftChild;\n\telse\n\t\tlargest = currentNode;\n\tif(rightChild < heapSize && array[rightChild] > array[largest])\n\t\tlargest = rightChild;\n\tif(largest != currentNode)\n\t{\n\t\tSwap(array, largest, currentNode);\n\t\tMaxHeapify(array, heapSize, largest);\n\t}\n}\n\n/*构建大根堆*/\nvoid MaxHeapCreat(uint32_t* array, uint32_t heapSize)\n{\n\tint i = 0;\n\tfor(i = heapSize/2; i >= 0; i--)\n\t{\n\t\tMaxHeapify(array, heapSize, i);\n\t}\n}\n```\n\n# 小根堆实现\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*小根堆调整*/  \n2. void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  \n3. {  \n4. ​    uint32_t leftChild = 0, rightChild = 0,  minimum = 0;  \n5. ​    leftChild = 2*currentNode + 1;  \n6. ​    rightChild = 2*currentNode + 2;  \n7. ​    if(leftChild < heapSize && array[leftChild] < array[currentNode])  \n8. ​        minimum = leftChild;  \n9. ​    else  \n10. ​        minimum = currentNode;  \n11. ​    if(rightChild < heapSize && array[rightChild] < array[minimum])  \n12. ​        minimum = rightChild;  \n13. ​    if(minimum != currentNode)  \n14. ​    {  \n15. ​        Swap(array, minimum, currentNode);  \n16. ​        MinHeapify(array, heapSize, minimum);  \n17. ​    }  \n18. }  \n19. /*构建小根堆*/  \n20. void MinHeapCreat(uint32_t* array, uint32_t heapSize)  \n21. {  \n22. ​    int i = 0;  \n23. ​    for(i = heapSize/2; i >= 0; i--)  \n24. ​    {  \n25. ​        MinHeapify(array, heapSize, i);  \n26. ​    }  \n27. }  \n\n```\n/*小根堆调整*/\nvoid MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)\n{\n\tuint32_t leftChild = 0, rightChild = 0,  minimum = 0;\n\tleftChild = 2*currentNode + 1;\n\trightChild = 2*currentNode + 2;\n\tif(leftChild < heapSize && array[leftChild] < array[currentNode])\n\t\tminimum = leftChild;\n\telse\n\t\tminimum = currentNode;\n\tif(rightChild < heapSize && array[rightChild] < array[minimum])\n\t\tminimum = rightChild;\n\tif(minimum != currentNode)\n\t{\n\t\tSwap(array, minimum, currentNode);\n\t\tMinHeapify(array, heapSize, minimum);\n\t}\n}\n/*构建小根堆*/\nvoid MinHeapCreat(uint32_t* array, uint32_t heapSize)\n{\n\tint i = 0;\n\tfor(i = heapSize/2; i >= 0; i--)\n\t{\n\t\tMinHeapify(array, heapSize, i);\n\t}\n}\n```\n\n \n\n# top N问题\n\n利用小根堆解决获取大量数据中最大的N个值，先构建一个拥有N个元素的小根堆。然后，将其余的元素插入到小根堆即可。插入方法如下：\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*maintain the top N numbers*/  \n2. void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  \n3. {  \n4. ​    if(elem > array[0])  \n5. ​    {  \n6. ​        array[0] = elem;  \n7. ​        MinHeapify(array, heapSize, 0);  \n8. ​    }  \n9. }  \n\n```\n/*maintain the top N numbers*/\nvoid MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)\n{\n\tif(elem > array[0])\n\t{\n\t\tarray[0] = elem;\n\t\tMinHeapify(array, heapSize, 0);\n\t}\n}\n```\n\n 利用大根堆解决获取大量数据中最小的N个值，先构建一个拥有N个元素的大根堆。然后，将其余的元素插入到大根堆即可。插入方法如下：\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*maintain the low N numbers*/  \n2. void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  \n3. {  \n4. ​    if(elem < array[0])  \n5. ​    {  \n6. ​        array[0] = elem;  \n7. ​        MaxHeapify(array, heapSize, 0);  \n8. ​    }  \n9. }  \n\n```\n/*maintain the low N numbers*/\nvoid MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)\n{\n\tif(elem < array[0])\n\t{\n\t\tarray[0] = elem;\n\t\tMaxHeapify(array, heapSize, 0);\n\t}\n}\n```\n\n# 时间复杂度分析\n\n堆调整一次的时间复杂度是O(logN)。所以，通过堆来解决top N 问题的时间复杂度是O(nlogN).\n\n其中，n为数据的个数,N为堆维护的数据的个数。\n\n \n\n# 测试程序\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. int main()  \n2. {  \n3. ​    int i = 0, heapSize = 10;  \n4. ​    uint32_t array[] = {2,20,13,18,15,8,3,5,4,25};  \n5. ​    uint32_t minelem = 10, maxelem = 1;  \n6.   \n7. /*build min heap and test insert*/  \n8. ​    MinHeapCreat(array, heapSize);    \n9. ​    printf(\"Output the MinHeap:\\n\");    \n10. ​    for(i = 0; i < heapSize; i++)    \n11. ​    {    \n12. ​        printf(\"%d\\t\", array[i]);    \n13. ​    }    \n14. ​    MinInsert(array, heapSize, minelem);   \n15. ​    printf(\"\\nOutput insert elem %d:\\n\",minelem);  \n16. ​    for(i = 0; i < heapSize; i++)  \n17. ​    {  \n18. ​        printf(\"%d\\t\", array[i]);  \n19. ​    }  \n20. ​    printf(\"\\n\");  \n21. /*build max heap and test insert*/  \n22. ​    MaxHeapCreat(array, heapSize);      \n23. ​    printf(\"Output the MaxHeap:\\n\");      \n24. ​    for(i = 0; i < heapSize; i++)      \n25. ​    {      \n26. ​        printf(\"%d\\t\", array[i]);      \n27. ​    }      \n28. ​    MaxInsert(array, heapSize,maxelem);   \n29. ​    printf(\"\\nOutput insert elem %d:\\n\",maxelem);      \n30. ​    for(i = 0; i < heapSize; i++)      \n31. ​    {      \n32. ​        printf(\"%d\\t\", array[i]);      \n33. ​    }  \n34. ​    printf(\"\\n\");   \n35. }  ","source":"_posts/小根堆.md","raw":"# 堆的概念\n\n堆实际上是一棵完全二叉树，其任何一非叶节点满足性质：\n Key[i]<=key[2i+1]&&Key[i]<=key[2i+2]或者Key[i]>=Key[2i+1]&&key>=key[2i+2]\n 即任何一非叶节点的关键字不大于或者不小于其左右孩子节点的关键字。\n 堆分为大顶堆和小顶堆，满足Key[i]>=Key[2i+1]&&key>=key[2i+2]称为大顶堆，满足 Key[i]<=key[2i+1]&&Key[i]<=key[2i+2]称为小顶堆。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。\n\n其中，大根堆和小根堆在海量数据的top N问题中，有着很好的时间复杂度。\n\n首先，先给出一个交换两个变量数值的函数。\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. void Swap(uint32_t* array, uint32_t i, uint32_t j)  \n2. {  \n3. ​    assert(array);  \n4. ​    uint32_t tmp = 0;  \n5. ​    tmp = array[j];  \n6. ​    array[j] = array[i];  \n7. ​    array[i] = tmp;  \n8. }  \n\n```\nvoid Swap(uint32_t* array, uint32_t i, uint32_t j)\n{\n\tassert(array);\n\tuint32_t tmp = 0;\n\ttmp = array[j];\n\tarray[j] = array[i];\n\tarray[i] = tmp;\n}\n```\n\n头文件包含\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. \\#include <stdlib.h>  \n2. \\#include <stdint.h>  \n3. \\#include <assert.h>  \n4. \\#include <string.h>  \n5. \\#include <stdio.h>  \n\n```\n#include <stdlib.h>\n#include <stdint.h>\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n```\n\n# 大根堆实现\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*大根堆调整*/  \n2. void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  \n3. {  \n4. ​    uint32_t leftChild = 0, rightChild = 0,  largest = 0;  \n5. ​    leftChild = 2*currentNode + 1;  \n6. ​    rightChild = 2*currentNode + 2;  \n7. ​    if(leftChild < heapSize && array[leftChild] > array[currentNode])  \n8. ​        largest = leftChild;  \n9. ​    else  \n10. ​        largest = currentNode;  \n11. ​    if(rightChild < heapSize && array[rightChild] > array[largest])  \n12. ​        largest = rightChild;  \n13. ​    if(largest != currentNode)  \n14. ​    {  \n15. ​        Swap(array, largest, currentNode);  \n16. ​        MaxHeapify(array, heapSize, largest);  \n17. ​    }  \n18. }  \n19.   \n20. /*构建大根堆*/  \n21. void MaxHeapCreat(uint32_t* array, uint32_t heapSize)  \n22. {  \n23. ​    int i = 0;  \n24. ​    for(i = heapSize/2; i >= 0; i--)  \n25. ​    {  \n26. ​        MaxHeapify(array, heapSize, i);  \n27. ​    }  \n28. }  \n\n```\n/*大根堆调整*/\nvoid MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)\n{\n\tuint32_t leftChild = 0, rightChild = 0,  largest = 0;\n\tleftChild = 2*currentNode + 1;\n\trightChild = 2*currentNode + 2;\n\tif(leftChild < heapSize && array[leftChild] > array[currentNode])\n\t\tlargest = leftChild;\n\telse\n\t\tlargest = currentNode;\n\tif(rightChild < heapSize && array[rightChild] > array[largest])\n\t\tlargest = rightChild;\n\tif(largest != currentNode)\n\t{\n\t\tSwap(array, largest, currentNode);\n\t\tMaxHeapify(array, heapSize, largest);\n\t}\n}\n\n/*构建大根堆*/\nvoid MaxHeapCreat(uint32_t* array, uint32_t heapSize)\n{\n\tint i = 0;\n\tfor(i = heapSize/2; i >= 0; i--)\n\t{\n\t\tMaxHeapify(array, heapSize, i);\n\t}\n}\n```\n\n# 小根堆实现\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*小根堆调整*/  \n2. void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  \n3. {  \n4. ​    uint32_t leftChild = 0, rightChild = 0,  minimum = 0;  \n5. ​    leftChild = 2*currentNode + 1;  \n6. ​    rightChild = 2*currentNode + 2;  \n7. ​    if(leftChild < heapSize && array[leftChild] < array[currentNode])  \n8. ​        minimum = leftChild;  \n9. ​    else  \n10. ​        minimum = currentNode;  \n11. ​    if(rightChild < heapSize && array[rightChild] < array[minimum])  \n12. ​        minimum = rightChild;  \n13. ​    if(minimum != currentNode)  \n14. ​    {  \n15. ​        Swap(array, minimum, currentNode);  \n16. ​        MinHeapify(array, heapSize, minimum);  \n17. ​    }  \n18. }  \n19. /*构建小根堆*/  \n20. void MinHeapCreat(uint32_t* array, uint32_t heapSize)  \n21. {  \n22. ​    int i = 0;  \n23. ​    for(i = heapSize/2; i >= 0; i--)  \n24. ​    {  \n25. ​        MinHeapify(array, heapSize, i);  \n26. ​    }  \n27. }  \n\n```\n/*小根堆调整*/\nvoid MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)\n{\n\tuint32_t leftChild = 0, rightChild = 0,  minimum = 0;\n\tleftChild = 2*currentNode + 1;\n\trightChild = 2*currentNode + 2;\n\tif(leftChild < heapSize && array[leftChild] < array[currentNode])\n\t\tminimum = leftChild;\n\telse\n\t\tminimum = currentNode;\n\tif(rightChild < heapSize && array[rightChild] < array[minimum])\n\t\tminimum = rightChild;\n\tif(minimum != currentNode)\n\t{\n\t\tSwap(array, minimum, currentNode);\n\t\tMinHeapify(array, heapSize, minimum);\n\t}\n}\n/*构建小根堆*/\nvoid MinHeapCreat(uint32_t* array, uint32_t heapSize)\n{\n\tint i = 0;\n\tfor(i = heapSize/2; i >= 0; i--)\n\t{\n\t\tMinHeapify(array, heapSize, i);\n\t}\n}\n```\n\n \n\n# top N问题\n\n利用小根堆解决获取大量数据中最大的N个值，先构建一个拥有N个元素的小根堆。然后，将其余的元素插入到小根堆即可。插入方法如下：\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*maintain the top N numbers*/  \n2. void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  \n3. {  \n4. ​    if(elem > array[0])  \n5. ​    {  \n6. ​        array[0] = elem;  \n7. ​        MinHeapify(array, heapSize, 0);  \n8. ​    }  \n9. }  \n\n```\n/*maintain the top N numbers*/\nvoid MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)\n{\n\tif(elem > array[0])\n\t{\n\t\tarray[0] = elem;\n\t\tMinHeapify(array, heapSize, 0);\n\t}\n}\n```\n\n 利用大根堆解决获取大量数据中最小的N个值，先构建一个拥有N个元素的大根堆。然后，将其余的元素插入到大根堆即可。插入方法如下：\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. /*maintain the low N numbers*/  \n2. void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  \n3. {  \n4. ​    if(elem < array[0])  \n5. ​    {  \n6. ​        array[0] = elem;  \n7. ​        MaxHeapify(array, heapSize, 0);  \n8. ​    }  \n9. }  \n\n```\n/*maintain the low N numbers*/\nvoid MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)\n{\n\tif(elem < array[0])\n\t{\n\t\tarray[0] = elem;\n\t\tMaxHeapify(array, heapSize, 0);\n\t}\n}\n```\n\n# 时间复杂度分析\n\n堆调整一次的时间复杂度是O(logN)。所以，通过堆来解决top N 问题的时间复杂度是O(nlogN).\n\n其中，n为数据的个数,N为堆维护的数据的个数。\n\n \n\n# 测试程序\n\n**[cpp]** [view plain](http://blog.csdn.net/pngynghay/article/details/22052737#) [copy](http://blog.csdn.net/pngynghay/article/details/22052737#) [print](http://blog.csdn.net/pngynghay/article/details/22052737#)[?](http://blog.csdn.net/pngynghay/article/details/22052737#)\n\n1. int main()  \n2. {  \n3. ​    int i = 0, heapSize = 10;  \n4. ​    uint32_t array[] = {2,20,13,18,15,8,3,5,4,25};  \n5. ​    uint32_t minelem = 10, maxelem = 1;  \n6.   \n7. /*build min heap and test insert*/  \n8. ​    MinHeapCreat(array, heapSize);    \n9. ​    printf(\"Output the MinHeap:\\n\");    \n10. ​    for(i = 0; i < heapSize; i++)    \n11. ​    {    \n12. ​        printf(\"%d\\t\", array[i]);    \n13. ​    }    \n14. ​    MinInsert(array, heapSize, minelem);   \n15. ​    printf(\"\\nOutput insert elem %d:\\n\",minelem);  \n16. ​    for(i = 0; i < heapSize; i++)  \n17. ​    {  \n18. ​        printf(\"%d\\t\", array[i]);  \n19. ​    }  \n20. ​    printf(\"\\n\");  \n21. /*build max heap and test insert*/  \n22. ​    MaxHeapCreat(array, heapSize);      \n23. ​    printf(\"Output the MaxHeap:\\n\");      \n24. ​    for(i = 0; i < heapSize; i++)      \n25. ​    {      \n26. ​        printf(\"%d\\t\", array[i]);      \n27. ​    }      \n28. ​    MaxInsert(array, heapSize,maxelem);   \n29. ​    printf(\"\\nOutput insert elem %d:\\n\",maxelem);      \n30. ​    for(i = 0; i < heapSize; i++)      \n31. ​    {      \n32. ​        printf(\"%d\\t\", array[i]);      \n33. ​    }  \n34. ​    printf(\"\\n\");   \n35. }  ","slug":"小根堆","published":1,"date":"2017-09-30T09:07:10.412Z","updated":"2017-09-28T03:44:50.469Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj873gayn00015kwrx1izal40","content":"<h1 id=\"堆的概念\"><a href=\"#堆的概念\" class=\"headerlink\" title=\"堆的概念\"></a>堆的概念</h1><p>堆实际上是一棵完全二叉树，其任何一非叶节点满足性质：<br> Key[i]&lt;=key[2i+1]&amp;&amp;Key[i]&lt;=key[2i+2]或者Key[i]&gt;=Key[2i+1]&amp;&amp;key&gt;=key[2i+2]<br> 即任何一非叶节点的关键字不大于或者不小于其左右孩子节点的关键字。<br> 堆分为大顶堆和小顶堆，满足Key[i]&gt;=Key[2i+1]&amp;&amp;key&gt;=key[2i+2]称为大顶堆，满足 Key[i]&lt;=key[2i+1]&amp;&amp;Key[i]&lt;=key[2i+2]称为小顶堆。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。</p>\n<p>其中，大根堆和小根堆在海量数据的top N问题中，有着很好的时间复杂度。</p>\n<p>首先，先给出一个交换两个变量数值的函数。</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>void Swap(uint32_t* array, uint32_t i, uint32_t j)  </li>\n<li>{  </li>\n<li>​    assert(array);  </li>\n<li>​    uint32_t tmp = 0;  </li>\n<li>​    tmp = array[j];  </li>\n<li>​    array[j] = array[i];  </li>\n<li>​    array[i] = tmp;  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">void Swap(uint32_t* array, uint32_t i, uint32_t j)</div><div class=\"line\">&#123;</div><div class=\"line\">\tassert(array);</div><div class=\"line\">\tuint32_t tmp = 0;</div><div class=\"line\">\ttmp = array[j];</div><div class=\"line\">\tarray[j] = array[i];</div><div class=\"line\">\tarray[i] = tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>头文件包含</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>#include <stdlib.h>  </stdlib.h></li>\n<li>#include <stdint.h>  </stdint.h></li>\n<li>#include <assert.h>  </assert.h></li>\n<li>#include <string.h>  </string.h></li>\n<li>#include <stdio.h>  </stdio.h></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;stdint.h&gt;</div><div class=\"line\">#include &lt;assert.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">#include &lt;stdio.h&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"大根堆实现\"><a href=\"#大根堆实现\" class=\"headerlink\" title=\"大根堆实现\"></a>大根堆实现</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>大根堆调整</em>/  </li>\n<li>void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  </li>\n<li>{  </li>\n<li>​    uint32_t leftChild = 0, rightChild = 0,  largest = 0;  </li>\n<li>​    leftChild = 2*currentNode + 1;  </li>\n<li>​    rightChild = 2*currentNode + 2;  </li>\n<li>​    if(leftChild &lt; heapSize &amp;&amp; array[leftChild] &gt; array[currentNode])  </li>\n<li>​        largest = leftChild;  </li>\n<li>​    else  </li>\n<li>​        largest = currentNode;  </li>\n<li>​    if(rightChild &lt; heapSize &amp;&amp; array[rightChild] &gt; array[largest])  </li>\n<li>​        largest = rightChild;  </li>\n<li>​    if(largest != currentNode)  </li>\n<li>​    {  </li>\n<li>​        Swap(array, largest, currentNode);  </li>\n<li>​        MaxHeapify(array, heapSize, largest);  </li>\n<li>​    }  </li>\n<li>}  </li>\n<li></li>\n<li>/<em>构建大根堆</em>/  </li>\n<li>void MaxHeapCreat(uint32_t* array, uint32_t heapSize)  </li>\n<li>{  </li>\n<li>​    int i = 0;  </li>\n<li>​    for(i = heapSize/2; i &gt;= 0; i–)  </li>\n<li>​    {  </li>\n<li>​        MaxHeapify(array, heapSize, i);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*大根堆调整*/</div><div class=\"line\">void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)</div><div class=\"line\">&#123;</div><div class=\"line\">\tuint32_t leftChild = 0, rightChild = 0,  largest = 0;</div><div class=\"line\">\tleftChild = 2*currentNode + 1;</div><div class=\"line\">\trightChild = 2*currentNode + 2;</div><div class=\"line\">\tif(leftChild &lt; heapSize &amp;&amp; array[leftChild] &gt; array[currentNode])</div><div class=\"line\">\t\tlargest = leftChild;</div><div class=\"line\">\telse</div><div class=\"line\">\t\tlargest = currentNode;</div><div class=\"line\">\tif(rightChild &lt; heapSize &amp;&amp; array[rightChild] &gt; array[largest])</div><div class=\"line\">\t\tlargest = rightChild;</div><div class=\"line\">\tif(largest != currentNode)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSwap(array, largest, currentNode);</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, largest);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*构建大根堆*/</div><div class=\"line\">void MaxHeapCreat(uint32_t* array, uint32_t heapSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">\tfor(i = heapSize/2; i &gt;= 0; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"小根堆实现\"><a href=\"#小根堆实现\" class=\"headerlink\" title=\"小根堆实现\"></a>小根堆实现</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>小根堆调整</em>/  </li>\n<li>void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  </li>\n<li>{  </li>\n<li>​    uint32_t leftChild = 0, rightChild = 0,  minimum = 0;  </li>\n<li>​    leftChild = 2*currentNode + 1;  </li>\n<li>​    rightChild = 2*currentNode + 2;  </li>\n<li>​    if(leftChild &lt; heapSize &amp;&amp; array[leftChild] &lt; array[currentNode])  </li>\n<li>​        minimum = leftChild;  </li>\n<li>​    else  </li>\n<li>​        minimum = currentNode;  </li>\n<li>​    if(rightChild &lt; heapSize &amp;&amp; array[rightChild] &lt; array[minimum])  </li>\n<li>​        minimum = rightChild;  </li>\n<li>​    if(minimum != currentNode)  </li>\n<li>​    {  </li>\n<li>​        Swap(array, minimum, currentNode);  </li>\n<li>​        MinHeapify(array, heapSize, minimum);  </li>\n<li>​    }  </li>\n<li>}  </li>\n<li>/<em>构建小根堆</em>/  </li>\n<li>void MinHeapCreat(uint32_t* array, uint32_t heapSize)  </li>\n<li>{  </li>\n<li>​    int i = 0;  </li>\n<li>​    for(i = heapSize/2; i &gt;= 0; i–)  </li>\n<li>​    {  </li>\n<li>​        MinHeapify(array, heapSize, i);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*小根堆调整*/</div><div class=\"line\">void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)</div><div class=\"line\">&#123;</div><div class=\"line\">\tuint32_t leftChild = 0, rightChild = 0,  minimum = 0;</div><div class=\"line\">\tleftChild = 2*currentNode + 1;</div><div class=\"line\">\trightChild = 2*currentNode + 2;</div><div class=\"line\">\tif(leftChild &lt; heapSize &amp;&amp; array[leftChild] &lt; array[currentNode])</div><div class=\"line\">\t\tminimum = leftChild;</div><div class=\"line\">\telse</div><div class=\"line\">\t\tminimum = currentNode;</div><div class=\"line\">\tif(rightChild &lt; heapSize &amp;&amp; array[rightChild] &lt; array[minimum])</div><div class=\"line\">\t\tminimum = rightChild;</div><div class=\"line\">\tif(minimum != currentNode)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSwap(array, minimum, currentNode);</div><div class=\"line\">\t\tMinHeapify(array, heapSize, minimum);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*构建小根堆*/</div><div class=\"line\">void MinHeapCreat(uint32_t* array, uint32_t heapSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">\tfor(i = heapSize/2; i &gt;= 0; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tMinHeapify(array, heapSize, i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"top-N问题\"><a href=\"#top-N问题\" class=\"headerlink\" title=\"top N问题\"></a>top N问题</h1><p>利用小根堆解决获取大量数据中最大的N个值，先构建一个拥有N个元素的小根堆。然后，将其余的元素插入到小根堆即可。插入方法如下：</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>maintain the top N numbers</em>/  </li>\n<li>void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  </li>\n<li>{  </li>\n<li>​    if(elem &gt; array[0])  </li>\n<li>​    {  </li>\n<li>​        array[0] = elem;  </li>\n<li>​        MinHeapify(array, heapSize, 0);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*maintain the top N numbers*/</div><div class=\"line\">void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif(elem &gt; array[0])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tarray[0] = elem;</div><div class=\"line\">\t\tMinHeapify(array, heapSize, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 利用大根堆解决获取大量数据中最小的N个值，先构建一个拥有N个元素的大根堆。然后，将其余的元素插入到大根堆即可。插入方法如下：</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>maintain the low N numbers</em>/  </li>\n<li>void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  </li>\n<li>{  </li>\n<li>​    if(elem &lt; array[0])  </li>\n<li>​    {  </li>\n<li>​        array[0] = elem;  </li>\n<li>​        MaxHeapify(array, heapSize, 0);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*maintain the low N numbers*/</div><div class=\"line\">void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif(elem &lt; array[0])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tarray[0] = elem;</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h1><p>堆调整一次的时间复杂度是O(logN)。所以，通过堆来解决top N 问题的时间复杂度是O(nlogN).</p>\n<p>其中，n为数据的个数,N为堆维护的数据的个数。</p>\n<h1 id=\"测试程序\"><a href=\"#测试程序\" class=\"headerlink\" title=\"测试程序\"></a>测试程序</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>int main()  </li>\n<li>{  </li>\n<li>​    int i = 0, heapSize = 10;  </li>\n<li>​    uint32_t array[] = {2,20,13,18,15,8,3,5,4,25};  </li>\n<li>​    uint32_t minelem = 10, maxelem = 1;  </li>\n<li></li>\n<li>/<em>build min heap and test insert</em>/  </li>\n<li>​    MinHeapCreat(array, heapSize);    </li>\n<li>​    printf(“Output the MinHeap:\\n”);    </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)    </li>\n<li>​    {    </li>\n<li>​        printf(“%d\\t”, array[i]);    </li>\n<li>​    }    </li>\n<li>​    MinInsert(array, heapSize, minelem);   </li>\n<li>​    printf(“\\nOutput insert elem %d:\\n”,minelem);  </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)  </li>\n<li>​    {  </li>\n<li>​        printf(“%d\\t”, array[i]);  </li>\n<li>​    }  </li>\n<li>​    printf(“\\n”);  </li>\n<li>/<em>build max heap and test insert</em>/  </li>\n<li>​    MaxHeapCreat(array, heapSize);      </li>\n<li>​    printf(“Output the MaxHeap:\\n”);      </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)      </li>\n<li>​    {      </li>\n<li>​        printf(“%d\\t”, array[i]);      </li>\n<li>​    }      </li>\n<li>​    MaxInsert(array, heapSize,maxelem);   </li>\n<li>​    printf(“\\nOutput insert elem %d:\\n”,maxelem);      </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)      </li>\n<li>​    {      </li>\n<li>​        printf(“%d\\t”, array[i]);      </li>\n<li>​    }  </li>\n<li>​    printf(“\\n”);   </li>\n<li>}  </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"堆的概念\"><a href=\"#堆的概念\" class=\"headerlink\" title=\"堆的概念\"></a>堆的概念</h1><p>堆实际上是一棵完全二叉树，其任何一非叶节点满足性质：<br> Key[i]&lt;=key[2i+1]&amp;&amp;Key[i]&lt;=key[2i+2]或者Key[i]&gt;=Key[2i+1]&amp;&amp;key&gt;=key[2i+2]<br> 即任何一非叶节点的关键字不大于或者不小于其左右孩子节点的关键字。<br> 堆分为大顶堆和小顶堆，满足Key[i]&gt;=Key[2i+1]&amp;&amp;key&gt;=key[2i+2]称为大顶堆，满足 Key[i]&lt;=key[2i+1]&amp;&amp;Key[i]&lt;=key[2i+2]称为小顶堆。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。</p>\n<p>其中，大根堆和小根堆在海量数据的top N问题中，有着很好的时间复杂度。</p>\n<p>首先，先给出一个交换两个变量数值的函数。</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>void Swap(uint32_t* array, uint32_t i, uint32_t j)  </li>\n<li>{  </li>\n<li>​    assert(array);  </li>\n<li>​    uint32_t tmp = 0;  </li>\n<li>​    tmp = array[j];  </li>\n<li>​    array[j] = array[i];  </li>\n<li>​    array[i] = tmp;  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">void Swap(uint32_t* array, uint32_t i, uint32_t j)</div><div class=\"line\">&#123;</div><div class=\"line\">\tassert(array);</div><div class=\"line\">\tuint32_t tmp = 0;</div><div class=\"line\">\ttmp = array[j];</div><div class=\"line\">\tarray[j] = array[i];</div><div class=\"line\">\tarray[i] = tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>头文件包含</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>#include <stdlib.h>  </stdlib.h></li>\n<li>#include <stdint.h>  </stdint.h></li>\n<li>#include <assert.h>  </assert.h></li>\n<li>#include <string.h>  </string.h></li>\n<li>#include <stdio.h>  </stdio.h></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;stdint.h&gt;</div><div class=\"line\">#include &lt;assert.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">#include &lt;stdio.h&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"大根堆实现\"><a href=\"#大根堆实现\" class=\"headerlink\" title=\"大根堆实现\"></a>大根堆实现</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>大根堆调整</em>/  </li>\n<li>void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  </li>\n<li>{  </li>\n<li>​    uint32_t leftChild = 0, rightChild = 0,  largest = 0;  </li>\n<li>​    leftChild = 2*currentNode + 1;  </li>\n<li>​    rightChild = 2*currentNode + 2;  </li>\n<li>​    if(leftChild &lt; heapSize &amp;&amp; array[leftChild] &gt; array[currentNode])  </li>\n<li>​        largest = leftChild;  </li>\n<li>​    else  </li>\n<li>​        largest = currentNode;  </li>\n<li>​    if(rightChild &lt; heapSize &amp;&amp; array[rightChild] &gt; array[largest])  </li>\n<li>​        largest = rightChild;  </li>\n<li>​    if(largest != currentNode)  </li>\n<li>​    {  </li>\n<li>​        Swap(array, largest, currentNode);  </li>\n<li>​        MaxHeapify(array, heapSize, largest);  </li>\n<li>​    }  </li>\n<li>}  </li>\n<li></li>\n<li>/<em>构建大根堆</em>/  </li>\n<li>void MaxHeapCreat(uint32_t* array, uint32_t heapSize)  </li>\n<li>{  </li>\n<li>​    int i = 0;  </li>\n<li>​    for(i = heapSize/2; i &gt;= 0; i–)  </li>\n<li>​    {  </li>\n<li>​        MaxHeapify(array, heapSize, i);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*大根堆调整*/</div><div class=\"line\">void MaxHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)</div><div class=\"line\">&#123;</div><div class=\"line\">\tuint32_t leftChild = 0, rightChild = 0,  largest = 0;</div><div class=\"line\">\tleftChild = 2*currentNode + 1;</div><div class=\"line\">\trightChild = 2*currentNode + 2;</div><div class=\"line\">\tif(leftChild &lt; heapSize &amp;&amp; array[leftChild] &gt; array[currentNode])</div><div class=\"line\">\t\tlargest = leftChild;</div><div class=\"line\">\telse</div><div class=\"line\">\t\tlargest = currentNode;</div><div class=\"line\">\tif(rightChild &lt; heapSize &amp;&amp; array[rightChild] &gt; array[largest])</div><div class=\"line\">\t\tlargest = rightChild;</div><div class=\"line\">\tif(largest != currentNode)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSwap(array, largest, currentNode);</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, largest);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*构建大根堆*/</div><div class=\"line\">void MaxHeapCreat(uint32_t* array, uint32_t heapSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">\tfor(i = heapSize/2; i &gt;= 0; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"小根堆实现\"><a href=\"#小根堆实现\" class=\"headerlink\" title=\"小根堆实现\"></a>小根堆实现</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>小根堆调整</em>/  </li>\n<li>void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)  </li>\n<li>{  </li>\n<li>​    uint32_t leftChild = 0, rightChild = 0,  minimum = 0;  </li>\n<li>​    leftChild = 2*currentNode + 1;  </li>\n<li>​    rightChild = 2*currentNode + 2;  </li>\n<li>​    if(leftChild &lt; heapSize &amp;&amp; array[leftChild] &lt; array[currentNode])  </li>\n<li>​        minimum = leftChild;  </li>\n<li>​    else  </li>\n<li>​        minimum = currentNode;  </li>\n<li>​    if(rightChild &lt; heapSize &amp;&amp; array[rightChild] &lt; array[minimum])  </li>\n<li>​        minimum = rightChild;  </li>\n<li>​    if(minimum != currentNode)  </li>\n<li>​    {  </li>\n<li>​        Swap(array, minimum, currentNode);  </li>\n<li>​        MinHeapify(array, heapSize, minimum);  </li>\n<li>​    }  </li>\n<li>}  </li>\n<li>/<em>构建小根堆</em>/  </li>\n<li>void MinHeapCreat(uint32_t* array, uint32_t heapSize)  </li>\n<li>{  </li>\n<li>​    int i = 0;  </li>\n<li>​    for(i = heapSize/2; i &gt;= 0; i–)  </li>\n<li>​    {  </li>\n<li>​        MinHeapify(array, heapSize, i);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*小根堆调整*/</div><div class=\"line\">void MinHeapify(uint32_t* array, uint32_t heapSize, uint32_t currentNode)</div><div class=\"line\">&#123;</div><div class=\"line\">\tuint32_t leftChild = 0, rightChild = 0,  minimum = 0;</div><div class=\"line\">\tleftChild = 2*currentNode + 1;</div><div class=\"line\">\trightChild = 2*currentNode + 2;</div><div class=\"line\">\tif(leftChild &lt; heapSize &amp;&amp; array[leftChild] &lt; array[currentNode])</div><div class=\"line\">\t\tminimum = leftChild;</div><div class=\"line\">\telse</div><div class=\"line\">\t\tminimum = currentNode;</div><div class=\"line\">\tif(rightChild &lt; heapSize &amp;&amp; array[rightChild] &lt; array[minimum])</div><div class=\"line\">\t\tminimum = rightChild;</div><div class=\"line\">\tif(minimum != currentNode)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSwap(array, minimum, currentNode);</div><div class=\"line\">\t\tMinHeapify(array, heapSize, minimum);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*构建小根堆*/</div><div class=\"line\">void MinHeapCreat(uint32_t* array, uint32_t heapSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">\tfor(i = heapSize/2; i &gt;= 0; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tMinHeapify(array, heapSize, i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"top-N问题\"><a href=\"#top-N问题\" class=\"headerlink\" title=\"top N问题\"></a>top N问题</h1><p>利用小根堆解决获取大量数据中最大的N个值，先构建一个拥有N个元素的小根堆。然后，将其余的元素插入到小根堆即可。插入方法如下：</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>maintain the top N numbers</em>/  </li>\n<li>void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  </li>\n<li>{  </li>\n<li>​    if(elem &gt; array[0])  </li>\n<li>​    {  </li>\n<li>​        array[0] = elem;  </li>\n<li>​        MinHeapify(array, heapSize, 0);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*maintain the top N numbers*/</div><div class=\"line\">void MinInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif(elem &gt; array[0])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tarray[0] = elem;</div><div class=\"line\">\t\tMinHeapify(array, heapSize, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 利用大根堆解决获取大量数据中最小的N个值，先构建一个拥有N个元素的大根堆。然后，将其余的元素插入到大根堆即可。插入方法如下：</p>\n<p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>/<em>maintain the low N numbers</em>/  </li>\n<li>void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)  </li>\n<li>{  </li>\n<li>​    if(elem &lt; array[0])  </li>\n<li>​    {  </li>\n<li>​        array[0] = elem;  </li>\n<li>​        MaxHeapify(array, heapSize, 0);  </li>\n<li>​    }  </li>\n<li>}  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*maintain the low N numbers*/</div><div class=\"line\">void MaxInsert(uint32_t* array, uint32_t heapSize, uint32_t elem)</div><div class=\"line\">&#123;</div><div class=\"line\">\tif(elem &lt; array[0])</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tarray[0] = elem;</div><div class=\"line\">\t\tMaxHeapify(array, heapSize, 0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h1><p>堆调整一次的时间复杂度是O(logN)。所以，通过堆来解决top N 问题的时间复杂度是O(nlogN).</p>\n<p>其中，n为数据的个数,N为堆维护的数据的个数。</p>\n<h1 id=\"测试程序\"><a href=\"#测试程序\" class=\"headerlink\" title=\"测试程序\"></a>测试程序</h1><p><strong>[cpp]</strong> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">view plain</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">copy</a> <a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">print</a><a href=\"http://blog.csdn.net/pngynghay/article/details/22052737#\" target=\"_blank\" rel=\"external\">?</a></p>\n<ol>\n<li>int main()  </li>\n<li>{  </li>\n<li>​    int i = 0, heapSize = 10;  </li>\n<li>​    uint32_t array[] = {2,20,13,18,15,8,3,5,4,25};  </li>\n<li>​    uint32_t minelem = 10, maxelem = 1;  </li>\n<li></li>\n<li>/<em>build min heap and test insert</em>/  </li>\n<li>​    MinHeapCreat(array, heapSize);    </li>\n<li>​    printf(“Output the MinHeap:\\n”);    </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)    </li>\n<li>​    {    </li>\n<li>​        printf(“%d\\t”, array[i]);    </li>\n<li>​    }    </li>\n<li>​    MinInsert(array, heapSize, minelem);   </li>\n<li>​    printf(“\\nOutput insert elem %d:\\n”,minelem);  </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)  </li>\n<li>​    {  </li>\n<li>​        printf(“%d\\t”, array[i]);  </li>\n<li>​    }  </li>\n<li>​    printf(“\\n”);  </li>\n<li>/<em>build max heap and test insert</em>/  </li>\n<li>​    MaxHeapCreat(array, heapSize);      </li>\n<li>​    printf(“Output the MaxHeap:\\n”);      </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)      </li>\n<li>​    {      </li>\n<li>​        printf(“%d\\t”, array[i]);      </li>\n<li>​    }      </li>\n<li>​    MaxInsert(array, heapSize,maxelem);   </li>\n<li>​    printf(“\\nOutput insert elem %d:\\n”,maxelem);      </li>\n<li>​    for(i = 0; i &lt; heapSize; i++)      </li>\n<li>​    {      </li>\n<li>​        printf(“%d\\t”, array[i]);      </li>\n<li>​    }  </li>\n<li>​    printf(“\\n”);   </li>\n<li>}  </li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}